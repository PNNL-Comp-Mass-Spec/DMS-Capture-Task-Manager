<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dart.PowerTCP.Ftp</name>
    </assembly>
    <members>
        <member name="T:Dart.PowerTCP.Ftp.Certificate">
            <summary>Represents a digital certificate.</summary><remarks>
				<p>A digital certificate is a common credential that provides authentication. 
			A trusted organization, called a <b>Certificate</b> Authority (CA), assigns a certificate 
			to a user or entity who then uses the certificate to prove 
			itself to the other side. The user or entity is able to do this using a digital
			certificate because the certificate contains information necessary for the client
			to authenticate the server, including the following information:</p>
				<ul>
					<li>The <b>Certificate</b> Authority's name.</li>
					<li>The entity to whom the certificate was issued.</li>
					<li>The entity's public key.</li>
					<li>The dates the certificate is valid.</li>
				</ul>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Certificate.Finalize">
            <remarks>
				This is used by the System to clean up resources for the noted object.  This method is needed to make sure critical cleanup information is not lost before Object.Dispose is called.  
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Certificate.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Certificate.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Certificate.#ctor(System.IntPtr)">
            <summary>Create a new Certificate object.</summary><remarks></remarks><param name="handle"></param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Certificate.Verify">
            <summary>
			Used to validate server credentials for certificates.
		</summary><remarks>
				<p>This method throws an exception if the certificate fails to acquire server credentials. A certificate
			could fail to acquire credentials for several reasons. For example, the certificate may not have a private key.
			A certificate must be made to acquire credentials before it can be used.
			</p>
			</remarks><exception cref="T:System.ArgumentException">The certificate failed to acquire server credentials.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.Handle">
            <summary>Holds a handle to the Certificate object for advanced users.</summary><remarks>Use this handle in place of PCCERT_CONTEXT values in relevant Crypto API functions.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.IssuerName">
            <summary>Returns the name of the Certificate Authority that issued this certificate.</summary><remarks>
				<p>This property returns the name of the entity that signed this certificate.
				When a certificate is received (causing the CertificateReceivedEvent to be raised) internally
				the certificate signature is validated with the specified CA. is checked against the local machine Trusted Root Authorities
				to determine if the certificate is from a valid issuer.
				</p>
				<p>Sample data: "Thawte Test CA Root"</p>
			</remarks><value>A string containing the name of the issuer.</value>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.IssuedTo">
            <summary>Returns the domain name of the party this certificate was issued to.</summary><value>A string containing the domain name of the entity for whom the certificate was issued.
			</value><remarks>
				<p>When a certificate is received (causing the CertificateReceivedEvent to be raised) this property is checked to determine whether the certificate is valid for the remote host.</p>
				<p>Sample data: "test.dart.com"</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.KeyUsage">
            <summary>Identifies for what purpose a key should be used.</summary><remarks>
				<p>Key usage is an extension to the x.509 certificate format specifying the purpose for a key.
				For example, KeyUsage.ServerAuth identifies that this certificate can be used to provide server
				authentication.
				</p>
			</remarks><value>A KeyUsage constant identifying the purpose of a key.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.SerialNumber">
            <summary>Returns the serial number of this certificate as a Hex-encoded string.</summary><remarks>
				<p>The serial number is an identification number used for a certificate. All certificates issued by a given CA have unique serial numbers
			so combining this property with <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate~IssuerName.html">IssuerName</a> results in a string which can be used to uniquely identify a certificate.</p>
				<p>Sample data: "08ea11"</p>
			</remarks><value>A Hex-encoded string containing the serial number of this certificate</value>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.IssueDate">
            <summary>Returns the date this certificate was/will be made valid.</summary><remarks>
				<p>The date/time is reported in Greenwich Mean Time. If a certificate is received
			with IssueDate prior to the current date/time
			the certificate will be determined to be invalid.</p>
				<p>Sample data: "5/13/2002 7:12:44 PM"</p>
			</remarks><value>A System.DateTime value representing the starting date and time this certificate is valid.</value>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.ExpirationDate">
            <summary>Returns the date this certificate will cease to be valid.</summary><remarks>
				<p>The date/time is reported in Greenwich Mean Time. If a certificate is received
			with ExpirationDate prior to the current date/time
			the certificate will be determined to be invalid.</p>
				<p>Sample data: "5/13/2002 7:12:44 PM"</p>
			</remarks><value>A System.DateTime value representing the date and time this certificate will cease to be valid.</value>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.Version">
            <summary>Returns the version of X.509 certificate being used.</summary><remarks>Currently, this property will return 1, 2, or 3. 1 indicates an X.509 v1 
			certificate, 2 indicates an X.509 v2 certificate, and 3 indicates an X.509 v3 certificate.</remarks><value>A long representing the version of X.509 certificate.</value><p>Sample data: 3</p>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.Hash">
            <summary>Returns the certificate's 20-byte SHA hash value.</summary><remarks>The hash value of a certificate is a check sum
			created with a hash algorithm that the recipient uses to determine if the 
			certificate has been altered.
			</remarks><value>A byte array containing the certificate's hash value.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.Name">
            <summary>Returns the friendly name of this certificate.</summary><value>A string containing the friendly name of this certificate.</value><remarks>
				<p>This is the human-readable name of the certificate.  Sometimes this is the same as IssuedTo, if nothing was specified as a "friendlyname" when the certificate was created.</p>
				<p>Sample data: "Thawte Server CA"</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.Description">
            <summary>Returns the human-readable description of this certificate.</summary><value>A string containing the description of this certificate.</value><remarks>
				<p>Sample data: "My Test Cert"</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Certificate.EmailAddress">
            <summary>Returns an email address string associated with the certificate.</summary><value>A string containing an email address.</value><remarks>If the certificate has a Subject Alternative Name extension
				or Issuer Alternative Name, the first rfc822Name is returned. If no
				rfc822Name choice is found in the extension, the Subject Name field for
				the Email OID is returned. If the certificate does not have an email address embedded
				in the certificate, an empty string is returned.
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateProvider">
            <summary>Enumerates the cryptographic providers allowed by Microsoft.</summary><remarks>The most commonly used provider for Microsoft certificates is the Microsoft Base Cryptographic Provider</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.GemSafe">
            <summary>Gemplus GemSAFE Card CSP v1.0</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.Sicrypt">
            <summary>Infineon SICRYPT Base Smart Card CSP</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.Base">
            <summary>Microsoft Base Cryptographic Provider v1.0</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.BaseDssDh">
            <summary>Microsoft Base DSS and Diffie-Hellman Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.BaseDss">
            <summary>Microsoft Base DSS Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.DhSchannel">
            <summary>Microsoft DH SChannel Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.EnhancedBase">
            <summary>Microsoft Enhanced Cryptographic Provider v1.0</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.EnhancedDssDh">
            <summary>Microsoft Enhanced DSS and Diffie-Hellman Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.EnhancedRsaAes">
            <summary>Microsoft Enhanced RSA and AES Cryptographic Provider (Prototype)</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.Exchange">
            <summary>Microsoft Exchange Cryptographic Provider v1.0</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.RsaSchannel">
            <summary>Microsoft RSA SChannel Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.Strong">
            <summary>Microsoft Strong Cryptographic Provider</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateProvider.Schlumberger">
            <summary>Schlumberger Cryptographic Service Provider</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.KeyUsage">
            <summary>Enumerates the uses for a key.</summary><remarks>
				<p>Key usage is an extension to the x.509 certificate format specifying the purpose for a key.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.EncipherOnly">
            <summary>Certificate can be used for Key Encipherment.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.CrlSigning">
            <summary>Certificate can be used for signing the Certificate Revocation List (CRL).</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.CertificateSigning">
            <summary>Certificate can be used for certificate validation.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.KeyAgreement">
            <summary>Certificate can be used for key negotiation.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.DataEncipherment">
            <summary>Certificate can be used for encryption.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.KeyEncipherment">
            <summary>Certificate can be used for symmetric key transfer.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.NonRepudiation">
            <summary>Certificate can be used for validation</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.DigitalSignature">
            <summary>Certificate can be used for data validation.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.ServerAuth">
            <summary>Certificate can be used for server authentication.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.ClientAuth">
            <summary>Certificate can be used for client authentication.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.CodeSigning">
            <summary>Certificate can be used for code signing.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.EmailProtection">
            <summary>Certificate can be used for email encryption.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.IPSecEndSystem">
            <summary>Certificate can be used for IPSec “server”.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.IPSecTunnel">
            <summary>Certificate can be used for IPSec transfer encryption.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.IPSecUser">
            <summary>Certificate can be used for IPSec user encryption.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.TimestampSigning">
            <summary>Certificate can be used for timestamp validation</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.KeyUsage.All">
            <summary>Certificate can be used for everything.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs">
            <summary>
			Provides data for any event where certificates are received.
			</summary><remarks><p>A <b>CertificateReceivedEventArgs</b> object is passed as a parameter to all events that report the receipt of 
			a certificate from the remote server. Use this object to determine if the received certificate is valid. If any portion
			of the certificate is determined to be invalid (for example, if Certificate.ExpirationDate has passed), the CertificateEventArgs.Accept property
			will be false, indicating that the certificate will not be accepted. Set Certificate.Accept to true to override this.</p>
				<p>If your code causes an exception, it would be returned to the handling
			event without you seeing it. To preclude such a condition, you should ALWAYS
			use a try/
			catch block around your event-handling code.</p>
			</remarks>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
Private Sub CertificateReceived(ByVal sender As Object, ByRef e As CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
   Dim msg As String = "The certificate was invalid for the following reason(s)" + vbCrLf

   ' Check to see if the certificate is from a trusted root.
   If Not e.TrustedRoot Then
      msg += "This certificate is not from a trusted root" + vbCrLf
   End If

   ' Check to see if the certificate has a valid date.
   If Not e.ValidDate Then
      msg += "This certificate does not have a valid date" + vbCrLf
   End If

   ' Check to see if the certificate has a valid name.
   If Not e.ValidName Then
      msg += "This certificate does not have a valid name" + vbCrLf
   End If

   If msg &lt;&gt; "" Then
      msg += "Would you like to accept this certificate anyway?"
      If MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes Then
         e.Accept = True
      End If
   End If
End Sub
				</code>
				<code lang="C#"> 
private void CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
   string msg = "The certificate was invalid for the following reason(s)\n";

   // Check to see if the certificate is from a trusted root.
   if(!e.TrustedRoot)
      msg+= "This certificate is not from a trusted root\n";

   // Check to see if the certificate has a valid date.
   if(!e.ValidDate)
      msg+= "This certificate does not have a valid date\n";

   // Check to see if the certificate has a valid name.
   if(!e.ValidName)
      msg+= "This certificate does not have a valid name\n";

   if(!e.Accept)
   {
      msg += "Would you like to accept this certificate anyway?";
      if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
         e.Accept = true;
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.Certificate">
            <summary>The certificate received for authentication.</summary><remarks><p>This property returns the certificate for which the Tcp.CertificateReceived
			event was raised. In order for secure communication to continue with the
			sender, this certificate must be accepted by the receiver. Whether a certificate
			is accepted is controlled by the CertificateReceivedEventArgs.Accept property.</p></remarks><value>A Certificate object representing the received certificate.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.Accept">
            <summary>
				Controls whether or not the certificate is accepted.
			</summary><remarks>
				<p>If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidDate.html">ValidDate</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidName.html">ValidName</a>,
				and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~TrustedRoot.html">TrustedRoot</a> are all true, this property will return true
				meaning the certificate was accepted. Set this property to false to override this and
				reject the certificate.
				</p>
				<p>If any of the properties <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidDate.html">ValidDate</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidName.html">ValidName</a>,
				and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~TrustedRoot.html">TrustedRoot</a> are false, this property will return false
				meaning the certificate was not accepted. Set this property to true to override this and
				accept the certificate.
				</p>
			</remarks><value>Boolean which determines whether or not a certificate is accepted.</value>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
Private Sub CertificateReceived(ByVal sender As Object, ByRef e As CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
   Dim msg As String = "The certificate was invalid for the following reason(s)" + vbCrLf

   ' Check to see if the certificate is from a trusted root.
   If Not e.TrustedRoot Then
      msg += "This certificate is not from a trusted root" + vbCrLf
   End If

   ' Check to see if the certificate has a valid date.
   If Not e.ValidDate Then
      msg += "This certificate does not have a valid date" + vbCrLf
   End If

   ' Check to see if the certificate has a valid name.
   If Not e.ValidName Then
      msg += "This certificate does not have a valid name" + vbCrLf
   End If

   If msg &lt;&gt; "" Then
      msg += "Would you like to accept this certificate anyway?"
      If MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes Then
         e.Accept = True
      End If
   End If
End Sub
				</code>
				<code lang="C#"> 
private void CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
   string msg = "The certificate was invalid for the following reason(s)\n";

   // Check to see if the certificate is from a trusted root.
   if(!e.TrustedRoot)
      msg+= "This certificate is not from a trusted root\n";

   // Check to see if the certificate has a valid date.
   if(!e.ValidDate)
      msg+= "This certificate does not have a valid date\n";

   // Check to see if the certificate has a valid name.
   if(!e.ValidName)
      msg+= "This certificate does not have a valid name\n";

   if(!e.Accept)
   {
      msg += "Would you like to accept this certificate anyway?";
      if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
         e.Accept = true;
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.ValidDate">
            <summary>Returns whether or not the current time-date is within the certificate's life span.</summary><remarks><p>If the current date-time is greater than Certificate.IssueDate and less than Certificate.ExpirationDate,
			this property will return true. Otherwise, this property will return false indicating an invalid date.
			</p></remarks><value>A boolean indicating whether or not the certificate has a valid date.</value>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
Private Sub CertificateReceived(ByVal sender As Object, ByRef e As CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
   Dim msg As String = "The certificate was invalid for the following reason(s)" + vbCrLf

   ' Check to see if the certificate is from a trusted root.
   If Not e.TrustedRoot Then
      msg += "This certificate is not from a trusted root" + vbCrLf
   End If

   ' Check to see if the certificate has a valid date.
   If Not e.ValidDate Then
      msg += "This certificate does not have a valid date" + vbCrLf
   End If

   ' Check to see if the certificate has a valid name.
   If Not e.ValidName Then
      msg += "This certificate does not have a valid name" + vbCrLf
   End If

   If msg &lt;&gt; "" Then
      msg += "Would you like to accept this certificate anyway?"
      If MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes Then
         e.Accept = True
      End If
   End If
End Sub
				</code>
				<code lang="C#"> 
private void CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
   string msg = "The certificate was invalid for the following reason(s)\n";

   // Check to see if the certificate is from a trusted root.
   if(!e.TrustedRoot)
      msg+= "This certificate is not from a trusted root\n";

   // Check to see if the certificate has a valid date.
   if(!e.ValidDate)
      msg+= "This certificate does not have a valid date\n";

   // Check to see if the certificate has a valid name.
   if(!e.ValidName)
      msg+= "This certificate does not have a valid name\n";

   if(!e.Accept)
   {
      msg += "Would you like to accept this certificate anyway?";
      if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
         e.Accept = true;
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.ValidName">
            <summary>Returns whether or not the name is valid.</summary><remarks><p>This property is true if Certificate.IssuedTo matches the URL for the Certificate.Name property; Otherwise this property is false.
			If this property is false you can:
			<ul>
						<li>Check whether it is another (non-standard) name known to and trusted by you, and accept if it is.</li>
						<li>Check whether the SslStream.Name property is an IP, in which case it should be compared against a DNS lookup of the domain name.</li>
					</ul>
				</p></remarks><value>A boolean indicating whether or not the certificate has a valid name.</value>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
Private Sub CertificateReceived(ByVal sender As Object, ByRef e As CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
   Dim msg As String = "The certificate was invalid for the following reason(s)" + vbCrLf

   ' Check to see if the certificate is from a trusted root.
   If Not e.TrustedRoot Then
      msg += "This certificate is not from a trusted root" + vbCrLf
   End If

   ' Check to see if the certificate has a valid date.
   If Not e.ValidDate Then
      msg += "This certificate does not have a valid date" + vbCrLf
   End If

   ' Check to see if the certificate has a valid name.
   If Not e.ValidName Then
      msg += "This certificate does not have a valid name" + vbCrLf
   End If

   If msg &lt;&gt; "" Then
      msg += "Would you like to accept this certificate anyway?"
      If MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes Then
         e.Accept = True
      End If
   End If
End Sub
				</code>
				<code lang="C#"> 
private void CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
   string msg = "The certificate was invalid for the following reason(s)\n";

   // Check to see if the certificate is from a trusted root.
   if(!e.TrustedRoot)
      msg+= "This certificate is not from a trusted root\n";

   // Check to see if the certificate has a valid date.
   if(!e.ValidDate)
      msg+= "This certificate does not have a valid date\n";

   // Check to see if the certificate has a valid name.
   if(!e.ValidName)
      msg+= "This certificate does not have a valid name\n";

   if(!e.Accept)
   {
      msg += "Would you like to accept this certificate anyway?";
      if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
         e.Accept = true;
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.TrustedRoot">
            <summary>Returns whether or not the certificate is from a Trusted Root Authority.</summary><remarks>
				<p>Trusted Root Authorities are found in the certificate store named "Trust". When a certificate
			is received, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate~IssuedTo.html">IssuedTo</a> is compared to the Trusted Root Authorities. If found, this
			property will be true. If this property is false, the root is not on the trusted list
			and you should not accept the certificate unless the authority (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate~IssuerName.html">IssuerName</a>) is known to you and you trust it (in which case it should be added to the Trusted list).
			</p>
			</remarks><value>A boolean indicating whether or not the certificate is from a Trusted Root Authority.</value>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
Private Sub CertificateReceived(ByVal sender As Object, ByRef e As CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
   Dim msg As String = "The certificate was invalid for the following reason(s)" + vbCrLf

   ' Check to see if the certificate is from a trusted root.
   If Not e.TrustedRoot Then
      msg += "This certificate is not from a trusted root" + vbCrLf
   End If

   ' Check to see if the certificate has a valid date.
   If Not e.ValidDate Then
      msg += "This certificate does not have a valid date" + vbCrLf
   End If

   ' Check to see if the certificate has a valid name.
   If Not e.ValidName Then
      msg += "This certificate does not have a valid name" + vbCrLf
   End If

   If msg &lt;&gt; "" Then
      msg += "Would you like to accept this certificate anyway?"
      If MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes Then
         e.Accept = True
      End If
   End If
End Sub
				</code>
				<code lang="C#"> 
private void CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
   string msg = "The certificate was invalid for the following reason(s)\n";

   // Check to see if the certificate is from a trusted root.
   if(!e.TrustedRoot)
      msg+= "This certificate is not from a trusted root\n";

   // Check to see if the certificate has a valid date.
   if(!e.ValidDate)
      msg+= "This certificate does not have a valid date\n";

   // Check to see if the certificate has a valid name.
   if(!e.ValidName)
      msg+= "This certificate does not have a valid name\n";

   if(!e.Accept)
   {
      msg += "Would you like to accept this certificate anyway?";
      if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
         e.Accept = true;
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.RemoteEndPoint">
            <summary>Returns the endpoint of the remote host.</summary><remarks>
				<p>Use RemoteEndPoint along with the remote <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> for decisions on connection acceptance.</p>
			</remarks><value>An IPEndPoint indicating the IP address and port of the remote host.</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SecureProtocol">
            <summary>Enumerates the type of encryption used in the secure product.</summary><remarks>The current security standard is SSL3.</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.Auto">
            <summary>Automatically negotiate the security protocol.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.Ssl3">
            <summary>Use SSL 3.0 as the security protocol.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.Ssl2">
            <summary>Use SSL 2.0 as the security protocol.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.Pct">
            <summary>Use PCT 1.0 as the security protocol.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.Tls">
            <summary>Use TLS 1.0 (Transport Level Security - SSL 3.1) as the security protocol.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.SecureProtocol.None">
            <summary>No security.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateStore">
            <summary>Use the CertificateStore Object to gain access to a store of certificates on the local system.</summary><remarks>
				<p>A certificate store is a permanent storage location where certificates, certificate revocation lists, and certificate trust
				lists are stored. Use this object by creating a new instance of <b>CertificateStore,</b> passing in the certificate store location, certificate store
				name, and key usage filter. This will create the <b>CertificateStore</b> object (which actually is a collection of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> objects which meet the
				criteria specified). Iterate through this collection to 
				access each <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> object.</p>
				<p>The CertificateListForm control, included with this product, provides a convenient utility for managing local security certificates.</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.#ctor">
            <summary>Creates a new CertificateStore object.</summary><remarks>
				<p>The default constructor accesses certificates in "My" <i>CurrentUser</i>
				certificate store.
				</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.Finalize">
            <remarks>
				This is used by the System to clean up resources for the noted object.  This method is needed to make sure critical cleanup information is not lost before Object.Dispose is called.  
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.#ctor(System.String)">
            <summary>Creates a new CertificateStore object, initializing it with a pfx file on disk.</summary><remarks>
				<p>Use this method to load certificates contained in a digital certificate file (pfx file) into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateStore.html">CertificateStore</a>. The desired certificate can then be chosen from the store</p>
			</remarks><param name="certFileName">The full filepath of a pfx file on disk.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.#ctor(System.String,System.String)">
            <summary>Creates a new CertificateStore object, initializing it with a pfx file on disk.</summary><remarks>
				<p>Use this method to load certificates contained in a digital certificate file (pfx file) into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateStore.html">CertificateStore</a>. The desired certificate can then be chosen from the store</p>
			</remarks><param name="certFileName">The full filepath of a pfx file on disk.</param><param name="password">If the pfx file is password protected, specifies the password to use to open the file.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.#ctor(Dart.PowerTCP.Ftp.CertificateStoreLocation,Dart.PowerTCP.Ftp.CertificateStoreName)">
            <summary>Creates a new CertificateStore object.</summary><remarks>
				<p>This constructor accesses the certificates located at the parameters
				specified by <i>location</i> and <i>name</i>.</p>
			</remarks><param name="location">The location of the certificate store.</param><param name="name">The name of the certificate store.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.#ctor(Dart.PowerTCP.Ftp.CertificateStoreLocation,System.String,Dart.PowerTCP.Ftp.KeyUsage)">
            <summary>Creates a new CertificateStore object.</summary><remarks>
				<p>This constructor accesses the certificates located at the parameters
				specified by <i>location</i> and <i>name</i>, and only grabs the certificates
				which match the filter specified by <i>filter</i>.
				</p>
			</remarks><param name="location">The location of the certificate store.</param><param name="name">The name of the certificate store.</param><param name="filter">A KeyUsage value specifying what type of certificates to access.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.CopyTo(Dart.PowerTCP.Ftp.CertificateStore,System.Int32)">
            <summary>
				Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
			</summary><remarks>
				<p>The specified array must be of a compatible type.</p>
				<p>This method uses Array.Copy to copy the elements.</p>
			</remarks><param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param><exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentException">array is multidimensional.</exception><exception cref="T:System.InvalidCastException">The type of the source ArrayList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.Insert(System.Int32,Dart.PowerTCP.Ftp.Certificate)">
            <summary>
				Inserts an element into the collection at the specified index.
			</summary><remarks>
				<p>If Count already equals Capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</p>
				<p>If index is equal to Count, value is added to the end of ArrayList.</p>
				<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</p>
			</remarks><param name="index">The zero-based index at which value should be inserted.</param><param name="value">The Object to insert.</param><exception cref="T:System.ArgumentOutOfRangeException">
			index is less than zero. 
			<P>-or-</P>
				<P>index is greater than Count.</P>
			</exception><exception cref="T:System.NotSupportedException">
			The ArrayList is read-only. 
			<p>-or-</p>
				<p>The ArrayList has a fixed size.</p>
			</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.IndexOf(Dart.PowerTCP.Ftp.Certificate)">
            <summary>
				Searches for the specified <i>value</i> and returns the zero-based index of the first occurrence within the entire collection.
			</summary><remarks>
				<p>The collection is searched forward starting at the first element and ending at the last element.</p>
				<p>This method performs a linear search. On average, this is an O(n/2) operation, where n is Count. The longest search is an O(n) operation.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><returns>
				The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.
			</returns><param name="value">The Object to locate in the collection.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.CertificateStore.Contains(Dart.PowerTCP.Ftp.Certificate)">
            <summary>
				Determines whether an element is in the collection.
			</summary><remarks>
				<p>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><param name="value">The Object to locate in the collection. The element to locate can be a null reference (Nothing in Visual Basic). </param><returns>
				true if item is found in the collection; otherwise, false.
			</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateStore.Location">
            <summary>The location where the certificate store resides.</summary><remarks>
				<p><a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> stores are uniquely identified by two pieces of information found in the registry: location and name.</p>
				<p>This property defaults to CertificateStoreLocation.CurrentUser.</p>
			</remarks><value>A CertificateStoreLocation value identifying the location of the certificate store.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateStore.Name">
            <summary>The name of this certificate store.</summary><remarks>
				<p><a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> stores are uniquely identified by two pieces of information found in the registry: location and name.
				Some common names are:
					<div class="tablediv">
						<table cellspacing="0" class="dtTABLE">
							<tr valign="top">
								<th width="50%">Name</th>
								<th width="50%">Description</th>
							</tr>
							<tr valign="top">
								<td width="50%"> "MY"</td>
								<td width="50%"> Personal certificates. </td>
							</tr>
							<tr valign="top">
								<td width="50%"> "CA"</td>
								<td width="50%"> Certifying authority certificates. </td>
							</tr>
							<tr valign="top">
								<td width="50%"> "ROOT"</td>
								<td width="50%"> Trusted root certification authorities certificates. </td>
							</tr>
							<tr valign="top">
								<td width="50%"> "SPC"</td>
								<td width="50%"> Software publisher certificates. </td>
							</tr>
						</table>
					</div>
				</p>
				<p>This property defaults to CertificateStoreLocation.My.</p>
			</remarks><value>A string value identifying the name of the certificate store.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.CertificateStore.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than Count.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax:
<pre class="code">myCollection[Index]</pre>
</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access certificates
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access certificates
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStore.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateStoreLocation">
            <summary>Enumerates the possible locations for certificates</summary><remarks>The system store is the certificate store located in the HKEY_CURRENT_USER 
registry key. The machine store is the certificate store located in the 
HKEY_LOCAL_MACHINE registry key. Applications installed as a service should 
store their certificates in the machine store since there is no current user 
when running as a service.</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access the "MY" certificate store
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStoreName.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access the "MY" certificate store
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStoreName.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.CurrentUser">
            <summary>The current user’s certificates.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.LocalMachine">
            <summary>The local machine’s certificates.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.CurrentService">
            <summary>The current service’s certificates.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.Services">
            <summary>Certificates for services</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.Users">
            <summary>Certificates for users</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.CurrentUserGroupPolicy">
            <summary>Certificates for the current user’s groups</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.LocalMachineGroupPolicy">
            <summary>Certificates for the local machine’s groups</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreLocation.LocalMachineEnterprise">
            <summary>Certificates for the enterprise</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateStoreName">
            <summary>Enumerates the names for commonly used certificate stores.</summary><remarks>
				<p>A certificate store is a location on the system (memory, disk, registry, etc.) where certificates are stored for use. 
				Although there are many certificate stores, there are two commonly used system stores.</p>
				<ul>
					<li>MY - personal certificates go here</li>
					<li>ROOT - certificates for Trusted Root <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> Authorities</li>
				</ul>
			</remarks>
            <example>The following example demonstrates accessing a certificate and displaying info about it.
				<code lang="VB">
Private Sub DisplayCertificateInfo(ByVal certNum as Integer)
   
   ' Create a new CertificateStore to access the "MY" certificate store
   Dim store as new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStoreName.My)

   Try
      ' Get the requested certificate
      Dim cert as Certificate = store(certNum)

      ' Display info about the certificate
      Dim msg as String
      msg+= "The following information about the certificate is available." + vbCrLF + vbCrLf
      msg+= "Name: " + cert.Name + vbCrLf 
      msg+= "Description: " + cert.Description + vbCrLf
      msg+= "Expires: " + cert.ExpirationDate + vbCrLf
      msg+= "Issued: " + cert.IssueDate + vbCrLf
      msg+= "Issues to: " + cert.IssuedTo + vbCrLf
      msg+= "Serial number: " + cert.SerialNumber + vbCrLf
      msg+= "Version: " + cert.Versio
      MessageBox.Show(msg)
   Catch ex as Exception
      MessageBox.Show("Error. No certificate found at index " + certNum)
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void DisplayCertificateInfo(int certNum)
{
   // Create a new CertificateStore to access the "MY" certificate store
   CertificateStore store = new CertificateStore(CertificateStoreLocation.LocalMachine, CertificateStoreName.My);

   try
   {
      // Get the requested certificate
      Certificate cert = store[certNum];

      // Display info about the certificate
      string msg = "";
      msg+= "The following information about the certificate is available.\r\n\r\n";
      msg+= "Name: " + cert.Name + "\r\n";
      msg+= "Description: " + cert.Description + "\r\n";
      msg+= "Expires: " + cert.ExpirationDate + "\r\n";
      msg+= "Issued: " + cert.IssueDate + "\r\n";
      msg+= "Issues to: " + cert.IssuedTo + "\r\n";
      msg+= "Serial number: " + cert.SerialNumber + "\r\n";
      msg+= "Version: " + cert.Version;
      MessageBox.Show(msg);
   }
   catch(Exception ex)
   {
      MessageBox.Show("Error. No certificate found at index " + certNum);
   }
}
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.My">
            <summary>The name used for "Personal Certificates". These certificates usually include a public key (that is exported) and a private key that is used to decrypt received messages.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.CA">
            <summary>The name used for Intermediate Certification Authorities".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Root">
            <summary>The name used for "Trusted Root Certification Authorities".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Trust">
            <summary>The name used for "Enterprise Trust".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Request">
            <summary>The name for pending certificate request stores.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Acrs">
            <summary>The name for Automatic Certificate Request Service certificate stores.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Spc">
            <summary>The name for software publisher's certificate stores.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.NtAuth">
            <summary>The name for NT authentication certificate stores.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Efs">
            <summary>The name for Windows encrypting file systems certificate stores.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.AddressBook">
            <summary>The name of the certificate store holding "Other People". These certificates usually include a public key but no private key, and are used to encrypt outgoing messages.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.TrustedPeople">
            <summary>The name used for "Trusted People".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.TrustedPublisher">
            <summary>The name used for "Trusted Publishers".</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.CertificateStoreName.Disallowed">
            <summary>The name used for "Untrusted Certificates".</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.EnhancedStream">
            <summary>Adds new methods on top of the Stream interface for type conversion, stream copying, and saving.</summary><remarks>
				<p>
					Inherit from this abstract class to create a Stream class with enhanced methods. For example,
					<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.EnhancedStream~Save.html">Save</a> allows you to save Stream data directly to a file. <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.EnhancedStream~ToString.html">ToString</a>
					returns a string representation of the data contained within the Stream.
				</p>
				<p>
					All PowerTCP Stream classes (such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a>) inherit from this class
					to provide the enhanced capabilities described above to these classes.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.#ctor">
            <summary>Create a new instance of an EnhancedStream type.</summary><remarks><p>This constructor creates the Stream with the default character set.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.#ctor(System.Text.Encoding)">
            <summary>Create a new instance of an EnhancedStream type.</summary><remarks><p>This constructor creates the stream and sets the encoding type to the type specified by <i>encoding</i>.</p>
			</remarks><param name="encoding">The encoding type to use.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Dispose">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Flush">
            <summary>
            Default implementation is no-op. May be overridden by derived classes
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Read(System.Byte[])">
            <summary>
				Reads at least one byte of data from the Stream and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the Stream is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><remarks>
				<p>This is a convenience method for all derived classes, calling Read(buffer,0, buffer.Length) on the stream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current Stream to the specified value. Always throws a NotSupportedException.
			</summary><param name="offset">The new position within the stream</param><param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current Stream to the specified value. Always throws a NotSupportedException.
			</summary><param name="value">The value at which to set the length.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Write(System.Byte[])">
            <summary>
				Writes a sequence of bytes to the Stream and returns when the operation is complete.
			</summary><param name="buffer">The source location of the data to write.</param><exception cref="T:System.IO.IOException">Thrown when the Stream is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method is a convenience overload for all derived classes by writing the entire <b>buffer</b> to the Stream. This method calls Write(buffer, 0, buffer.length).</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.WriteTo(System.IO.Stream)">
            <summary>Writes all of the data contained in this Stream to a destination Stream.</summary><remarks>
				<p>This method essentially "copies" one stream to another by setting the <i>destination</i> Stream position to zero, 
				writing all of the data in the source Stream to the <i>destination</i>, resetting the source Stream back to 
				its original position, and resetting the <i>destination</i> to a position of zero.</p>
			</remarks><param name="destination">The destination stream.</param><exception cref="T:System.NullReferenceException"><i>destination</i> is null.</exception><exception cref="T:System.IO.IOException">Stream is not readable or writeable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.WriteTo(System.IO.Stream,System.Boolean)">
            <summary>Writes all of the data contained in this Stream to a destination Stream.</summary><remarks>
				<p>If <i>resetPositions</i> is true, this method essentially "copies" one stream to another by setting the <i>destination</i> Stream position to zero, 
				writing all of the data in the source Stream to the <i>destination</i>, resetting the source Stream back to 
				its original position, and resetting the <i>destination</i> to a position of zero.</p>
				<p>If <i>resetPositions</i> is false, it copies from the current location of the source Stream to the current location of <i>destination</i>, and positions are not set.</p>
			</remarks><param name="destination">The destination stream.</param><param name="resetPosition">Controls whether or not the positions of the source and destination streams are reset during the "copy" process.</param><exception cref="T:System.NullReferenceException"><i>destination</i> is null.</exception><exception cref="T:System.IO.IOException">Stream is not readable or writeable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Save(System.String)">
            <summary>Saves the data in the stream to the file specified by <i>fileName</i>.</summary><remarks>
				<p>This method saves all of the data in the stream to the file specified by <i>fileName</i>.
					This method will always create a new file, creating a unique filename if
					the file already exists.
				</p>
			</remarks><returns>A string containing the name of the file the data was written to.</returns><param name="fileName">The desired name of the destination file.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.Save(System.String,System.Boolean)">
            <summary>Saves the data in the stream to the file specified by <i>fileName</i>.</summary><remarks>
				<p>This method saves all of the data in the stream to the file specified by <i>fileName</i>.
					If <i>overwrite</i> is true, this method will create 
					a new file if the specified file does not exist and will overwrite the specified file if it does exist. 
					If <i>overwrite</i> is false, this method will always create a new file, creating a unique filename if
					the file already exists.
				</p>
			</remarks><returns>A string containing the name of the file the data was written to.</returns><param name="fileName">The desired name of the destination file.</param><param name="overwrite">Controls whether or not to overwrite existing files.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.ToArray">
            <summary>Returns the byte array representation of the Stream data.</summary><remarks>
				<p>Use this method to easily return the data in the stream as a byte array.
				Position should be reset after calling this method.</p>
			</remarks><returns>	
				The byte array representation of the Stream data.
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.EnhancedStream.ToString">
            <summary>Returns the string representation of the Stream data.</summary><remarks>
				<p>This method returns the string representation the data contained in
				the stream, based on the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.EnhancedStream~Charset.html">Charset</a>.</p>
			</remarks><returns>
				The string representation of the Stream data.
			</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.CanRead">
            <summary>
				Gets a value indicating whether the current stream supports reading.
			</summary><remarks>
				This property returns true unless overridden in a derived class.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.CanSeek">
            <summary>
				Gets a value indicating whether the current stream supports seeking.
			</summary><remarks>
				This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.CanWrite">
            <summary>
				Gets a value indicating whether the current stream supports writing.
			</summary><remarks>
				This property returns true unless overridden in a derived class.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while Latin-1 is "ISO-8859-1". "UTF-8" will always encode unicode strings, but not all mail readers support decoding this character set.
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the message.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.Encoding">
            <summary>Gets or sets the type of encoding to use.</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.Length">
            <summary>
            The length of data available on the stream. This method always throws a NotSupportedException.
            </summary>
            <exception cref="M:System.NotSupportedException.#ctor">Always throws this exception.</exception>
            <returns>A long value representing the length of the stream in bytes.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.EnhancedStream.Position">
            <summary>
            Gets or sets the position in the stream.
            This method always throws a NotSupportedException.
            </summary>
            <exception cref="M:System.NotSupportedException.#ctor">Always throws this exception.</exception>
            <returns>The current position within the stream.</returns>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Compression">
            <summary>
				Enumerates the compression options for file transfers and listings.
			</summary><remarks>
				<p>Some servers support 'MODE Z' zlib compression. This enumeration is used to indicate how compression should be used.</p>
			</remarks>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Compression.None">
            <summary>
				No compression/decompression is used. 'MODE S' is the transfer mode used and no compression/decompression takes place.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Compression.Archive">
            <summary>
				Local compression/decompression is used, but the server is not instructed to compress/decompress. 'MODE S' is the transfer mode used and files are stored in a compressed state.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Compression.Full">
            <summary>
				Local and server compression/decompression is used. 'MODE Z' is the transfer mode used and files on the server are not compressed.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpProxyType">
            <summary>
				Enumerates the supported proxy types for FTP.
			</summary><remarks>
				<p>This enumeration is used by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Proxy.html">Proxy</a> property. Set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy~Type.html">Type</a> property to the proper <b>FtpProxyType</b> of your proxy server before calling any method that requires communication with the server.</p>
				<p>For more information on using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component with proxies, see the topic <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> Support Overview.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.None">
            <summary>
				No proxy server is used.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.Socks4">
            <summary>
				SOCKS v4 proxy.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.Socks5">
            <summary>
				SOCKS v5 proxy.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.Site">
            <summary>
				SITE proxy sends a SITE command to connect to the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.User">
            <summary>
				USER proxy sends a USER command to connect to the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.Open">
            <summary>
				OPEN proxy sends an OPEN command to connect to the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.Pipe">
            <summary>
				PIPE proxy is pre-configured to connect to the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpProxyType.HttpConnect">
            <summary>
				HttpConnect proxy sends a CONNECT command to an HTTP proxy to connect to the FTP server.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ListingFormat">
            <summary>
				Enumerates the perceived format of the listing.
			</summary><remarks>
				<p>This enumeration is used by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> property.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component will automatically attempt to detect the format (UNIX or DOS) of the listing and display the appropriate type in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> property. If the listing type is unable to be discerned, this property will be Unknown.
				If the <b>ListingFormat</b> used is unknown, you can still access the raw listing through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~ToString.html">ToString</a> method (for the entire listing) or the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Text.html">Text</a> property (for the raw text of a single ListEntry), and parse it yourself.
				</p>
			</remarks>
            <example>The following example demonstrates parsing a listing. This example demonstrates checking the format, and parsing if unknown.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Check to see if the server returned an Unknown listing 
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.Unknown Then

   ' In this example, the server is returning a proprietary listing which looks like:
   '            myfile.txt     158     01-11-02     11:55

   ' Create a pattern to use as a RegularExpression which matches the above listing format
   Dim pattern As String
   pattern = "(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)"

   ' Create new Regex object
   Dim regex As New System.Text.RegularExpressions.Regex(pattern)

   ' Iterate through ListEntries
   Dim l As Dart.PowerTCP.Ftp.ListEntry
   For Each l In list

      ' Get raw listing
      Dim raw As String = l.Text

      ' Attempt to match regular expression
      Dim match As System.Text.RegularExpressions.Match
      match = regex.Match(raw)

      ' Extract groupnames from Groups collection
      Dim filename As String = match.Groups["filename"].Value
      Dim filesize As String = match.Groups["filesize"].Value
      Dim filedate As String = match.Groups["filedate"].Value
      Dim filetime As String = match.Groups["filetime"].Value

      ' Display result
      Debug.WriteLine("Filename: " + filename)
      Debug.WriteLine("Filesize: " + filesize)
      Debug.WriteLine("Filedate: " + filedate)
      Debug.WriteLine("Filetime: " + filetime)
   Next
   
   'Close the connection
   Ftp1.Close()
End If        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// In this example, the server is returning a proprietary listing which looks like:
//            myfile.txt     158     01-11-02     11:55

// Create a pattern to use as a RegularExpression which matches the above listing format
string ppattern = @"(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Check to see if the server returned an Unknown listing format
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.Unknown)
{
    // Create new Regex object
    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern);

    // Iterate through ListEntries
    foreach(Dart.PowerTCP.Ftp.ListEntry l in list)
    {
        // Get raw listing
        string raw = l.Text;

        // Attempt to match regular expression
        System.Text.RegularExpressions.Match match = regex.Match(raw);
        
        // Extract groupnames from Groups collection
        string filename = match.Groups["filename"].Value;
        string filesize = match.Groups["filesize"].Value;
        string filedate = match.Groups["filedate"].Value;
        string filetime = match.Groups["filetime"].Value;

        // Display result
        Debug.WriteLine("Filename: " + filename);
        Debug.WriteLine("Filesize: " + filesize);
        Debug.WriteLine("Filedate: " + filedate);
        Debug.WriteLine("Filetime: " + filetime);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ListingFormat.UNIX">
            <summary>
			The perceived listing format is UNIX. UNIX is used by most UNIX-based operating systems.
		</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ListingFormat.DOS">
            <summary>
			The perceived listing format is DOS. Microsoft's server can be configured to provide a DOS-formatted listing.
		</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ListingFormat.Unknown">
            <summary>
			<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> format is unable to be determined. If the listing format cannot be determined, you can parse it by using the Listing.Text property.
		</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.EntryType">
            <summary>
				Enumerates whether the entry indicates a <ign>File</ign>, Directory, or is Unknown (if <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is Unknown).
			</summary><remarks>
				<p>This enumeration is used by the Type property in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> class. It is useful in detecting whether a list entry is a file or a directory. For example, perhaps you are retrieving a listing and wish to populate a ListBox, displaying a folder icon by the entry if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> represents a Directory and a file icon by the entry if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> represents a file. You can simply iterate through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> collection, check this property, and set the proper icon.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.EntryType.File">
            <summary>
				Indicates the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Name.html">Name</a> contains a filename.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.EntryType.Directory">
            <summary>
				Indicates the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Name.html">Name</a> contains a directory name.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.EntryType.Link">
            <summary>
				Indicates the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> contains a link.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.EntryType.Unknown">
            <summary>
				Indicates the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> could not be parsed.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.StoreType">
            <summary>
				Enumerates how a stored file should be treated if a file exists with the same name.
			</summary><remarks>
				<p>This enumeration is used by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~StoreType.html">StoreType</a> property, specifying what happens when files are put to the server that have an existing file with the same name. Use StoreType.Replace to overwrite an existing file with the same name, StoreType.Append to add the new file to the end of the existing file, and StoreType.Unique to store the file with a unique name. The unique name will be returned in the response.</p>
			</remarks>
            <example>The following example demonstrates file synchronization between a local root and a remote root. First, filenames from both the local root and remote root are retrieved using Ftp.ExpandLocalFiles and Ftp.ExpandRemoteFiles. Then extraneous files are deleted from the server. Then Ftp.StoreType is set to Replace to assure that the files on the client will replace those on the server. Finally all files on the local root are put to the server.
				<code lang="VB">
Private Sub SynchronizeFiles(ByVal LocalRoot As String, ByVal RemoteRoot As String)

' This sub demonstrates synchronization of files between a local root
' and a root on the FTP server, to get all files on the FTP Server to
' be the same as on the local root

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get listing of local files
Dim lFiles() As String
lFiles = Ftp1.ExpandLocalFiles(LocalRoot + "*", False)

' Get a listing of remote files
Dim rFiles() As String
rFiles = Ftp1.ExpandRemoteFiles(RemoteRoot + "*", False)

Dim found As Boolean
Dim i As Integer

' Iterate though list of files on the server and compare to local files.
' If it does not exist locally, delete it
For i = 0 To rFiles.Length - 1

   found = False
   Dim j As Integer

   For j = 0 To lFiles.Length - 1

      ' Create FileInfo objects to parse filename
      Dim rFileInfo As New System.IO.FileInfo(rFiles(i))
      Dim lFileInfo As New System.IO.FileInfo(lFiles(i))

      ' Compare file names
      If (rFileInfo.Name = lFileInfo.Name) Then
         found = True
         Exit For
      End If
   Next

   If Not found Then
      Debug.WriteLine("Deleting " + rFiles(i) + " from server")
      Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rFiles(i))
   End If
Next

' Now MPUT all files in LocalRoot and both directories are synched

' First, make sure old files are replaced
Ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace

' Then MPUT
Debug.WriteLine("Uploading all files")
Ftp1.Put(LocalRoot, "*", RemoteRoot, False)
Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched")

' Close the connection
Ftp1.Close()

End Sub  
				</code>      
				<code lang="C#">
private void SynchronizeFiles(string LocalRoot, string RemoteRoot)
{
    // This sub demonstrates synchronization of files between a local root
    // and a root on the FTP server, to get all files on the FTP Server to
    // be the same as on the local root

    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Get list of local files
    string[] lfiles = ftp1.ExpandLocalFiles(LocalRoot + "*", false);
    
    // Get list of remote files
    string[] rfiles = ftp1.ExpandRemoteFiles(RemoteRoot + "*", false);

    bool found;

    // Iterate though list of files on the server and compare to local files.
    // If it does not exist locally, delete it
    for(int i = 0; i &lt; lfiles.Length; i++)
    {
        found = false;
        for(int j = 0; j &lt; lfiles.Length; j++)
        {
            // Compare filenames
            if(new System.IO.FileInfo(rfiles[i]).Name == new System.IO.FileInfo(lfiles[j]).Name)
            {
                found = true;
                break;
            }
        }

        if(!found) // Delete the file from the server.
        {
            Debug.WriteLine("Deleting " + rfiles[i] + " from server");
            ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rfiles[i]);
        }
    }
    
    // Now just MPUT all files in the local root and everything is synched.

    // First, make sure old files are replaced
    ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace;

    // Then MPUT
    Debug.WriteLine("Uploading all files");
    ftp1.Put(LocalRoot, "*", RemoteRoot, false);
    Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched.");

    // Close connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.StoreType.Replace">
            <summary>
				Over-write any existing file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.StoreType.Unique">
            <summary>
				If an existing file is present, store the file using a unique name.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.StoreType.Append">
            <summary>
				If an existing file is present, append the stored file to it.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FileType">
            <summary>
				Enumerates the type of file (ASCII, Image, or Ebcdic).
			</summary><remarks>
				<p>This enumeration is used by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~FileType.html">FileType</a> property.</p>
				<p>When set to FileType.Ascii, a CR/LF pair should be put at the end of every line in the file before sending it. Since the Windows operating system already uses a CR/LF pair as the native line separator, there is no need to modify the stream as it is received or sent. Another operating system that uses a single CR as the native line separator, however, must expand the size of most files it sends, and shrink the size of most files it receives (to change the line separator to/from a CR/LF pair).</p>
				<p>When set to Image, the line separator remains unmodified, making this property setting necessary for sending and receiving binary files (that may contain line separators).</p>
			</remarks>
            <example>The following example demonstrates checking to see the type of file (by looking at the bytes) and setting the FileType accordingly.
				<code lang="VB">
' This method demonstrates checking the bytes of a file to determine if
' it is binary or ASCII, then FTPing accordingly

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FilePath As String = "C:\FtpTest\log.txt"

' Create new filestream
Dim fstream As New System.IO.FileStream(FilePath, IO.FileMode.Open)

' Create new byte array to hold the FileStream's data
Dim data(fstream.Length) As Byte

' Read data from the file into the buffer.
fstream.Read(data, 0, fstream.Length)
fstream.Close()

Dim binary As Boolean = False

' Iterate through the bytes, checking to see if any are above 128. If so it is
' binary. (This is not a 100% accurate way of checking a file because the file
' may be a binary file whose bytes all happen to be below 128.)

Dim i As Integer
For i = 0 To data.Length - 1
   If data(i) &gt; 128 Then
      binary = True
   End If
Next

' Set the file type
If binary Then
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
Else
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Ascii
End If

' Put the file (The FileInfo object parses the name from the path)
Ftp1.Put(FilePath, New System.IO.FileInfo(FilePath).Name)
        
				</code>
				<code lang="C#">
// This method demonstrates checking the bytes of a file to determine if
// it is binary or ASCII, then FTPing accordingly

// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FilePath = "C:\\Files\\binaryfile.exe";

// Create new filestream
System.IO.FileStream fstream = new System.IO.FileStream(FilePath, System.IO.FileMode.Open);

// Create new byte array to hold the FileStream's data
byte[] data = new byte[fstream.Length];

// Read data from the file into the buffer.
fstream.Read(data, 0, (int)fstream.Length);
fstream.Close();

bool binary = false;

// Iterate through the bytes, checking to see if any are above 128. If so it is
// binary. (This is not a 100% accurate way of checking a file because the file
// may be a binary file whose bytes all happen to be below 128.)
for(int i = 0; i &lt; data.Length; i++)
    if(data[i] &gt; 128)
        binary = true;

// Set the file type
if(binary)
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;
else
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Ascii;

// Put the file (The FileInfo object parses the name from the path)
ftp1.Put(FilePath,  new System.IO.FileInfo(FilePath).Name);
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FileType.Image">
            <summary>
				Transfer the file as a binary image.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FileType.Ascii">
            <summary>
				Convert between local EOL indications and network CR/LF during transmission.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FileType.Ebcdic">
            <summary>
				Send/receive EBCDIC 8-bit characters.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpCommand">
            <summary>
				Enumerates commands that can be sent using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a>.
			</summary><remarks>
				<p>Use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> to send commands. Use FtpCommand.Null to send your own command.</p>
			</remarks>
            <example>The following example demonstrates using Invoke to send a command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.Ftp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Account">
            <summary>
				<ign>Send</ign> "ACCT" to provide authentication information.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.ChangeDir">
            <summary>
				<ign>Send</ign> "CWD &lt;pathname&gt;" to change the default working directory.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp">
            <summary>
				<ign>Send</ign> "CDUP" to move the default working directory up one level.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Delete">
            <summary>
				<ign>Send</ign> "DELE &lt;filename&gt;" to delete a file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Help">
            <summary>
				<ign>Send</ign> "HELP" to get help info.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.MakeDir">
            <summary>
				<ign>Send</ign> "MKD &lt;pathname&gt;" to make a directory.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.NoOp">
            <summary>
				<ign>Send</ign> "NOOP" to test the connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Null">
            <summary>
				<ign>Send</ign> the modifier parameter only, so you can send your own command.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Password">
            <summary>
				<ign>Send</ign> "PASS" to provide authentication information.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.PrintDir">
            <summary>
				<ign>Send</ign> "PWD" to discover the current working directory.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Quit">
            <summary>
				<ign>Send</ign> "QUIT" to terminate the connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Reinitialize">
            <summary>
				<ign>Send</ign> "REIN" to reinitialize the session and login.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.RemoveDir">
            <summary>
				<ign>Send</ign> "RMD &lt;pathname&gt;" to remove a directory.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.RenameFrom">
            <summary>
				<ign>Send</ign> "RNFR &lt;pathname&gt;" to specify what file to rename.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.RenameTo">
            <summary>
				<ign>Send</ign> "RNTO &lt;pathname&gt;" to specify the new name of the file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Restart">
            <summary>
				<ign>Send</ign> "REST &lt;byteOffset&gt;" to specify starting location in the remote file.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.SiteParameters">
            <summary>
				<ign>Send</ign> "SITE" to access special services
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Size">
            <summary>
				<ign>Send</ign> "SIZE &lt;filename&gt;" to get the size of a file
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Status">
            <summary>
				<ign>Send</ign> "STAT" to get status information.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Structure">
            <summary>
				<ign>Send</ign> "STRU &lt;F|R|P&gt;" to perform special-case record and page structure manipulation.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.StructureMount">
            <summary>
				<ign>Send</ign> "SMNT &lt;structure&gt;" to mount a different file system data structure without logging out
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.System">
            <summary>
				<ign>Send</ign> "SYST" to get system information.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpCommand.Username">
            <summary>
				<ign>Send</ign> "USER" to provide authentication information.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FileEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> operation completes.
			</summary><param name="sender">The source of the event.</param><param name="e">A FileEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> method, the class that holds the event data is the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> class. A method must be created with the same signature as the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself. In this example that would mean a method would have to be defined to accept two arguments (an object and a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a>) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).
				</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>The following example demonstrates how to assign an event handler to an event.
				<code lang="VB"> 
' *** EndPut Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Ftp1.EndPut, New Dart.PowerTCP.Ftp.FileEventHandler(AddressOf Ftp1_EndPut)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut        
				</code>
				<code lang="C#">
// EndPut event
this.ftp1.EndPut += new Dart.PowerTCP.Ftp.FileEventHandler(this.ftp1_EndPut);         
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpFileStatus">
            <summary>
				Used to report status of a file transfer or deletion.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.TransferInProgress">
            <summary>
				FTP file transfer is in progress.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.TransferCompleted">
            <summary>
				FTP file transfer has completed successfully.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.TransferFailed">
            <summary>
				FTP file transfer failed (check for a reported exception).
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.TransferAborted">
            <summary>
				FTP file transfer has been aborted by the user.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.DeleteCompleted">
            <summary>
				File has been deleted from the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.DeleteFailed">
            <summary>
				File could not be deleted or removed from the FTP server.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.DeleteAborted">
            <summary>
				Delete process has been aborted by the user.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.FtpFileStatus.Cancelled">
            <summary>
				User cancelled the transfer from within the PreviewPut or PreviewGet events.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpFile">
            <summary>
				Presents the results from an FTP file transfer.
			</summary><remarks>
				<p>When any file transfer method is called (i.e. <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) an <b>FtpFile</b> object (or an array of <b>FtpFile</b> objects) is returned. When using synchronous methods such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> this object is returned directly from the method. When using asynchronous methods such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> this object is passed into the event handler as part of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> class.</p>
				<p>The <b>FtpFile</b> object encapsulates data about the file transfer on both the local and remote machines such as local file name, remote file name, file length, and bytes transferred.</p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.Position">
            <summary>
				Gets the position within the stream/file. 
			</summary><value>A long representing the current position within the stream/file.</value><remarks>
				<p><b>FtpFile.Position</b> equals <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a> when the transfer completes normally, but is less than <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a> if <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> is used to abort the transfer.
				If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> is used to abort a multiple-file transfer, or an Exception is encountered, a -1 value indicates the file transfer never started.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.Exception">
            <summary>
				Contains any exception (if any) which occurred during the file transfer
			</summary><value>If any exception occurred during the file transfer, this property will contain an Exception object describing the exception.</value><remarks>
				<p>Check this property for a non-null value to tell if an exception occurred during the transfer. If this property is null, no exception occurred.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.LocalFileName">
            <summary>
				After any file transfer method (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) has completed, this property gets the pathname of the local file transferred.
			</summary><value>
			A string representing the local pathname of the transferred file.
			</value><remarks>
				<p>When transferring files, this will property contain the pathname of the local file. When transferring streams (either storing streams to the server or retrieving files from the server as streams) this property will be null as the file only exists in memory.</p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.RemoteFileName">
            <summary>
			After any file transfer method (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) has completed, this property gets the pathname of the remote file transferred.
			</summary><value>
			A string representing the pathname of the transferred file on the remote machine.
			</value><remarks>
				<p>When transferring files or streams, this property will contain the pathname of the file on the server. </p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.Length">
            <summary>
			After any file transfer method (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) has completed, this property gets the length of the file.
			</summary><value>
			A long representing the length of the file.
			</value><remarks>
				<p>When transferring files, this number represents the length of the file. When transferring streams, this number will be the length of the stream (equal to Stream.Length).</p>
				<p>This data is also accessible via the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event, when file transfer is completed.</p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.Count">
            <summary>
			After any file transfer method (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) has completed, this property gets the byte count transferred. 
			</summary><value>
			A long representing the byte count transferred
			</value><remarks>
				<p>This property represents the number of bytes transferred. This value may be less than <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a> for transfers that have been restarted.</p>
				<p>This data is also accessible via the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event, when file transfer is completed.</p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpFile.Status">
            <summary>
			Status of the file (or directory) referenced by RemoteFileName.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FileEventArgs">
            <summary>
				This class is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> events and provides data for these events.
			</summary><remarks>
				<p>A <b>FileEventArgs</b> object is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> events after asynchronous file transfer has taken place, containing
				data about the transfer. This data will vary depending on what type of file transfer operation has taken place. For example, if <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> was used to store multiple files (MPUT),
				the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Files.html">Files</a> array will be filled with data about the transfer for each file transferred. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Stream.html">Stream</a> property will be null however, as this operation
				did not involve a stream. Another example would be in the case of storing a stream from memory as a file on the server. In this instance FileEventArgs.File.RemoteFileName would contain
				the filename of the file created on the server. FileEventArgs.File.LocalFileName would be null, however, as the "file" only existed in memory on the local machine.</p>
				<p>If any error occurred during the asynchronous method call, it would be returned in the handling event. To trap the error, check the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Exception.html">Exception</a> property.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous file transfer, see either of the topics Storing Files Asynchronously Overview (Advanced Users) or Retrieving Files Asynchronously Overview (Advanced Users).</p>
			</remarks>
            <example>The following example demonstrates how to asynchronously retrieve a single file.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "test.txt"

' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet(FileToGet, "RetrievedFile.txt", Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet)

' When the BeginGet operation has completed, the EndGet Event will fire.

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

    ' If an error occurred, it would be returned in the event. Be sure to check for it.
    If e.Exception Is Nothing Then
       Debug.WriteLine("Get completed for file " + file.RemoteFileName)
    Else
       Debug.WriteLine("Error: " + e.Exception.ToString())
    End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "test.txt";

// Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
ftp1.BeginGet(FileToGet, Application.StartupPath + "\\" + new System.IO.FileInfo(FileToGet).Name, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet);

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FileEventArgs.Files">
            <summary>
				Gets the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> array that represents a completed file transfer.
			</summary><value>
				FtpFile objects describing the file transfer on both the local and remote machines.
			</value><remarks>
				<p>When <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> has been called to transfer one file, multiple files, or streams, the <b>Files</b> array will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object containing data about each file transferred. Iterate through this collection to retrieve data about each file transferred. For example, the amount of bytes transferred is accessible through FtpFiles[i].Count, the file's local file name is accessible through FtpFiles[i].LocalFileName, and the file's name on the server is accessible through FtpFiles[i].RemoteFileName.</p>
			</remarks>
            <example>The following example demonstrates how to asynchronously retrieve multiple files.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet("mydir", "*", Application.StartupPath + "/", false, Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving all files in mydir")

' When the BeginGet operation has completed, the EndGet Event will fire. 

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet
   
   ' If an error occurred, it would be returned in the event. Be sure to =check for it.
   If e.Exception Is Nothing Then
   
       Dim file As Dart.PowerTCP.Ftp.FtpFile
       
      ' Iterate through files collection and display info. This will contain a File object
      ' for each file retrieved. 
      For Each file In e.Files
         Debug.WriteLine("Get completed for " + file.RemoteFileName)
      Next
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
End Sub
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Call BeginGet for all files in the directory "mydir", this will begin an asynchronous MGet. Upon completion
// the EndGet Event will be fired.
ftp1.BeginGet("mydir", "*", Application.StartupPath + "//", false, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving all files in mydir");

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it
    if(e.Exception == null)
    {
        // Iterate through files collection and display info. This will contain a File object
        // for each file retrieved.
        foreach(Dart.PowerTCP.Ftp.FtpFile file in e.Files)
            Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.ToString());
    }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FileEventArgs.File">
            <summary>
				Gets the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> that represents a completed file transfer.
			</summary><value>
				An FtpFile object describing the file transfer on both the local and remote machines.
			</value><remarks>
				<p>When <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> has been called to transfer one file, multiple files, or streams,  the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object will contain data about the file transferred. For example, the amount of bytes transferred is accessible through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Count.html">Count</a>, the file's local file name is accessible through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~LocalFileName.html">LocalFileName</a>, and the file's name on the server is accessible through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~RemoteFileName.html">RemoteFileName</a>. </p>
			</remarks>
            <example>The following example demonstrates how to asynchronously retrieve a single file.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "test.txt"

' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet(FileToGet, "RetrievedFile.txt", Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet)

' When the BeginGet operation has completed, the EndGet Event will fire.

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

    ' If an error occurred, it would be returned in the event. Be sure to check for it.
    If e.Exception Is Nothing Then
       Debug.WriteLine("Get completed for file " + file.RemoteFileName)
    Else
       Debug.WriteLine("Error: " + e.Exception.ToString())
    End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "test.txt";

// Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
ftp1.BeginGet(FileToGet, Application.StartupPath + "\\" + new System.IO.FileInfo(FileToGet).Name, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet);

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FileEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
            <example>The following example demonstrates an asynchronous BeginGet for a single file, with that file being returned as a stream that can be used to read the FTP data connection in the EndGet event. In this example the user-defined method GetTextFilePreview accepts a file and the amount of characters to preview. In the EndGet event, the amount of characters to preview is read from the data connection and displayed.
				<code lang="VB">
' This user-defined method is used to generate a preview of text files residing on the FTP Server. The user enters the 
' FileName of the file on the server that they would like a preview of and the number of characters to preview. BeginGet is 
' called with the FileName and CharactersToPreview (as the object) being passed in. The EndGet event will fire when the
' stream has been opened and is ready for reading.

Private Sub GetTextPreview(ByVal FileName As String, ByVal CharactersToPreview As Long)

   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFTPServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
   ' number of characters to preview. This variable will be accessible in the EndGet Event
   
   Ftp1.BeginGet(FileName, 0, CharactersToPreview)

End Sub

' When the BeginGet operation has completed, the EndGet Event will fire. 
Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

   Debug.WriteLine("Attempting to read from data stream")

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then    
      'Retrieve the number of characters to preview from the object State.
      Dim AmountOfChars As Integer = Convert.ToInt32(e.State)
      
      ' Create a byte array the size of the amount of characters to preview.
      Dim data(AmountOfChars) As Byte
      
      ' Read the amount of characters to preview from the stream
      e.Stream.Read(data, 0, AmountOfChars)
      
      e.Stream.Close()

      ' Close the stream
      Ftp1.AbortTransfer()
    
      ' Display the preview characters
      TextBox1.Text = System.Text.Encoding.ASCII.GetString(data)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
/*
/*
This user-defined method is used to generate a preview of text files residing on the FTP Server.
The user enters the FileName of the file on the server that they would like a preview of and the
number of characters to preview. BeginGet is called with the FileName and CharactersToPreview
(as the object) being passed in. The EndGet event will fire when the stream has been opened and is
ready for reading.
*/

private void GetTextFilePreview(string FileName, long CharactersToPreview)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
    // number of characters to preview. This variable will be accessible in the EndGet Event
    ftp1.BeginGet(FileName, 0, CharactersToPreview);
}


// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
    Debug.WriteLine("Attempting to read from data stream");

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       int AmountOfChars;
    
       // Retrieve the number of characters to preview from the object State.
       AmountOfChars = Convert.ToInt32(e.State);

       // Create a byte array the size of the amount of characters to preview.
       byte[] data = new byte[AmountOfChars];

       // Read the amount of characters to preview from the stream
       e.Stream.Read(data, 0, AmountOfChars);

       // Close the stream
       ftp1.AbortTransfer();

       // Display the preview characters.
       textBox1.Text = System.Text.Encoding.ASCII.GetString(data);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
} 
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FileEventArgs.Stream">
            <summary>
				Gets the <b>FileEventArgs.Stream</b> object that was part of the associated method call.
			</summary><value>
				If Ftp.BeginGet or Ftp.BeginPut were called, passing in an already created Stream object, in the Ftp.EndGet and Ftp.EndPut event handler, the <b>FileEventArgs.Stream</b> object will contain this stream. 
				If Ftp.BeginGet or Ftp.BeginPut were called to directly read/write to a file on the server, in the Ftp.EndGet and Ftp.EndPut event handler, the <b>FileEventArgs.Stream</b> object will contain that opened stream, which can then be used to read to or write from the data connection.
			</value><remarks>
				<p>The <b>FileEventArgs.Stream</b> object is used two ways. The first is when <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> is called to retrieve a file as a stream or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> is called to store a stream as a file. In both cases, the <b>FileEventArgs.Stream</b> object will contain that completed stream.</p>
				<p>The second way to use this property is when <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> is used to read directly from the data connection or BeginPut is used to write directly to the data connection. In these cases, <b>FileEventArgs.Stream</b> will contain a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object to use to read from/write to the data connection. Simply call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~Read.html">Read</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~Write.html">Write</a> to read/write data to/from the stream. When reading is complete. the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component will close the
				stream. If you do not wish to read the entire file, call Ftp.AbortConnection to close the data connection.</p>
			</remarks>
            <example>The following example demonstrates an asynchronous BeginGet for a single file, with that file being returned as a stream that can be used to read the FTP data connection in the EndGet event. In this example the user-defined method GetTextFilePreview accepts a file and the amount of characters to preview. In the EndGet event, the amount of characters to preview is read from the data connection and displayed.
				<code lang="VB">
' This user-defined method is used to generate a preview of text files residing on the FTP Server. The user enters the 
' FileName of the file on the server that they would like a preview of and the number of characters to preview. BeginGet is 
' called with the FileName and CharactersToPreview (as the object) being passed in. The EndGet event will fire when the
' stream has been opened and is ready for reading.

Private Sub GetTextPreview(ByVal FileName As String, ByVal CharactersToPreview As Long)

   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFTPServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
   ' number of characters to preview. This variable will be accessible in the EndGet Event
   
   Ftp1.BeginGet(FileName, 0, CharactersToPreview)

End Sub

' When the BeginGet operation has completed, the EndGet Event will fire. 
Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

   Debug.WriteLine("Attempting to read from data stream")

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then    
      'Retrieve the number of characters to preview from the object State.
      Dim AmountOfChars As Integer = Convert.ToInt32(e.State)
      
      ' Create a byte array the size of the amount of characters to preview.
      Dim data(AmountOfChars) As Byte
      
      ' Read the amount of characters to preview from the stream
      e.Stream.Read(data, 0, AmountOfChars)
      
      e.Stream.Close()

      ' Close the stream
      Ftp1.AbortTransfer()
    
      ' Display the preview characters
      TextBox1.Text = System.Text.Encoding.ASCII.GetString(data)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
/*
/*
This user-defined method is used to generate a preview of text files residing on the FTP Server.
The user enters the FileName of the file on the server that they would like a preview of and the
number of characters to preview. BeginGet is called with the FileName and CharactersToPreview
(as the object) being passed in. The EndGet event will fire when the stream has been opened and is
ready for reading.
*/

private void GetTextFilePreview(string FileName, long CharactersToPreview)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
    // number of characters to preview. This variable will be accessible in the EndGet Event
    ftp1.BeginGet(FileName, 0, CharactersToPreview);
}


// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
    Debug.WriteLine("Attempting to read from data stream");

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       int AmountOfChars;
    
       // Retrieve the number of characters to preview from the object State.
       AmountOfChars = Convert.ToInt32(e.State);

       // Create a byte array the size of the amount of characters to preview.
       byte[] data = new byte[AmountOfChars];

       // Read the amount of characters to preview from the stream
       e.Stream.Read(data, 0, AmountOfChars);

       // Close the stream
       ftp1.AbortTransfer();

       // Display the preview characters.
       textBox1.Text = System.Text.Encoding.ASCII.GetString(data);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
} 
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FileEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a> may be thrown. You could check this property to see if it was of type <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a>, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>The following example demonstrates an asynchronous BeginGet for a single file, with that file being returned as a stream that can be used to read the FTP data connection in the EndGet event. In this example the user-defined method GetTextFilePreview accepts a file and the amount of characters to preview. In the EndGet event, the amount of characters to preview is read from the data connection and displayed.
				<code lang="VB">
' This user-defined method is used to generate a preview of text files residing on the FTP Server. The user enters the 
' FileName of the file on the server that they would like a preview of and the number of characters to preview. BeginGet is 
' called with the FileName and CharactersToPreview (as the object) being passed in. The EndGet event will fire when the
' stream has been opened and is ready for reading.

Private Sub GetTextPreview(ByVal FileName As String, ByVal CharactersToPreview As Long)

   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFTPServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
   ' number of characters to preview. This variable will be accessible in the EndGet Event
   
   Ftp1.BeginGet(FileName, 0, CharactersToPreview)

End Sub

' When the BeginGet operation has completed, the EndGet Event will fire. 
Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

   Debug.WriteLine("Attempting to read from data stream")

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then    
      'Retrieve the number of characters to preview from the object State.
      Dim AmountOfChars As Integer = Convert.ToInt32(e.State)
      
      ' Create a byte array the size of the amount of characters to preview.
      Dim data(AmountOfChars) As Byte
      
      ' Read the amount of characters to preview from the stream
      e.Stream.Read(data, 0, AmountOfChars)
      
      e.Stream.Close()

      ' Close the stream
      Ftp1.AbortTransfer()
    
      ' Display the preview characters
      TextBox1.Text = System.Text.Encoding.ASCII.GetString(data)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
/*
/*
This user-defined method is used to generate a preview of text files residing on the FTP Server.
The user enters the FileName of the file on the server that they would like a preview of and the
number of characters to preview. BeginGet is called with the FileName and CharactersToPreview
(as the object) being passed in. The EndGet event will fire when the stream has been opened and is
ready for reading.
*/

private void GetTextFilePreview(string FileName, long CharactersToPreview)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
    // number of characters to preview. This variable will be accessible in the EndGet Event
    ftp1.BeginGet(FileName, 0, CharactersToPreview);
}


// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
    Debug.WriteLine("Attempting to read from data stream");

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       int AmountOfChars;
    
       // Retrieve the number of characters to preview from the object State.
       AmountOfChars = Convert.ToInt32(e.State);

       // Create a byte array the size of the amount of characters to preview.
       byte[] data = new byte[AmountOfChars];

       // Read the amount of characters to preview from the stream
       e.Stream.Read(data, 0, AmountOfChars);

       // Close the stream
       ftp1.AbortTransfer();

       // Display the preview characters.
       textBox1.Text = System.Text.Encoding.ASCII.GetString(data);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
} 
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpProgressEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when file transfer information is available.
			</summary><param name="sender">The source of the event.</param><param name="e">An FtpProgressEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul type="disc">
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When capturing file transfer information is desired, the class that holds the event data is the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProgressEventArgs.html">FtpProgressEventArgs</a> class. A method must be created with the same signature as the delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself.
				In this example that would mean a method would have to be defined to accept two arguments (an object and an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProgressEventArgs.html">FtpProgressEventArgs</a>) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).
				</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>The following example demonstrates how to assign an event handler to an event.
				<code lang="VB"> 
' *** Progress Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Ftp1.Progress, New Dart.PowerTCP.Ftp.ProgressEventHandler(AddressOf Ftp1_Progress)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress        
				</code>
				<code lang="C#">
// Progress event
this.ftp1.Progress += new Dart.PowerTCP.Ftp.ProgressEventHandler(this.ftp1_Progress);         
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpProgressEventArgs">
            <summary>
				This class is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event and provides data for that event.
			</summary><remarks>
				<p>When any file transfer method is called (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event will be raised in the frequency specified by <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BlockSize.html">BlockSize</a>. An <b>FtpProgressEventArgs</b> object is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event containing information about the current file transfer.</p>
				<p>This class is useful for displaying information to the user about the current file transfer. For example, the current file being transferred is accessible through FtpProgressEventArgs.Filename. To get the amount of bytes that have been transferred check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProgressEventArgs~Count.html">Count</a>. To display progress using a ProgressBar, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProgressEventArgs~Length.html">Length</a> as ProgressBar.Max and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProgressEventArgs~Position.html">Position</a> as ProgressBar.Value.</p>
				<p>If any error occurred during the asynchronous method call, it would be returned in the handling event. To trap the error, simply put a try/catch block around any access of the parameter e.</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.CurrentFile">
            <summary>
				Index of file being transferred.
			</summary><value>
				A long representing the index of the current file being transferred.
			</value><remarks>
				<p>If transferring multiple files, this property will contain the index of the
				currently transferring file. If transferring a single file, this property will
				always be 1.</p>
				<p>This property is useful for displaying multiple file transfer progress to the user.
				For example, the application could have two ProgressBar objects, one to track the file transfer
				progress of individual files, one to track the progress of all files (for an MPUT or MGET).</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.TransferRate">
            <summary>
				Gets the current transfer rate in bytes per second.
			</summary><value>A long representing the file transfer rate.</value><remarks>
				<p>The transfer rate can be controlled with the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~MaxTransferRate.html">MaxTransferRate</a> property.  The value represents the rate seen between calls made to the Progress event. By default operation, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component will use all available bandwidth.</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.TotalFiles">
            <summary>
				Total number of files being transferred.
			</summary><value>
				A long representing the total number of files being transferred.
			</value><remarks>
				<p>If transferring multiple files, this property will contain the total number of all files
				being transferred. If transferring a single file, this property will
				always be 1.</p>
				<p>This property is useful for displaying multiple file transfer progress to the user.
				For example, the application could have two ProgressBar objects, one to track the file transfer
				progress of individual files, one to track the progress of all files transferred (for an MPUT or MGET).</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.FileName">
            <summary>
				Gets the pathname of the file transferred.
			</summary><value>A string representing the path and name of the file being transferred.</value><remarks>
				<p>When storing or retrieving files or streams, this property will contain the name of the file on the server. When storing multiple files, this property will contain the pathname of the file being transferred.</p>
				<p>The <b>FtpProgressEventArgs.FileName</b> property is useful for displaying to the user the file being transferred. It is also useful if you wish to take some action (for example, make a log entry) based on whether a particular file was downloaded.</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.Position">
            <summary>
				The position within the stream.
			</summary><remarks>
				<p>This value represents the position within the Stream of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as <b>Object.Position</b>
				divided by Object.Length gives the percentage complete.</p>
				<p><b>Object.Position</b> will equal Object.Length
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the current position within the stream.
			</value>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.Length">
            <summary>
				The length of the stream.
			</summary><remarks>
				<p>This value represents the number in bytes of the length of the Stream of the message
				being retrieved at the time the Object.Progress event was raised. This is 
				useful for displaying progress as Object.Position
				divided by <b>Object.Length</b> gives the percentage complete.</p>
				<p>Object.Position will equal <b>Object.Length</b>
				when all data has been transferred.</p>
			</remarks><value>
				A long representing the number in bytes of the length of the stream.
			</value>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.Count">
            <summary>
				Gets the byte count transferred. 
			</summary><value>
				A long representing the number of bytes transferred.
			</value><remarks>
				<p>This property returns the current number of bytes transferred. The final <b>FtpFileEventArgs.Count</b> may be less than FtpFileEventArgs.Position for transfers that have been restarted.</p>
				<p>This property is useful for transfers involving multiple files in displaying a total byte transfer for ALL files.</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProgressEventArgs.Status">
            <summary>
				Status of the file (or directory) referenced by FileName.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.PreviewEventHandler">
            <summary>
				Represents the method (event handler) that will be raised to preview the next file transfer.
			</summary><param name="sender">The source of the event.</param><param name="e">A PreviewEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed:</p>
				<ul type="disc">
					<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
					<li>A delegate that points to a method that provides the response to the event.</li>
				</ul>
				<p>When capturing file transfer preview information is desired, the class that holds the event data is the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PreviewEventArgs.html">PreviewEventArgs</a> class. A method must be created with the same signature as the delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself.
				In this example that would mean a method would have to be defined to accept two arguments (an object and a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PreviewEventArgs.html">PreviewEventArgs</a>) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).
				</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.PreviewEventArgs">
            <summary>
				This class is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Preview_EV.html">Preview</a> event and provides data for that event.
			</summary><remarks>
				<p>When a file transfer method is called (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>) the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Preview_EV.html">Preview</a> event will be raised announcing each pending transfer. A <b>PreviewEventArgs</b> object is passed in containing information about the pending file transfer.</p>
				<p>This class is useful for cancelling undesired file transfers.</p>
				<p>If any error occurred during the asynchronous method call, it would be returned in the handling event. To trap the error, simply put a try/catch block around any access of the parameter e.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PreviewEventArgs.CurrentFile">
            <summary>
				Index of file being transferred.
			</summary><value>
				A long representing the index of the current file being transferred.
			</value><remarks>
				<p>If transferring multiple files, this property will contain the index of the
				currently transferring file. If transferring a single file, this property will
				always be 1.</p>
				<p>This property is useful for displaying multiple file transfer progress to the user.
				For example, the application could have two ProgressBar objects, one to track the file transfer
				progress of individual files, one to track the progress of all files (for an MPUT or MGET).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PreviewEventArgs.TotalFiles">
            <summary>
				Total number of files being transferred.
			</summary><value>
				A long representing the total number of files being transferred.
			</value><remarks>
				<p>If transferring multiple files, this property will contain the total number of all files
				being transferred. If transferring a single file, this property will
				always be 1.</p>
				<p>This property is useful for displaying multiple file transfer progress to the user.
				For example, the application could have two ProgressBar objects, one to track the file transfer
				progress of individual files, one to track the progress of all files transferred (for an MPUT or MGET).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PreviewEventArgs.FileName">
            <summary>
				Gets the pathname of the file to be transferred.
			</summary><value>A string representing the path and name of the file being transferred.</value><remarks>
				<p>When storing or retrieving files or streams, this property will contain the name of the file on the server. When storing multiple files, this property will contain the pathname of the file being transferred.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PreviewEventArgs.Cancel">
            <summary>
				Used to cancel the pending file transfer.
			</summary><value>
				A bool that may be read or set.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ListEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> operation completes.
			</summary><param name="sender">The source of the event.</param><param name="e">A ListEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> method, the class that holds the event data is the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs.html">ListEventArgs</a> class. A method must be created with the same signature as the delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself. 
				In this example that would mean a method would have to be defined to accept two arguments (an object and a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs.html">ListEventArgs</a>) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>The following example demonstrates how to assign an event handler to an event.
				<code lang="VB"> 
' *** EndList Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Ftp1.EndList, New Dart.PowerTCP.Ftp.ListEventHandler(AddressOf Ftp1_EndList)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList        
				</code>
				<code lang="C#">
// EndList event
this.ftp1.EndList += new Dart.PowerTCP.Ftp.ListEventHandler(this.ftp1_EndList);         
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ListEventArgs">
            <summary>
				This class is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndList_EV.html">EndList</a> event and provides data for this event.
			</summary><remarks>
				<p>A <b>ListEventArgs</b> object is passed into the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndList_EV.html">EndList</a> event after asynchronous list retrieval has taken place. 
				This object contains a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object, which encapsulates an FTP listing, and an object. Iterate through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs~Listing.html">Listing</a> property to access the individual <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> objects.
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs~State.html">State</a> object allows access to data and variables that
				were in use in the method from which <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> was called in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndList_EV.html">EndList</a> event. Simply pass whatever you wish as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs~State.html">State</a>.</p>
				<p>If any error occurred during the asynchronous method call, it would be returned in the handling event. To trap the error, simply put a try/catch block around any access of the parameter e.</p>
			</remarks>
            <example>The following example demonstrates using BeginList to retrieve a Listing asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get a listing for all text files in home/test. Upon completion the EndList
' event will fire, with the Listing passed in as an arg
 Ftp1.BeginList("/home/test/*.txt", True, Nothing)

' Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving Listing")

' When the BeginList operation has completed, the EndList Event will fire. 
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList
      
   ' If an error occurred during the asynchronous method, it would be 
   ' returned in the event. Be sure to check for it.
   if e.Exception Is Nothing Then
   
      ' Retrieve listing and display

      ' Begin setting up the ListView (listView1 is a standard ListView object) display

      ' Show gridlines.
      ListView1.GridLines = True

      ' Set View to Details
      ListView1.View = View.Details

      ' Add column headings for file name, size, and date.
      ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

      ' Iterate through the listing, adding a row to the ListBox for each
      Dim le As Dart.PowerTCP.Ftp.ListEntry
      For Each le In e.Listing
         Dim cols() As String = {le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      Next
  Else
     Debug.WriteLine(e.Exception.Message)
  End If
  
  ' Close the connection
  Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get a listing for all text files in home/test. Upon completion the EndList
// event will fire, with the Listing passed in as an arg
ftp1.BeginList("/home/test/*.txt", true, null);

// Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving listing");

// When the BeginList operation has completed, the EndList Event will fire.

private void ftp1_EndList(object sender, Dart.PowerTCP.Ftp.ListEventArgs e)
{
    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       // Retrieve listing and display

       // Begin setting up the ListView (listView1 is a standard ListView object) display

       // Show gridlines.
       listView1.GridLines = true;

       // Set View to Details
       listView1.View = View.Details;

       // Add column headings for file name, size, and date.
       listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
       
       // Iterate through the listing, adding a row to the ListBox for each
       foreach(Dart.PowerTCP.Ftp.ListEntry le in e.Listing)
       {
          string[] cols = {le.Name, le.Size.ToString(), le.TimeStamp};
          listView1.Items.Add(new ListViewItem(cols));
       }
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEventArgs.Listing">
            <summary>
				Gets the <b>Listing</b> object received from the server.
			</summary><value>
				A <b>Listing</b> object encapsulating an FTP listing.
			</value><remarks>
				<p>After successful completion of an asynchronous <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a>, the <b>ListEventArgs.Listing</b> property will contain a representation of the FTP listing. This representation will include an array of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> objects, representing each file/directory retrieved by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a> method, and a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> property, containing the perceived format of the listing.</p>
			</remarks>
            <example>The following example demonstrates using BeginList to retrieve a Listing asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get a listing for all text files in home/test. Upon completion the EndList
' event will fire, with the Listing passed in as an arg
 Ftp1.BeginList("/home/test/*.txt", True, Nothing)

' Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving Listing")

' When the BeginList operation has completed, the EndList Event will fire. 
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList
      
   ' If an error occurred during the asynchronous method, it would be 
   ' returned in the event. Be sure to check for it.
   if e.Exception Is Nothing Then
   
      ' Retrieve listing and display

      ' Begin setting up the ListView (listView1 is a standard ListView object) display

      ' Show gridlines.
      ListView1.GridLines = True

      ' Set View to Details
      ListView1.View = View.Details

      ' Add column headings for file name, size, and date.
      ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

      ' Iterate through the listing, adding a row to the ListBox for each
      Dim le As Dart.PowerTCP.Ftp.ListEntry
      For Each le In e.Listing
         Dim cols() As String = {le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      Next
  Else
     Debug.WriteLine(e.Exception.Message)
  End If
  
  ' Close the connection
  Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get a listing for all text files in home/test. Upon completion the EndList
// event will fire, with the Listing passed in as an arg
ftp1.BeginList("/home/test/*.txt", true, null);

// Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving listing");

// When the BeginList operation has completed, the EndList Event will fire.

private void ftp1_EndList(object sender, Dart.PowerTCP.Ftp.ListEventArgs e)
{
    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       // Retrieve listing and display

       // Begin setting up the ListView (listView1 is a standard ListView object) display

       // Show gridlines.
       listView1.GridLines = true;

       // Set View to Details
       listView1.View = View.Details;

       // Add column headings for file name, size, and date.
       listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
       
       // Iterate through the listing, adding a row to the ListBox for each
       foreach(Dart.PowerTCP.Ftp.ListEntry le in e.Listing)
       {
          string[] cols = {le.Name, le.Size.ToString(), le.TimeStamp};
          listView1.Items.Add(new ListViewItem(cols));
       }
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a> may be thrown. You could check this property to see if it was of type <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a>, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>The following example demonstrates using BeginList to retrieve a Listing asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get a listing for all text files in home/test. Upon completion the EndList
' event will fire, with the Listing passed in as an arg
 Ftp1.BeginList("/home/test/*.txt", True, Nothing)

' Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving Listing")

' When the BeginList operation has completed, the EndList Event will fire. 
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList
      
   ' If an error occurred during the asynchronous method, it would be 
   ' returned in the event. Be sure to check for it.
   if e.Exception Is Nothing Then
   
      ' Retrieve listing and display

      ' Begin setting up the ListView (listView1 is a standard ListView object) display

      ' Show gridlines.
      ListView1.GridLines = True

      ' Set View to Details
      ListView1.View = View.Details

      ' Add column headings for file name, size, and date.
      ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

      ' Iterate through the listing, adding a row to the ListBox for each
      Dim le As Dart.PowerTCP.Ftp.ListEntry
      For Each le In e.Listing
         Dim cols() As String = {le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      Next
  Else
     Debug.WriteLine(e.Exception.Message)
  End If
  
  ' Close the connection
  Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get a listing for all text files in home/test. Upon completion the EndList
// event will fire, with the Listing passed in as an arg
ftp1.BeginList("/home/test/*.txt", true, null);

// Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving listing");

// When the BeginList operation has completed, the EndList Event will fire.

private void ftp1_EndList(object sender, Dart.PowerTCP.Ftp.ListEventArgs e)
{
    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       // Retrieve listing and display

       // Begin setting up the ListView (listView1 is a standard ListView object) display

       // Show gridlines.
       listView1.GridLines = true;

       // Set View to Details
       listView1.View = View.Details;

       // Add column headings for file name, size, and date.
       listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
       
       // Iterate through the listing, adding a row to the ListBox for each
       foreach(Dart.PowerTCP.Ftp.ListEntry le in e.Listing)
       {
          string[] cols = {le.Name, le.Size.ToString(), le.TimeStamp};
          listView1.Items.Add(new ListViewItem(cols));
       }
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Security">
            <summary>Enumerates the security protocol and authentication types which can be used.</summary><remarks>
				<p>This enumeration is used by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Security.html">Security</a> property of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component. 
				Set this property to the type of security protocol and authentication type used by the
				FTP server. For example, if explicit SSL is used, set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Security.html">Security</a> property to Security.Explicit, Security.ExplicitControlOnly, or
				Security.ExplicitControlOptional and connect to the secure FTP server. Typically, you will connect to the well-known port
				of 21 in this case. If implicit SSL is used, set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Security.html">Security</a> property to Security.Implicit, Security.ControlOnly or 
				Security.DataOnly and connect to the secure FTP server. Typically, you will connect to the well-known port of 990 
				in this case.</p>
				<p>For more information about implicit and explicit SSL, see the topic Explicit vs Implicit SSL.</p>
			</remarks>
            <example>The following example demonstrates receiving a remote certificate.
				<code lang="VB">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        'Use Implicit Secure FTP
        Ftp1.Security = Security.Implicit

        'Do not ignore problems with remote certificates
        Ftp1.UseAuthentication = True

        'Login and get working directory
        Ftp1.Server = "myServer"
        Ftp1.Username = "myUser"
        Ftp1.Password = "myPassword"
        Ftp1.Invoke(FtpCommand.PrintDir)
    End Sub

    Private Sub Ftp1_CertificateReceived(ByVal sender As Object, ByVal e As CertificateReceivedEventArgs) Handles Ftp1.CertificateReceived
        'Fires during SSL handshake when server presents its certificate
        Dim msg As String = "The server could not be validated for the following reason(s):"
        e.Accept = True

        'Security checks
        If (Not e.TrustedRoot) Then
            msg = msg + vbCrLf + "    -The certificate CA was not trusted"
            e.Accept = False
        End If
        If (Not e.ValidName) Then
            msg = msg + vbCrLf + "    -The certificate name was invalid"
            e.Accept = False
        End If
        If (Not e.ValidDate) Then
            msg = msg + vbCrLf + "   -The certificate date was invalid"
            e.Accept = False
        End If

        'If Validation failed, show message to user
        If (e.Accept = False) Then
            msg = msg + vbCrLf + vbCrLf + "Do you wish to override the security check?"
            If (MessageBox.Show(msg, "Security Alert: Server could not be validated", _
             MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.Yes) Then e.Accept = True
        End If
    End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
	//Use Implicit Secure FTP
	ftp1.Security = Security.Implicit;

	//Do not ignore problems with remote certificates
	ftp1.UseAuthentication = true;
			
	//Login and get working directory
	ftp1.Server = "myServer";
	ftp1.Username = "myUser";
	ftp1.Password = "myPassword";
	ftp1.Invoke(FtpCommand.PrintDir);
}

private void ftp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//Fires during SSL handshake when server presents its certificate
	string msg = "The server could not be validated for the following reason(s):";
	e.Accept = true;

	//Security checks
	if (!e.TrustedRoot)
	{
		msg = msg + "\r\n    -The certificate CA was not trusted";
		e.Accept = false;
	}
	if (!e.ValidName)
	{
		msg = msg + "\r\n    -The certificate name was invalid";
		e.Accept = false;
	}
	if (!e.ValidDate)
	{
		msg = msg + "\r\n    -The certificate date was invalid";
		e.Accept = false;
	}

	//If Validation failed, show message to user
	if (e.Accept == false)
	{
		msg = msg + "\r\n\r\nDo you wish to override the security check?";
		if (MessageBox.Show(msg, "Security Alert: Server could not be validated", 
			MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.None">
            <summary>
				No encryption on either Control or Data connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.Implicit">
            <summary>
				Implicit encryption on Control and Data connections.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.Explicit">
            <summary>
				Require explicit "AUTH SSL" on Control connection and implicit encryption on Data connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.ExplicitControlOnly">
            <summary>
				Require explicit "AUTH SSL" on Control connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.ExplicitControlOptional">
            <summary>
				Try to use explicit "AUTH SSL" on Control connection.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.ControlOnly">
            <summary>
				Implicit encryption on Control connection only.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.DataOnly">
            <summary>
				Implicit encryption on Data connection only.
			</summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.Security.ImplicitLogin">
            <summary>
				Implicit encryption on Data and Control until the user is logged in, then no encryption on control.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Ftp">
            <summary>
            The <b>Ftp</b> component supports comprehensive files transfer activities with any FTP server.
            </summary><remarks>
				<p>The <b>Ftp</b> component provides high-level <ign>File</ign> Transfer Protocol capabilities to your application including the ability to transfer files and streams, and the ability to read/write to the data connection. Also supported is the ability to send any command (including proprietary commands to the server). These capabilities are all encapsulated by high-level methods, so no knowledge of low-level protocols is required. Asynchronous and synchronous use is fully supported.</p>
				<H4 class="dtH4">Using the <b>Ftp</b> Component</H4>
				<p>What follows are short descriptions of common usability issues. For a more complete description, see the topic Using The <b>Ftp</b> Component Overview.</p>
				<p>
					<b>Logging in/out:</b> Before any communication with the server can take place, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ServerPort.html">ServerPort</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a> properties must first be set. Once set, whenever communication needs to occur with the server, the client will automatically be logged in. The client will stay logged in until either the <b>Ftp</b> component is destroyed or either the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Close.html">Close</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Abort.html">Abort</a> methods are called. In addition, any time the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ServerPort.html">ServerPort</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a> properties change, this change will be detected and the next time communication with a server is required, it will occur using the newly updated information.</p>
				<p>For more information about logging in and out, see the topic Session Management Overview.</p>
				<p>
					<b>Synchronous Use:</b> Most applications written with the <b>Ftp</b> component will be synchronous meaning that the application, when calling a synchronous method, will not execute the next line of code until the response is received. Use synchronous methods when file transfer does not have to be transparent to the user.</p>
				<p>
					<b>Asynchronous Use:</b> The <b>Ftp</b> component fully supports asynchronous use, meaning that the application, when calling an asynchronous method, will immediately execute the next line of code without waiting for the response from the method. When the response is received, an event will be raised. Contained within this event will be an object derived from EventArgs, supplying necessary data about the method called. So when calling any asynchronous method in PowerTCP, you must create an event handler to handle the response from the method call. This means for each asynchronous method BeginXXX, there will be a corresponding event to handle the response, EndXXX. Use asynchronous methods when file transfer needs to occur transparently to the user, allowing continued use of the application while transfer is occurring.</p>
				<p>For more information about using synchronous and asynchronous methods, see the topic Synchronous Versus Asynchronous Methods.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>
					<b>Transferring files:</b>
					<ign>Files</ign> can be synchronously retrieved using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> method. <ign>Files</ign> can be synchronously stored using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method. The asynchronous counterparts to these two methods are the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> methods, (handling the response from these two methods in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> events, respectively). All of these methods are overloaded to support storing and retrieving of multiple files.</p>
				<p>For more information about transferring files, see either the topic Storing Files Overview or Retrieving Files Overview.</p>
				<p>
					<b>Transferring streams:</b>
					<ign>Files</ign> can be synchronously retrieved as streams using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> method (when passing in a stream), and streams can be synchronously put to the server as files using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method (when passing in a stream). The asynchronous counterparts to these synchronous methods are the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> methods (handling the response from these methods in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> events, respectively).</p>
				<p>For more information about transferring streams, see the topic Transferring Streams Overview.</p>
				<p>
					<b>Reading/Writing to the data stream:</b> The <b>Ftp</b> component can be used to read and write to an opened data stream. To do this synchronously, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> methods, and asynchronously, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> methods (handling the response from these methods in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> events, respectively). These methods return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object, which can then be used to read/write data from/to the data connection.</p>
				<p>For more information about reading and writing to the data stream, see the topic Accessing The Data Connection Overview.</p>
				<p>
					<b>Sending commands:</b> Commands are sent two ways using the <b>Ftp</b> component. The first is when they are encapsulated by a high-level method. For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Rename.html">Rename</a> method encapsulates the sending of the RNFR (rename from) and RNTO (rename to) commands. Other high-level commands include <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~GetSize.html">GetSize</a> (issues the SIZE command and parses the response), <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~GetDirectory.html">GetDirectory</a> (issues a PWD and parses the response), and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a> (synchronous) and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> (asynchronous), returns an encapsulated listing. The second is when commands are explicitly using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> (synchronous) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> (asynchronous) methods. Use this method to send any command not included in any higher level method (including proprietary commands).</p>
				<p>For more information about sending commands to the server, see the topic Sending Commands Overview.</p>
				<p>
					<b>Retrieving info about the control connection:</b> The TCP control connection is exposed through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Connection.html">Connection</a> property, allowing access to low-level properties and methods. This can be used to view TCP-level activity such as the local and remote IP address. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class can't be used on its own without a license for the PowerTCP <ign>Socket</ign> Objects.</p>
			</remarks>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component.
            </summary><param name="container">The IContainer which contains the Ftp component.</param><remarks>
				<p>Use this constructor to add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component to the IContainer <b>container.</b> When using Visual Studio.NET, simply add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference), the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component will have to be explicitly created and initialized.</p>
				<p>For information on how to use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component, see "Using The <ign>Ftp</ign> Component".</p>
				<p>The following table shows initial property values for an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a>.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Account </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Allocate </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> BlockSize </td>
							<td width="50%"> 8196 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Client </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientDataPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> reference to <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileType.html">FileType</a> </td>
							<td width="50%"> FileType.Ascii </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Passive </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Password </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> </td>
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> object </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Restart </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Server </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ServerPort </td>
							<td width="50%"> 21 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.StoreType.html">StoreType</a> </td>
							<td width="50%"> StoreType.Replace </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Username </td>
							<td width="50%"> zero-length string </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>The following example demonstrates creating an <b>Ftp</b> object.
				<code lang="VB"> 
' Declare as class member
Friend WithEvents Ftp1 As Dart.PowerTCP.Ftp.Design.Ftp

' Create in class initilization
Me.Ftp1 = New Dart.PowerTCP.Ftp.Design.Ftp(Me.components)        
				</code>
				<code lang="C#">
private Dart.PowerTCP.Ftp.Design.Ftp ftp1 = new Dart.PowerTCP.Ftp.Design.Ftp(this.components);         
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.#ctor">
            <summary>
            Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component.
            </summary><remarks>
				<p>The default constructor initializes a new <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component. When using Visual Studio.NET, simply add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference), the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component will have to be explicitly created and initialized.</p>
				<p>For information on how to use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component, see "Using The <ign>Ftp</ign> Component".</p>
				<p>The following table shows initial property values for an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a>.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> Account </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Allocate </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> BlockSize </td>
							<td width="50%"> 8196 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Client </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientDataPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ClientPort </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connected </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Connection </td>
							<td width="50%"> reference to <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component </td>
						</tr>
						<tr valign="top">
							<td width="50%"> DoEvents </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileType.html">FileType</a> </td>
							<td width="50%"> FileType.Ascii </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Passive </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Password </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> </td>
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> object </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Restart </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Server </td>
							<td width="50%"> zero-length string </td>
						</tr>
						<tr valign="top">
							<td width="50%"> ServerPort </td>
							<td width="50%"> 21 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.StoreType.html">StoreType</a> </td>
							<td width="50%"> StoreType.Replace </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Timeout </td>
							<td width="50%"> 30000 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Username </td>
							<td width="50%"> zero-length string </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>The following example demonstrates creating an <b>Ftp</b> object.
				<code lang="VB"> 
' Declare as class member
Friend WithEvents Ftp1 As Dart.PowerTCP.Ftp.Ftp

' Create in class initilization
Me.Ftp1 = New Dart.PowerTCP.Ftp.Design.Ftp        
				</code>
				<code lang="C#">
private Dart.PowerTCP.Ftp.Ftp ftp1 = new Dart.PowerTCP.Ftp.Ftp();         
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
            <example>The following example demonstrates simple use of the Passive property in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Specify a non-passive connection. The server will connect to the client
' for any data connections.
Ftp1.Passive = false
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
            
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Specify a non-passive connection. The server will connect to the client
// for any data connections.
ftp1.Passive = false;

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Abort">
            <summary>
				Abruptly close both the control and data connection.
			</summary><remarks>
				<p>Use this method only when all connections from the server must be immediately
				closed without waiting for any response from the server. Use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Close.html">Close</a> method
				to gracefully close the connection by issuing the "QUIT" command. Use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a>
				method to abort any data transfer while maintaining the control connection.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.AbortTransfer">
            <summary>
			Abort the current file transfer operation.
			</summary><remarks>
				<p>When data is being transferred, calling this method causes the object to attempt to abort the data transfer gracefully. The control connection will not be aborted.
				If the transfer aborts successfully, the method will return an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object. To check the success of an <b>Ftp.AbortTransfer</b> operation, check the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object returned from the method. If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Position.html">Position</a>
				does not equal <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a>, then the file transfer was aborted. If the operation aborted is a multiple file transfer, an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> will returned for all files involved with the transfer, both successfully transferred,
				partially transferred, and not transferred. To distinguish between the three, check the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Position.html">Position</a> properties:
				<ul>
						<li>If the file was transferred successfully, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Position.html">Position</a> will equal FtpFile.Length.</li>
						<li>If the file was partially transferred, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Position.html">Position</a> will be less than FtpFile.Length.</li>
						<li>If the file was not transferred, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Position.html">Position</a> will be -1.</li>
					</ul>
				</p>
				<p>The <b>Ftp.AbortTransfer</b> method can also be used to abort other processes. For example, this
				method can be used to abort lengthy file deletion processes resulting from use of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Delete.html">Delete</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginDelete.html">BeginDelete</a>.</p>
				<p>This method is useful if the user simply wishes to abort the file transfer, but would like to maintain the current session.</p>
				<p>This method differs from the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Abort.html">Abort</a> method in that the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Abort.html">Abort</a> method abruptly closes BOTH the control and data connection, where <b>Ftp.AbortTransfer</b> only closes the data connection.</p>
			</remarks>
            <example>The following example demonstrates
				<code lang="VB">
Private Sub ButtonPutFile_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    
    ' Set server and user properties. This will allow calling of other
    ' Ftp Component methods with the log in/log out taking place "behind the scenes"
    Ftp1.Server = "MyFTPServer"
    Ftp1.Username = "blah"
    Ftp1.Password = "MyPass"

    ' Make sure DoEvents is true so UI events will be processed.
    Ftp1.DoEvents = True
     
    ' Put method returns an FtpFile object 
    Dim file As Dart.PowerTCP.Ftp.FtpFile
    
    ' File is an image
    Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
     
    Try

       ' Begin a transfer, the user can click a button which calls Ftp.AbortTransfer.
       ' If this happens, the transfer should stop and return an FtpFile object.
       file = Ftp1.Put("C:\Test\Test.bmp", "Test.bmp")
    Catch ex As Exception
        Debug.WriteLine("Error: " + ex.Message)
        Exit Sub
    End Try
    
    ' Success, the file was either successfully transferred, or the transfer
    ' was successfully aborted. Find out which occurred.
    If file.Position = file.Length Then
       ' Transfer not aborted.
       Debug.WriteLine("File successfully transferred.")
       Debug.WriteLine("Name of file on server: " + file.RemoteFileName)
    Else
       ' Transfer was aborted
       Debug.WriteLine("File transfer aborted")
       Debug.WriteLine("Bytes transferred: " + file.Count)
    End If
End Sub

Private Sub ButtonAbortTransfer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
   Ftp1.AbortTransfer()
End Sub
				</code>
				<code lang="C#">
private void buttonPutFile_Click(object sender, System.EventArgs e)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in/log out taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "MyPass";

    // Make sure DoEvents is true so UI events will be processed.
    ftp1.DoEvents = true;
    
    // Put method returns an FtpFile object
    Dart.PowerTCP.Ftp.FtpFile file;
    
    // File is an image
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;
    
    // Begin a transfer, the user can click a button which calls Ftp.AbortTransfer.
    // If this happens, the transfer should stop and return an FtpFile object.
    try
    {
       file = ftp1.Put("C:\\Test\\test.bmp", "test.bmp");
    }
    catch(Exception ex)
    {
       Debug.WriteLine("Error: " + ex.Message);
       return;
    }
    
    // Success, the file was either successfully transferred, or the transfer
    // was successfully aborted. Find out which occurred.
    if(file.Position == file.Length)
    {
       // Transfer not aborted.
       Debug.WriteLine("File successfully transferred.");
       Debug.WriteLine("Name of file on server: " + file.RemoteFileName);
    }
    else
    {
       // Transfer was aborted
       Debug.WriteLine("File transfer aborted");
       Debug.WriteLine("Bytes transferred: " + file.Count);
    }

}

private void buttonAbort_Click(object sender, System.EventArgs e)
{
    // If DoEvents is true, this button we be able to be clicked, aborting the transfer
    ftp1.AbortTransfer();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginDelete(System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
           Deletes a file or directory tree asynchronously.
            </summary><param name="searchPattern">May be a pathname (with or without wildcards) or a directory (indicated by a trailing slash).</param><param name="subDirectories">Use true to indicate sub-directories should be searched for files to delete.</param><param name="removeEmptyDirectories">Use true to indicate that directories that do not contain other directories or files should be removed.</param><param name="state">User state information.</param><remarks>
				<p>This method deletes a file, multiple files, or directories from the server asynchronously. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndDelete_EV.html">EndDelete</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the files deleted. The only data contained within this object should be the File.RemoteFileName, containing the names of the files deleted, and File.Status, which should equal DeleteCompleted. All other members of this object should be at their default values.</p>
				<p>This method provides a high-level alternative to Ftp.BeginInvoke(Command.Delete). It also expands upon this method by providing support for the deletion of multiple files and directory trees with a single method call.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndDelete_EV.html">EndDelete</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To perform this method synchronously, see <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Delete.html">Delete</a>.</p>
				<p>Use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> method to abort the deletion process while maintaining the control connection.</p>
				<p>The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Delete all files in the directory (or subdirectories).</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginGet(System.String,System.String,System.Object)">
            <summary>
				<ign>Get</ign> a single file from the server asynchronously and store it in a local file.
            </summary><param name="remoteFileName">Source pathname of the file on the server.</param><param name="localFileName">Destination pathname for the file.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously get a single file. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
				For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object that containing such data as the file names on the local and remote machine. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous file transfer, see the topic Retrieving Files Asynchronously Overview (Advanced Users).</p>
				<p>To get a file synchronously use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> method.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException"> Ftp.BeginGet used without providing an Ftp.EndGet event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates how to asynchronously retrieve a single file.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "test.txt"

' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet(FileToGet, "RetrievedFile.txt", Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet)

' When the BeginGet operation has completed, the EndGet Event will fire.

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

    ' If an error occurred, it would be returned in the event. Be sure to check for it.
    If e.Exception Is Nothing Then
       Debug.WriteLine("Get completed for file " + file.RemoteFileName)
    Else
       Debug.WriteLine("Error: " + e.Exception.ToString())
    End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "test.txt";

// Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
ftp1.BeginGet(FileToGet, Application.StartupPath + "\\" + new System.IO.FileInfo(FileToGet).Name, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet);

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginGet(System.String,System.IO.Stream,System.Object)">
            <summary>
				<ign>Get</ign> a file from the server asynchronously as a Stream object.
            </summary><param name="remoteFileName">Source pathname of the file on the server.</param><param name="localStream">Initialized destination stream for the file.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously get a file as a Stream object. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
				For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object containing a Stream object which contains the file requested. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate.  See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous stream transfer, see the topic Transferring Streams Asynchronously Overview (Advanced Users).</p>
				<p>To get a file and store it in a Stream object synchronously use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> method.</p>
				<p>This method
            differs from the Ftp.BeginGet(String, Int64, Object) method in that Ftp.BeginGet(String, Int64, Object) is used to read directly from the open data connection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException"> Ftp.BeginGet used without providing an Ftp.EndGet event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ObjectDisposedException">Cannot access a closed stream.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates an asynchronous BeginGet for a single file, with that file being returned as a stream in the EndGet event.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Create stream to pass into BeginGet, it will be returned in the
' EndGet event filled with data from the requested file.
Dim stream 1 as new System.IO.MemoryStream()

' Call BeginGet, passing in the MemoryStream.
Ftp1.BeginGet("myfile.txt", stream1, Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving file as stream")


' When the BeginGet operation has completed, the EndGet Event will fire.
Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

   ' If an error occurred, it would be returned in the event. Be sure to 
   ' check for it

   If e.Exception Is Nothing Then
      ' Report success
      Debug.WriteLine("Get complete")

      ' Create byte array to read data into
      Dim data(e.Stream.Length) As Byte

      ' Read data into byte array
      e.Stream.Position = 0
      Dim l As Integer = e.Stream.Read(data, 0, e.Stream.Length)

      ' Display data in a text box
      txtFile.Text = System.Text.ASCIIEncoding.ASCII.GetString(data)
      Debug.WriteLine(l.ToString() + " bytes transferred")
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
      
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create stream to pass into BeginGet, it will be returned in the
// EndGet event filled with data from the requested file.
System.IO.MemoryStream stream1 = new System.IO.MemoryStream();

// Call BeginGet, passing in the MemoryStream.
ftp1.BeginGet("myfile.txt", stream1, null);

// Since BeginGet is asynchronous, this line will be immediatley executed.
Debug.WriteLine("Retrieving file as stream.");

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to
    // check for it
    
    if(e.Exception == null)
    {
       // Report success
       Debug.WriteLine("Get complete");

       // Create new byte array to read data into
       byte[] data = new byte[e.Stream.Length];

       // Read data into byte array
       e.Stream.Position = 0;
       int l = e.Stream.Read(data, 0, (int)e.Stream.Length);

       // Display data in text box
       textBox1.Text = System.Text.ASCIIEncoding.ASCII.GetString(data);
       Debug.WriteLine(l.ToString() + " bytes transferred");
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
} 
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginGet(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
				<ign>Get</ign> multiple files from the server asynchronously and store them in the local root directory specified.
            </summary><param name="remoteRoot">Root directory on the server.</param><param name="searchPattern">Wildcard search pattern of files to get; may include a path.</param><param name="localRoot">Destination root directory on the client.</param><param name="subDirectories">true if sub-directories should be recursively copied.</param><param name="synchronize">true if files of the same size that already exist locally should not be copied.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously retrieve multiple files. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
				For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an array of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> objects that containing filenames of the local and remote files for all files transferred. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information that you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event. Since the method is "disconnected" from the calling code and returns to the main thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using products in PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous file transfer, see the topic Retrieving Files Asynchronously Overview (Advanced Users).</p>
				<p>To get multiple files synchronously use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>.</p>
				<p>If <i>localRoot</i> exists, the files will be saved to the directory path specified. If it does not exist, the directory will be created.</p>
				<p>The <b>Ftp.BeginGet</b> method gets all files specified in <i>remoteRoot</i> (and subdirectories if <i>subDirectories</i> is true) that meet the wildcard requirement specified in <i>searchPattern</i>. The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginGet used without providing an Ftp.EndGet event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates how to asynchronously retrieve multiple files.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet("mydir", "*", Application.StartupPath + "/", false, Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving all files in mydir")

' When the BeginGet operation has completed, the EndGet Event will fire. 

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet
   
   ' If an error occurred, it would be returned in the event. Be sure to =check for it.
   If e.Exception Is Nothing Then
   
       Dim file As Dart.PowerTCP.Ftp.FtpFile
       
      ' Iterate through files collection and display info. This will contain a File object
      ' for each file retrieved. 
      For Each file In e.Files
         Debug.WriteLine("Get completed for " + file.RemoteFileName)
      Next
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
End Sub
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Call BeginGet for all files in the directory "mydir", this will begin an asynchronous MGet. Upon completion
// the EndGet Event will be fired.
ftp1.BeginGet("mydir", "*", Application.StartupPath + "//", false, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving all files in mydir");

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it
    if(e.Exception == null)
    {
        // Iterate through files collection and display info. This will contain a File object
        // for each file retrieved.
        foreach(Dart.PowerTCP.Ftp.FtpFile file in e.Files)
            Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.ToString());
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginGet(System.String,System.Int64,System.Object)">
            <summary>
				<ign>Get</ign> a stream asynchronously that can be used to read the FTP data connection.
            </summary><param name="remoteFileName">Source pathname of the file on the server.</param><param name="restartMarker">Restart location within file on the server. 0 is normally used.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously get a stream that can be used to read the FTP data connection. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndGet_EV.html">EndGet</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
				This <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will contain a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object (<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Stream.html">Stream</a>) which can be used to read the data connection. Simply call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~Read.html">Read</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~BeginRead.html">BeginRead</a> to read directly from the data stream. Zero bytes will be returned when reading is complete. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>Since there is no local file to test for an automatic restart, you can specify a restart marker location within the
				remote file, and the stream will start at that byte offset location within the remote file. Use this method when you want
				to read the stream within your application.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the FtpEndGet event. Since the method is "disconnected" from the calling code and returns to the main thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To synchronously get a stream that can be used to read the FTP data connection use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on reading from the data connection asynchronously, see the topic Accessing The Data Connection Asynchronously For Reading.</p>
				<p>Use this method to transparently open a stream to the data connection that can be used to read data. For example, you may wish to only transfer <i>n</i> bytes from the server (perhaps in the case where you are dealing with very large files). Use this method to read the data you want from the data connection stream, then use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> method to close the stream.</p>
				<p>This method differs from the Ftp.BeginGet(String, <ign>Stream</ign>, Object) method in that Ftp.BeginGet(String, <ign>Stream</ign>, Object) is used to retrieve a file as a filled stream, so don't use this method unless you would
				like the complete file returned in your application.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException"> Ftp.BeginGet used without providing an Ftp.EndGet event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument is null</exception>
            <example>The following example demonstrates an asynchronous BeginGet for a single file, with that file being returned as a stream that can be used to read the FTP data connection in the EndGet event. In this example the user-defined method GetTextFilePreview accepts a file and the amount of characters to preview. In the EndGet event, the amount of characters to preview is read from the data connection and displayed.
				<code lang="VB">
' This user-defined method is used to generate a preview of text files residing on the FTP Server. The user enters the 
' FileName of the file on the server that they would like a preview of and the number of characters to preview. BeginGet is 
' called with the FileName and CharactersToPreview (as the object) being passed in. The EndGet event will fire when the
' stream has been opened and is ready for reading.

Private Sub GetTextPreview(ByVal FileName As String, ByVal CharactersToPreview As Long)

   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFTPServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
   ' number of characters to preview. This variable will be accessible in the EndGet Event
   
   Ftp1.BeginGet(FileName, 0, CharactersToPreview)

End Sub

' When the BeginGet operation has completed, the EndGet Event will fire. 
Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

   Debug.WriteLine("Attempting to read from data stream")

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then    
      'Retrieve the number of characters to preview from the object State.
      Dim AmountOfChars As Integer = Convert.ToInt32(e.State)
      
      ' Create a byte array the size of the amount of characters to preview.
      Dim data(AmountOfChars) As Byte
      
      ' Read the amount of characters to preview from the stream
      e.Stream.Read(data, 0, AmountOfChars)
      
      e.Stream.Close()

      ' Close the stream
      Ftp1.AbortTransfer()
    
      ' Display the preview characters
      TextBox1.Text = System.Text.Encoding.ASCII.GetString(data)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
/*
/*
This user-defined method is used to generate a preview of text files residing on the FTP Server.
The user enters the FileName of the file on the server that they would like a preview of and the
number of characters to preview. BeginGet is called with the FileName and CharactersToPreview
(as the object) being passed in. The EndGet event will fire when the stream has been opened and is
ready for reading.
*/

private void GetTextFilePreview(string FileName, long CharactersToPreview)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Begin an asynchronous Get. This also demonstrates using the third parameter (object State) to pass the
    // number of characters to preview. This variable will be accessible in the EndGet Event
    ftp1.BeginGet(FileName, 0, CharactersToPreview);
}


// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
    Debug.WriteLine("Attempting to read from data stream");

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       int AmountOfChars;
    
       // Retrieve the number of characters to preview from the object State.
       AmountOfChars = Convert.ToInt32(e.State);

       // Create a byte array the size of the amount of characters to preview.
       byte[] data = new byte[AmountOfChars];

       // Read the amount of characters to preview from the stream
       e.Stream.Read(data, 0, AmountOfChars);

       // Close the stream
       ftp1.AbortTransfer();

       // Display the preview characters.
       textBox1.Text = System.Text.Encoding.ASCII.GetString(data);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
} 
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand,System.String,System.Object)">
            <summary>
				<ign>Invoke</ign> an FTP command (with a parameter) asynchronously.
            </summary><param name="command">FTP command to send.</param><param name="modifier">Command modifier appended to command.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously send a low-level FTP command to your server. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndInvoke_EV.html">EndInvoke</a> event will be raised. An <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a> object will be passed into this event, containing data about the command sent and the response received. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventHandler.html">InvokeEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>If you wish to send your own command, use FtpCommand.Null, and specify your entire command as the <i>modifier</i>. An example would be BeginInvoke(FtpCommand.Null, "MYCOMMAND file1.txt", null).</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndInvoke_EV.html">EndInvoke</a> event. Since the method is "disconnected" from the calling code and returns to the main thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To invoke an FTP command synchronously use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a>.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronously sending commands, see the topic Sending Commands Asynchronously.</p>
				<p>Use this method to send a command with a parameter to the server (for example, HELP or CWD).
				This method can also be used to send commands without a parameter (for example PWD or QUIT) by specifying the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpCommand.html">FtpCommand</a> as the first parameter
				and null as the second parameter.</p>
				<p>As an example, use this method if you want to send an asynchronous "HELP" request to the server. FtpCommand.Help would be used as the <i>command</i> parameter and the item that you want help on would be used as the <i>modifier</i> parameter. In this case the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndInvoke_EV.html">EndInvoke</a> event will not
            be raised until the response is received from the server.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException"> Ftp.BeginInvoke used without providing an Ftp.EndInvoke event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates using <b>BeginInvoke</b> to issue a command (in this case, DELE) asynchronously.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue delete command asynchronously, specifying the file to delete as the second parameter,
' upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, "zzz.txt", Nothing)


' When the BeginInvoke operation has completed, the EndInvoke Event will fire. 
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke
   
   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response code received " + e.Response.Code.ToString())
      Debug.WriteLine("Response text received " + e.Response.Text)
   Else
      Debug.WriteLine("Error: " + e.Exception.Message)
   End If
   
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Issue delete command asynchronously, specifying the file to delete as the second parameter,
// upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, "filetodelete.txt", null);


// When the BeginInvoke operation has completed, the EndInvoke Event will fire. 
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{
    // If an error occurred during the asynchronous operation, it 
    // would be returned in the event. Be sure to check for it
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response code received " + e.Response.Code);
        Debug.WriteLine("Response text received " + e.Response.Text);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }
} 
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginList(System.String,System.Boolean,System.Object)">
            <summary>
				<ign>Get</ign> a file listing from the server asynchronously.
            </summary><param name="searchPattern">Filename for the listing, which may include wildcards.</param><param name="full">true for a full listing, or false for a named list.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously retrieve a listing. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndList_EV.html">EndList</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs.html">ListEventArgs</a> object will be passed into this event, containing a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object which encapsulates an FTP <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a>. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventHandler.html">ListEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>Specify a full listing for complete listing information, but if the server's listing format is not recognized as
            standard UNIX or DOS, you will have to parse out each line yourself. Use an abbreviated name list if you only need filename
            information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To get a listing synchronously use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a>.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginList used without providing an Ftp.EndList event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates using BeginList to retrieve a Listing asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get a listing for all text files in home/test. Upon completion the EndList
' event will fire, with the Listing passed in as an arg
 Ftp1.BeginList("/home/test/*.txt", True, Nothing)

' Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving Listing")

' When the BeginList operation has completed, the EndList Event will fire. 
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList
      
   ' If an error occurred during the asynchronous method, it would be 
   ' returned in the event. Be sure to check for it.
   if e.Exception Is Nothing Then
   
      ' Retrieve listing and display

      ' Begin setting up the ListView (listView1 is a standard ListView object) display

      ' Show gridlines.
      ListView1.GridLines = True

      ' Set View to Details
      ListView1.View = View.Details

      ' Add column headings for file name, size, and date.
      ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

      ' Iterate through the listing, adding a row to the ListBox for each
      Dim le As Dart.PowerTCP.Ftp.ListEntry
      For Each le In e.Listing
         Dim cols() As String = {le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      Next
  Else
     Debug.WriteLine(e.Exception.Message)
  End If
  
  ' Close the connection
  Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get a listing for all text files in home/test. Upon completion the EndList
// event will fire, with the Listing passed in as an arg
ftp1.BeginList("/home/test/*.txt", true, null);

// Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving listing");

// When the BeginList operation has completed, the EndList Event will fire.

private void ftp1_EndList(object sender, Dart.PowerTCP.Ftp.ListEventArgs e)
{
    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       // Retrieve listing and display

       // Begin setting up the ListView (listView1 is a standard ListView object) display

       // Show gridlines.
       listView1.GridLines = true;

       // Set View to Details
       listView1.View = View.Details;

       // Add column headings for file name, size, and date.
       listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
       
       // Iterate through the listing, adding a row to the ListBox for each
       foreach(Dart.PowerTCP.Ftp.ListEntry le in e.Listing)
       {
          string[] cols = {le.Name, le.Size.ToString(), le.TimeStamp};
          listView1.Items.Add(new ListViewItem(cols));
       }
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginPut(System.String,System.String,System.String,System.Boolean,System.Boolean,System.Object)">
            <summary>
				<ign>Put</ign> multiple files to the server asynchronously and store them in the root specified.
            </summary><param name="localRoot">Source root directory on the client.</param><param name="searchPattern">Wildcard search pattern of files to put; may include path.</param><param name="remoteRoot">Destination root directory on the server.</param><param name="subDirectories">true if sub-directories should be recursively copied.</param><param name="synchronize">true if files of the same size that already exist remotely should not be copied.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously store multiple files. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
				For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will include an array of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> objects that contain the filenames of the local and remote files for all files transferred. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous file transfer, see the topic Storing Files Asynchronously Overview (Advanced Users).</p>
				<p>To store multiple files synchronously use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method.</p>
				<p>The <b>BeginPut</b> method stores all files in the specified <i>localRoot</i> (and subdirectories if <i>subDirectories</i> is true) that meet the wildcard requirement specified in <i>searchPattern</i>. The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginPut used without providing an Ftp.EndPut event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates using BeginPut to Put multiple files to the server asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Call BeginPut all files in "C:\Test", this will begin an asynchronous Put. Upon completion
' the EndPut Event will be fired.
Ftp1.BeginPut("C:\Test", "*", "", False, Nothing)

' Report to user. Since BeginPut is asynchronous, this line will be immediately executed.
Debug.WriteLine("MPUT Executing")


' When the BeginPut operation has completed, the EndPut Event will fire.    
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
   
      ' Iterate through files collection and display info about each file transferred.
      Dim file As Dart.PowerTCP.Ftp.FtpFile
      For Each file In e.Files
         Debug.WriteLine("Successfully Put " + file.LocalFileName)
      Next
   Else
      Debug.WriteLine("Error: " + e.Exception.Message);
   End If
  
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Call BeginPut all files in "C:\Test", this will begin an asynchronous Put. Upon completion
// the EndPut Event will be fired.
ftp1.BeginPut("C:\\Test", "*", "/home/test/mydir", false, null);

// Report to user. Since BeginPut is asynchronous, this line will be immediately executed.
Debug.WriteLine("MPUT Executing");


// When the BeginPut operation has completed, the EndPut Event will fire.
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        // Iterate through files collection and display info for each file transferred.
        foreach(Dart.PowerTCP.Ftp.FtpFile file in e.Files)
            Debug.WriteLine("Successfully put " + file.LocalFileName);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginPut(System.String,System.String,System.Object)">
            <summary>
            Store a single file to the FTP server asynchronously.
            </summary><param name="localFileName">Source pathname of the local file to transfer.</param><param name="remoteFileName">Destination pathname for the remote file on the server.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously store a single file. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
			For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object that includes such data as the file names on the local and remote machine. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate. See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous file transfer, see the topic Storing Files Asynchronously Overview (Advanced Users).</p>
				<p>To put a file on the server synchronously use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginPut used without providing an Ftp.EndPut event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates using <b>BeginPut</b> to Put a file to the server asynchronously
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToPut As String = "c:\FtpTest\doc.txt"


' Call BeginPut for the specified file, this will begin an asynchronous Put. Upon completion
' the EndPut Event will be fired. (The FileInfo object parses the name from the path).
Ftp1.BeginPut(FileToPut, New IO.FileInfo(FileToPut).Name, Nothing)

'Report to user. Since BeginPut is asynchronous, this line will be immediately executed
Debug.WriteLine("Storing file")

' When the BeginPut operation has completed, the EndPut Event will fire. 
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut

   Dim file As Dart.PowerTCP.Ftp.FtpFile

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Successfully Put " + file.LocalFileName)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToPut = "c:\\FtpTest\\MyFile.bmp";


// Call BeginPut for the specified file, this will begin an asynchronous Put. Upon completion
// the EndPut Event will be fired. (The FileInfo object parses the filename from the path).
ftp1.BeginPut(FileToPut, new System.IO.FileInfo(FileToPut).Name, null);

// Report to user. Since BeginPut is asynchronous, this line will be immediately executed.
Debug.WriteLine("Storing file");

// When the BeginPut operation has completed, the EndPut Event will fire. 
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

   // If an error occurred, it would be returned in the event. Be sure to check for it.
   if(e.Exception == null)
   {
      Debug.WriteLine("Successfully put " + file.LocalFileName);
   }
   else
   {
      Debug.WriteLine("Error: " + e.Exception.ToString())
   }
   
   // Close the connection
   ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginPut(System.IO.Stream,System.String,System.Object)">
            <summary>
            Store a file to the FTP server asynchronously using a stream.
            </summary><param name="localStream">Source stream for the file.</param><param name="remoteFileName">Destination pathname for the file on the server.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously store a Stream object as a file on the server. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer.
			For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object containing a Stream object which includes the file requested. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate.  See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on asynchronous stream transfer, see the topic Storing A Stream As A File Asynchronously.</p>
				<p>To put a file on the server synchronously using a stream use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method.</p>
				<p>This method
            differs from the Ftp.BeginPut(String, Int64, Object) method in that Ftp.BeginPut(String, Int64, Object) is used to write to the open data connection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginPut used without providing an Ftp.EndPut event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ObjectDisposedException">Cannot access a closed stream.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates using BeginPut to put a stream to the server.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Create a MemoryStream to hold data to be stored on the server
Dim stream1 As New System.IO.MemoryStream()

' Create a byte array containing the data to be written to the stream
Dim data() As Byte = System.Text.Encoding.ASCII.GetBytes("Data to be written to the stream")

' Write to the stream
stream1.Write(data, 0, data.Length)
 
' Store the data on the server under the name "stream.txt". Upon completion the
' EndPut event will fire.
 Ftp1.BeginPut(stream1, "stream.txt", Nothing)

' Since BeginPut is asynchronous, this line of code will be immediately executed.
Debug.WriteLine("Put stream executing")

' When the BeginPut operation has completed, the EndPut Event will fire.
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut

   ' If an error occurred during the asynchronous operation, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      ' Display the information about the newly Put stream
      Debug.WriteLine(e.File.RemoteFileName + " created on server")
   Else
      Debug.WriteLine("Error: " + e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create a MemoryStream to hold data to be stored on the server
System.IO.MemoryStream stream1 = new System.IO.MemoryStream();

// Create a byte array containing the data to be written to the stream
byte[] data = System.Text.Encoding.ASCII.GetBytes("Data to be written to the stream");

// Write to the stream
stream1.Write(data, 0, data.Length);

// Store the data on the server under the name "stream.txt". Upon completion the
// EndPut event will fire.
ftp1.BeginPut(stream1, "stream.txt", null);

// Since BeginPut is asynchronous, this line of code will be immediately executed.
Debug.WriteLine("Put stream executing");

// When the BeginPut operation has completed, the EndPut Event will fire.
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred during the asynchronous operation, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        // Display the information about the newly Put stream
        Debug.WriteLine(e.File.RemoteFileName + " created on server");
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }
    
    // Close the connection
    ftp1.Close();
}

				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BeginPut(System.String,System.Int64,System.Object)">
            <summary>
				<ign>Get</ign> a stream asynchronously that can be used to write to the FTP data connection.
            </summary><param name="remoteFileName">Destination pathname for the file on the server.</param><param name="restartMarker">Restart location within file on the server. 0 is normally used.</param><param name="state">User state information.</param><remarks>
				<p>This method begins to asynchronously get a stream that can be used to write to the FTP data connection. Upon completion the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~EndPut_EV.html">EndPut</a> event will be raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into this event, containing data about the transfer. For example, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> will contain an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object that includes data about the transfer on both the server and client. See the topic Using Events Within The Visual Studio .NET Environment for more information on using events.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventHandler.html">FileEventHandler</a> delegate.  See the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference for more information.</p>
				<p>Since there is no local file to test for an automatic restart, you can specify a restart marker location within the
            remote file, and the stream will start writing at that byte offset location within the remote file.</p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <i>state</i> to be retrieved and used in the event handler.</p>
				<p>To synchronously get a stream that can be used to write to the FTP data connection use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>For more information on writing to the data connection asynchronously, see the topic Accessing The Data Connection Asynchronously For Writing.</p>
				<p>This method differs from the Ftp.BeginPut(String, Stream, Object) method in that Ftp.BeginPut(String, Stream, Object) is used to store a stream as a file that will be created on the server.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response received from server.</exception><exception cref="T:System.InvalidOperationException">BeginPut used without providing an Ftp.EndPut event handler.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates using BeginPut to write to the data stream.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Call BeginPut, A file called "mynewstream.txt" will be created on the server
' When execution returns in the EndPut event a data connection will be opened to the server. 
' Data can be written to the "mynewstream.txt" file in this event.
Ftp1.BeginPut("mynewstream.txt", 0, Nothing)

' Report to user
Debug.WriteLine("Opening data stream")

' When the BeginPut operation has completed, the EndPut Event will fire.
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut

    ' If an error occurred during the asynchronous method, it would 
    ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
   
      ' Display message to user
      Debug.WriteLine("Attempting to write to stream")
      
      ' Write text
      e.Stream.Write("Some text ")

      ' Write more text
      e.Stream.Write("Some more text ")

      ' Write more text
      e.Stream.Write("This is the end.)

      ' Close the stream
      e.Stream.Close()

      Debug.WriteLine("Done writing. Stream closed.")
   
   Else
      Debug.WriteLine("Error: " + e.Exception.Message)
   End If

   ' Close the connection 
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Call BeginPut, A file called "mynewstream.txt" will be created on the server
// When execution returns in the EndPut event a data connection will be opened to the server. 
// Data can be written to the "mynewstream.txt" file in this event.
ftp1.BeginPut("mynewstream.txt", 0, null);

// Report to user
Debug.WriteLine("Opening data stream");

// When the BeginPut operation has completed, the EndPut Event will fire.
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
    // Display message to user
    Debug.WriteLine("Writing to stream");

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        // Write data
        e.Stream.Write("Some text ");

       // Write this text
       e.Stream.Write("Some more text ");

       // Write this text
       e.Stream.Write("This is the end");

       // Close the stream
       e.Stream.Close();

       Debug.WriteLine("Done writing. Stream closed.");
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.Message");
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Close">
            <summary>
            Wait for all activity to complete and gracefully close the control connection.
            </summary><remarks>
				<p>FTP communication occurs using two connections, a control connection which is used for logging in and sending commands, and a data connection which is used for transferring files and listings. Use this method to terminate the control connection. This method should be considered the intended means of ending an FTP Session. It differs from the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> method and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Abort.html">Abort</a> method in that the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> method is used to close the data connection during a file transfer while maintaining the control connection and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Abort.html">Abort</a> method is used to abruptly close both connections and release all resources associated with the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component.</p>
				<p>If a transfer is in progress, it will continue until finished, after which a "QUIT" message is sent and the method returns
            after the control connection is closed by the server.
            This method uses Ftp.Invoke(FtpCommand.Quit) and waits until the server has closed the connection. To perform this operation asynchronously,
            use BeginInvoke(FtpCommand.Quit, null).</p>
			</remarks><returns>
            An FtpInvoke object describing the request/response. 
            If connected, the FtpInvoke object will contain the "QUIT" request and the server's goodbye message. If not connected, the
            FtpInvoke object will not have any content.
            </returns>
            <example>The following example demonstrates closing a connection.
				<code lang="VB">
' First, check to see if currently connected
If Ftp1.Connected Then

   ' Close method returns an Invoke object
   Dim invoke As Dart.PowerTCP.Ftp.Invoke

   ' Attempt to close the connection by using the Close method
   Try
      invoke = Ftp1.Close()
   Catch ex As Exception
      ' An error occurred during the close attempt
      Debug.WriteLine(ex.Message)
   End Try

   If Ftp1.Connected Then
      ' For some reason the Close method did not work. Just perform a harsh abort
      Ftp1.Dispose()
      Debug.WriteLine("Unable to QUIT, connection aborted")
   Else
      Debug.WriteLine("Close successful.")
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString())
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text)
   End If

Else
   Debug.WriteLine("You are not connected")
End If        
				</code>
				<code lang="C#">
// First, check to see if currently connected
if(ftp1.Connected)
{
    // Close method returns an Invoke object
    Dart.PowerTCP.Ftp.Invoke invoke;
    
    // Attempt to Close the connection by using the Close method
    try
    {
        invoke = ftp1.Close();
    }
    catch(Exception ex)
    {
        // An error occurred during the close attempt
        Debug.WriteLine(ex.Message);
    }
    if(ftp1.Connected)
    {
        // For some reason the QUIT command did not work, just perform a "harsh" abort
        ftp1.Dispose();
        Debug.WriteLine("Unable to QUIT, connection aborted");
    }
    else
    {
      Debug.WriteLine("Close successful.");
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString());
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text);
    }
}
else{Debug.WriteLine("You are not connected");}     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.ExpandLocalFiles(System.String,System.Boolean)">
            <summary>
            Gets a string array of local file pathnames that match the wildcard search pattern.
            </summary><param name="searchPattern">Wildcard search pattern of files to get; may include a path.</param><param name="subDirectories">true if sub-directories should be recursively searched.</param><returns>A string array of local filenames.</returns><remarks>
				<p>This method is exposed so you can easily test searchPattern syntax for the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> method.</p>
				<p>The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
				<p>This method is useful in several scenarios, for example:</p>
				<ul>
					<li>Testing <i>searchPattern</i> syntax before transferring multiple files using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> or Ftp.BeginPut.</li>
					<li>Retrieving a list of local and remote filenames for synchronization purposes.</li>
					<li>Retrieving a list of local filenames to check for file retrieval success.</li>
				</ul>
			</remarks><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates file synchronization between a local root and a remote root. First, filenames from both the local root and remote root are retrieved using Ftp.ExpandLocalFiles and Ftp.ExpandRemoteFiles. Then extraneous files are deleted from the server. Then Ftp.StoreType is set to Replace to assure that the files on the client will replace those on the server. Finally all files on the local root are put to the server.
				<code lang="VB">
Private Sub SynchronizeFiles(ByVal LocalRoot As String, ByVal RemoteRoot As String)

' This sub demonstrates synchronization of files between a local root
' and a root on the FTP server, to get all files on the FTP Server to
' be the same as on the local root

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get listing of local files
Dim lFiles() As String
lFiles = Ftp1.ExpandLocalFiles(LocalRoot + "*", False)

' Get a listing of remote files
Dim rFiles() As String
rFiles = Ftp1.ExpandRemoteFiles(RemoteRoot + "*", False)

Dim found As Boolean
Dim i As Integer

' Iterate though list of files on the server and compare to local files.
' If it does not exist locally, delete it
For i = 0 To rFiles.Length - 1

   found = False
   Dim j As Integer

   For j = 0 To lFiles.Length - 1

      ' Create FileInfo objects to parse filename
      Dim rFileInfo As New System.IO.FileInfo(rFiles(i))
      Dim lFileInfo As New System.IO.FileInfo(lFiles(i))

      ' Compare file names
      If (rFileInfo.Name = lFileInfo.Name) Then
         found = True
         Exit For
      End If
   Next

   If Not found Then
      Debug.WriteLine("Deleting " + rFiles(i) + " from server")
      Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rFiles(i))
   End If
Next

' Now MPUT all files in LocalRoot and both directories are synched

' First, make sure old files are replaced
Ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace

' Then MPUT
Debug.WriteLine("Uploading all files")
Ftp1.Put(LocalRoot, "*", RemoteRoot, False)
Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched")

' Close the connection
Ftp1.Close()

End Sub  
				</code>      
				<code lang="C#">
private void SynchronizeFiles(string LocalRoot, string RemoteRoot)
{
    // This sub demonstrates synchronization of files between a local root
    // and a root on the FTP server, to get all files on the FTP Server to
    // be the same as on the local root

    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Get list of local files
    string[] lfiles = ftp1.ExpandLocalFiles(LocalRoot + "*", false);
    
    // Get list of remote files
    string[] rfiles = ftp1.ExpandRemoteFiles(RemoteRoot + "*", false);

    bool found;

    // Iterate though list of files on the server and compare to local files.
    // If it does not exist locally, delete it
    for(int i = 0; i &lt; lfiles.Length; i++)
    {
        found = false;
        for(int j = 0; j &lt; lfiles.Length; j++)
        {
            // Compare filenames
            if(new System.IO.FileInfo(rfiles[i]).Name == new System.IO.FileInfo(lfiles[j]).Name)
            {
                found = true;
                break;
            }
        }

        if(!found) // Delete the file from the server.
        {
            Debug.WriteLine("Deleting " + rfiles[i] + " from server");
            ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rfiles[i]);
        }
    }
    
    // Now just MPUT all files in the local root and everything is synched.

    // First, make sure old files are replaced
    ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace;

    // Then MPUT
    Debug.WriteLine("Uploading all files");
    ftp1.Put(LocalRoot, "*", RemoteRoot, false);
    Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched.");

    // Close connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.ExpandRemoteFiles(System.String,System.Boolean)">
            <summary>
            Gets a string array of remote file pathnames that match the wildcard search pattern.
            </summary><param name="searchPattern">Wildcard search pattern of files to get; may include a path.</param><param name="subDirectories">true if sub-directories should be recursively searched.</param><returns>A string array of remote filenames.</returns><remarks>
				<p>This method is exposed so you can easily test searchPattern syntax for the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> method and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> method.</p>
				<p>The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
				<p>This method is useful in several scenarios, for example:</p>
				<ul>
					<li>Testing <i>searchPattern</i> syntax before transferring multiple files using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a> or Ftp.BeginGet.</li>
					<li>Retrieving a list of local and remote filenames for synchronization purposes.</li>
					<li>Retrieving a list of remote filenames to check for file storage success.</li>
				</ul>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates file synchronization between a local root and a remote root. First, filenames from both the local root and remote root are retrieved using Ftp.ExpandLocalFiles and Ftp.ExpandRemoteFiles. Then extraneous files are deleted from the server. Then Ftp.StoreType is set to Replace to assure that the files on the client will replace those on the server. Finally all files on the local root are put to the server.
				<code lang="VB">
Private Sub SynchronizeFiles(ByVal LocalRoot As String, ByVal RemoteRoot As String)

' This sub demonstrates synchronization of files between a local root
' and a root on the FTP server, to get all files on the FTP Server to
' be the same as on the local root

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get listing of local files
Dim lFiles() As String
lFiles = Ftp1.ExpandLocalFiles(LocalRoot + "*", False)

' Get a listing of remote files
Dim rFiles() As String
rFiles = Ftp1.ExpandRemoteFiles(RemoteRoot + "*", False)

Dim found As Boolean
Dim i As Integer

' Iterate though list of files on the server and compare to local files.
' If it does not exist locally, delete it
For i = 0 To rFiles.Length - 1

   found = False
   Dim j As Integer

   For j = 0 To lFiles.Length - 1

      ' Create FileInfo objects to parse filename
      Dim rFileInfo As New System.IO.FileInfo(rFiles(i))
      Dim lFileInfo As New System.IO.FileInfo(lFiles(i))

      ' Compare file names
      If (rFileInfo.Name = lFileInfo.Name) Then
         found = True
         Exit For
      End If
   Next

   If Not found Then
      Debug.WriteLine("Deleting " + rFiles(i) + " from server")
      Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rFiles(i))
   End If
Next

' Now MPUT all files in LocalRoot and both directories are synched

' First, make sure old files are replaced
Ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace

' Then MPUT
Debug.WriteLine("Uploading all files")
Ftp1.Put(LocalRoot, "*", RemoteRoot, False)
Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched")

' Close the connection
Ftp1.Close()

End Sub  
				</code>      
				<code lang="C#">
private void SynchronizeFiles(string LocalRoot, string RemoteRoot)
{
    // This sub demonstrates synchronization of files between a local root
    // and a root on the FTP server, to get all files on the FTP Server to
    // be the same as on the local root

    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Get list of local files
    string[] lfiles = ftp1.ExpandLocalFiles(LocalRoot + "*", false);
    
    // Get list of remote files
    string[] rfiles = ftp1.ExpandRemoteFiles(RemoteRoot + "*", false);

    bool found;

    // Iterate though list of files on the server and compare to local files.
    // If it does not exist locally, delete it
    for(int i = 0; i &lt; lfiles.Length; i++)
    {
        found = false;
        for(int j = 0; j &lt; lfiles.Length; j++)
        {
            // Compare filenames
            if(new System.IO.FileInfo(rfiles[i]).Name == new System.IO.FileInfo(lfiles[j]).Name)
            {
                found = true;
                break;
            }
        }

        if(!found) // Delete the file from the server.
        {
            Debug.WriteLine("Deleting " + rfiles[i] + " from server");
            ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rfiles[i]);
        }
    }
    
    // Now just MPUT all files in the local root and everything is synched.

    // First, make sure old files are replaced
    ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace;

    // Then MPUT
    Debug.WriteLine("Uploading all files");
    ftp1.Put(LocalRoot, "*", RemoteRoot, false);
    Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched.");

    // Close connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.ParsePathPattern(System.String,System.String@,System.String@,System.Boolean,System.Boolean)">
            <summary>
            Creates a normalized path and pattern out of a single string
            </summary>
            <param name="searchPattern"></param>
            <param name="path">NEVER a trailing "/"</param>
            <param name="pattern"></param>
            <param name="local"></param>
            <param name="subDirectories"></param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Get(System.String,System.String)">
            <summary>
				<ign>Get</ign> a single file from the server synchronously.
            </summary><param name="remoteFileName">Source pathname of the file on the server.</param><param name="localFileName">Local destination pathname for the file.</param><remarks>
				<p>This method synchronously gets a file from the server. An <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object is returned from the method, containing data about the transfer such as local and remote filenames and amount of bytes transferred.</p>
				<p>For more information on synchronous file transfer, see the topic Retrieving Files Synchronously Overview.</p>
				<p>To get a file asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>.</p>
			</remarks><returns>An FtpFile object that describes the transfer.</returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example> The following example demonstrates a simple Get.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "myfile.txt"

' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to get file " + FileToGet)

 ' Get the file, saving it to the app path with the same filename
Try
   file = Ftp1.Get(FileToGet, Application.StartupPath + "\" + FileToGet)
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Success! Display info about the file.
Debug.WriteLine("Successfully retrieved file " + file.RemoteFileName)    

' Close the connection
Ftp1.Close()    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "file.txt";

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to get file " + FileToGet);

// Get the file, saving it to the application path with the same filename.
try
{
    file = ftp1.Get(FileToGet, Application.StartupPath + "\\" + FileToGet);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file.
Debug.WriteLine("Successfully retrieved file " + file.RemoteFileName);

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Get(System.String,System.IO.Stream)">
            <summary>
				<ign>Get</ign> a file from the FTP server synchronously, storing the retrieved data in a Stream object.
            </summary><remarks>
				<p>This method synchronously gets a file from the server as a Stream object.
				Standard usage would involve first creating a stream, then passing it into the <b>Ftp.Get</b> method, then using the stream within your application. An <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> object is returned from the method, containing data about the transfer such as remote filename and amount of bytes transferred.
				</p>
				<p>For more information on synchronous stream transfer, see the topic Transferring Streams Synchronously Overview .</p>
				<p>To get a file as a Stream object asynchronously use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> method.</p>
				<p>This method
            differs from the Ftp.Get(String, Int64) method in that Ftp.Get(String, Int64) is used to read directly from the open data connection.</p>
			</remarks><param name="remoteFileName">Source pathname of the file on the server.</param><param name="localStream">Initialized destination stream for the file.</param><returns>An FtpFile object that describes the transfer.</returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ObjectDisposedException">Cannot access a closed stream.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates how to get a file with the result returned as a stream to use within the application.  In this example, the file will be displayed in a TextBox, so an ASCII file would work best for this example.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "file1.txt"

' File will be returned as a stream. Create the stream to pass into the method.
Dim stream1 As New System.IO.MemoryStream()

' Get returns an FtpFile object describing the file. Create the object.
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to get file " + FileToGet)

' Get the file, passing in the MemoryStream
Try
   file = Ftp1.Get(FileToGet, stream1)
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Success! Create new byte array to read data into.
Dim data(stream1.Length) As Byte

' Attempt to read from stream
stream1.Position = 0
stream1.Read(data, 0, stream1.Length)

' Display data in TextBox
TextBox1.Text = System.Text.Encoding.ASCII.GetString(data)

' Close the connection
Ftp1.Close()        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "file.txt";

// File will be returned as a stream. Create the stream to pass into the method.
System.IO.MemoryStream stream1 = new System.IO.MemoryStream();

// Get returns an FtpFile object describing the file. Create the object.
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to get file " + FileToGet);

// Get the file, passing in the MemoryStream
try
{
    file = ftp1.Get(FileToGet, stream1);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Create new byte array to read data into.
byte[] data = new byte[stream1.Length];

// Attempt to read from stream
stream1.Position = 0;
stream1.Read(data, 0, (int)stream1.Length);

// Display data in a TextBox
textBox1.Text = System.Text.Encoding.ASCII.GetString(data);

// Close the connection
ftp1.Close();     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Get(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
				<ign>Get</ign> multiple files from the server synchronously.
            </summary><param name="remoteRoot">Source root directory on the server.</param><param name="searchPattern">Wildcard search pattern of files to get; may include a path.</param><param name="localRoot">Destination root directory on the client.</param><param name="subDirectories">true if sub-directories should be recursively copied.</param><param name="synchronize">true if files of the same size that already exist locally should not be copied.</param><returns>An array of FtpFile objects that describe the transfer.</returns><remarks>
				<p>This method gets multiple files from the server synchronously. An array of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> objects are returned from the method, containing data about the transfer such as local and remote filenames and amount of bytes transferred.</p>
				<p>To get multiple files asynchronously use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>.</p>
				<p>If <i>localRoot</i> exists, the files will be saved to the directory path specified. If it does not exist, the directory will be created.</p>
				<p>The <b>Ftp.Get</b> method gets all files specified in <i>remoteRoot</i> (and subdirectories if <i>subDirectories</i> is true) that meet the wildcard requirement specified in <i>searchPattern</i>. The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates how to retrieve multiple files using the Get method.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim RemoteRoot As String = "directory1"

' When using the Get method specifying a directory (MGET) an array of FtpFiles is returned
Dim files() As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to MGET all files in " + RemoteRoot)

' Get files. Files will be saved in the application path\newfiles.
Try
   files = Ftp1.Get(RemoteRoot, "*", Application.StartupPath + "\newfiles", False)
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Success! Iterate through the FtpFile object array and display data about each file retrieved.
Dim file As Dart.PowerTCP.Ftp.FtpFile
For Each file In files
   Debug.WriteLine("Successfully retrieved file " + file.RemoteFileName)
Next        

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string RemoteRoot = "directory1";

// When using the Get method specifying a directory (MGET) an array of FtpFiles is returned
Dart.PowerTCP.Ftp.FtpFile[] files;

Debug.WriteLine("Attempting to MGET all files in " + RemoteRoot);

// Get files. Files will be saved in application path\newfiles.
try
{
    files = ftp1.Get(RemoteRoot, "*", Application.StartupPath + "\\newfiles", false);
}
catch(Exception ex)
{
    Debug.WriteLine(ex.Message);
    return;
}

// Success! Iterate through the FtpFile object array and display data about each file retrieved.
foreach(Dart.PowerTCP.Ftp.FtpFile file in files)
    Debug.WriteLine("Successfully retrieved file " + file.RemoteFileName);

// Close the connection
ftp1.Close();     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Get(System.String,System.Int64)">
            <summary>
            Synchronously get a stream that can be used to read the FTP data connection.
            </summary><param name="remoteFileName">Source pathname of the file on the server.</param><param name="restartMarker">Restart location within file on the server.</param><returns>Instance of a SegmentedStream.</returns><remarks>
				<p>This method synchronously gets a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> that can be used to read the FTP data connection. Simply call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~Read.html">Read</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~BeginRead.html">BeginRead</a> to read directly from the data connection.</p>
				<p>Since there is no local file to test for an automatic restart, you can specify a restart marker location within the
            remote file, and the stream will start at that byte offset location within the remote file.</p>
				<p>To read from the data connection asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>.</p>
				<p>This method differs from the Ftp.Get(String, Stream) method in that Ftp.Get(String, Stream) is used to retrieve a file as a filled stream.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument is null</exception>
            <example>The following example demonstrates reading from the data connection. In this example, a file of fixed records is read into a ListView. The file read is assumed to have records delimited by CRLF and fields delimited by commas.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set up ListView

' Show gridlines
ListView1.GridLines = True

' Set view to details
ListView1.View = View.Details

' Use Get to return a SegmentedStream. This is a data stream that can be used to read the data connection.
Dim stream1 As Dart.PowerTCP.Ftp.SegmentedStream

' Open a stream
Try
   stream1 = Ftp1.Get("records.txt", 0)
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Got this far, assume success
Dim offset As Integer = 0

' Keep reading until the end of the stream.
While (stream1.Available &gt; 0)

   ' This variable is to write column headings on the first pass
   Dim firstline As Boolean = False

   ' Check offset to determine if this is the first line
   If (offset = 0) Then
      firstline = True
   Else
      firstline = False
   End If

   ' Create a byte array for this file no line will exceed 100 bytes
   ' so it is safe to declare a fixed size.
   Dim line(100) As Byte

   ' Create delimiter char[]. Data will be read from the stream until
   ' this is encountered
   Dim d() As Byte = {13, 10}

   ' Read a line
   offset = stream1.Read(line, d)

   
   ' The line should have comma-delimited fields. Split the line.
   Dim p() As Char = {","}

   Dim fields() As String
   fields = System.Text.Encoding.ASCII.GetString(line).Split(p)

   ' Check to see if it is the first line (the first line contains column
   ' headings) and create headings on the list view.
   
   If (firstline) Then
      Dim i As Integer
      For i = 0 To fields.Length - 1
         ListView1.Columns.Add(fields(i), 100, HorizontalAlignment.Left)
      Next
   Else
      ' If it is not the first line, simply add a new data row
      ListView1.Items.Add(New ListViewItem(fields))
   End If
End While

' Close the stream
stream1.Close()

' Close the connection
Ftp1.Close()
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set up ListView

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Use Get to return a SegmentedStream. This is a data stream that can be used to read the data connection.
Dart.PowerTCP.Ftp.SegmentedStream stream1;

// Open a stream
try
{
    stream1 = ftp1.Get("records.txt", 0);
}
catch(Exception ex)
{
    Debug.WriteLine(ex.Message);
    return;
}

// Got this far, assume success.
int offset = 0;

// Keep reading until the end of the stream.
while (stream1.Available &gt; 0)
{

    // This is to write column headings on the first pass
    bool firstline = false;
    
    // Check offset to determine if this is the first line
    if(offset == 0)
        firstline = true;
    else
        firstline = false;
    
    // Create a byte array, for this file no line will exceed 100 bytes
    // so it is safe to declare a fixed size.
    byte[] line = new byte[100];

    // Create delimiter char[]. Data will be read from the stream until
    // this is encountered
    byte [] d = {13, 10};

    // Read a line
    offset = stream1.Read(line, d);
    
    // The line should have comma-delimited fields. Split the line.
    char[] p = {','};
    string[] fields = System.Text.Encoding.ASCII.GetString(line).Split(p);

    // Check to see if it is the first line (the first line contains column
    // headings) and create headings on the list view.
    if(firstline)
    {
        for(int i = 0; i &lt; fields.Length; i++)
            listView1.Columns.Add(fields[i], 100, System.Windows.Forms.HorizontalAlignment.Left);
    }
        // If it is not firstline, simply create a new data row.
    else
    {
        listView1.Items.Add(new ListViewItem(fields));
    }
}

// Close the stream
stream1.Close();

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.GetDirectory">
            <summary>
            Gets the server's working directory.
            </summary><returns>
            A string representing the working directory.
            </returns><remarks>
				<p>This method uses Ftp.Invoke(FtpCommand.PrintDir) and parses the directory from the response. To perform this operation asynchronously,
            use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> method and parse the response.</p>
				<p>This method is helpful for retrieving the working directory. The benefit of using <b>Ftp.GetDirectory</b> over using Invoke(FtpCommand.PrintDir) is that when using <b>Ftp.GetDirectory,</b> the response returned is a parsed string. For example, if the current directory is "/home/mydir", using the <b>Ftp.GetDirectory</b> method would return "home/mydir" where the Invoke(FtpCommand.PrintDir) method might return something like "The current directory is home/mydir".</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates code that might be used as FTP client login. It retrieves and displays the root listing, and gets and displays the current directory.
				<code lang="VB"> 
Private Sub Login()

   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFTPServer"
   Ftp1.Username = "blah" 
   Ftp1.Password = "mypass"

   ' Retrieve file list. Listing details will be contained in the Listing Object
   Dim list As Dart.PowerTCP.Ftp.Listing
   list = Ftp1.List("", True)

   ' Begin setting up the ListView diplay

   ' Show gridlines.
   ListView1.GridLines = True

   ' Set View to Details
   ListView1.View = View.Details

   ' Add column headings for file name, size, and date.
   ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
   ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
   ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

   ' Iterate through the listing, adding a row to the ListBox for each
   Dim le As Dart.PowerTCP.Ftp.ListEntry
   For Each le In list

      ' Display files only
      If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then

         Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      End If

   Next

   ' Get current directory
   Label1.Text = "Current directory " + Ftp1.GetDirectory()

End Sub    
				</code>
				<code lang="C#">
private void Login()
{
    // Set server and user properties. This will allow us to call other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Retrieve file list. Listing details will be contained in
    // the Listing Object
    Dart.PowerTCP.Ftp.Listing list = ftp1.List("", true);
    
    // Begin setting up the ListView diplay

    // Show gridlines.
    listView1.GridLines = true;

    // Set View to Details
    listView1.View = View.Details;

    // Add column headings for file name, size, and date.
    listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
    
    // Iterate through the listing, adding a row to the ListBox for each
    foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
    {
        // Display files only
        if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
        {
            string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
            listView1.Items.Add(new ListViewItem(cols));
        }
    }

    // Get current directory
    label1.Text = "Current directory " + ftp1.GetDirectory();
}     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.GetSize(System.String)">
            <summary>
            Gets the size of any file.
            </summary><remarks>
				<p>This method uses Invoke(FtpCommand.Size) and parses the size from the response. To perform this operation asynchronously,
            use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> method and parse the response.</p>
				<p>
					<b>WARNING</b>: Under NT 4.0, when the SIZE command is followed by the DELE command (on the same file), unexpected results may occur.</p>
				<p>This method is helpful for retrieving the actual size of any file. This is useful because often the size reported by the server will be less than the actual file size because some characters are not taken into account in the listing. This method is also helpful because size is returned as a parsed integer, allowing comparison to take place such as:</p>
				<code>
if(ftp1.GetSize("myfile.txt") &gt; 10)
	MessageBox.Show("This file is bigger than 10 bytes.");
				</code>
			</remarks><returns>
            An integer representing the number of bytes that would be sent if the file were to be retrieved. This could be larger than
            the actual file size (due to CR/LF encoding for type ASCII files).
            </returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates use of the <b>GetSize</b> method to get the actual file size from the server.
				<code lang="VB"> 
' Sometimes the file size in the listing reported by the FTP Server
' will differ from the actual file size (because characters such as CRLF
' are not taken into account). For this reason, GetSize may be useful as
' it issues the SIZE command which (if supported) returns the actual file size.

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get full listing
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*.*", True)

' Iterate through all of the Entries
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Debug.WriteLine("Filename: " + le.Name)

      ' Display the file size reported by the FTP server in the listing
      Debug.WriteLine("Size reported by list: " + le.Size.ToString())

      ' Get and report the actual file size.
      Debug.WriteLine("Actual file size: " + Ftp1.GetSize(le.Name).ToString())
   End If

Next        
				</code>
				<code lang="C#">
/* Sometimes the file size in the listing reported by the FTP Server
 * will differ from the actual file size (because characters such as CRLF
 * are not taken into account). For this reason, GetSize may be useful as
 * it issues the SIZE command which (if supported) returns the actual file size.
*/

// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get full listing
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*.*", true);

// Iterate through all of the Entries
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
   if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
   {
       Debug.WriteLine("Filename: " + le.Name);

       // Display the file size reported by the FTP server in the listing
       Debug.WriteLine("Size reported by list: " + le.Size.ToString());

       // Get and report the actual file size.
       Debug.WriteLine("Actual file size: " + ftp1.GetSize(le.Name));
   }
} 
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Invoke(Dart.PowerTCP.Ftp.FtpCommand,System.String)">
            <summary>
				<ign>Send</ign> an FTP command (with a command modifier) synchronously. 
            </summary><param name="command">FTP command to send.</param><param name="modifier">Command modifier appended to command.</param><remarks>
				<p>Use this method to send low-level FTP commands to your server. See the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~SendCommand.html">SendCommand</a> method for an even simpler technique.</p>
				<p>To invoke a command asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a>.</p>
				<p>For more information about synchronously sending commands, see the topic Sending Commands Synchronously.</p>
				<p>This method sends a command with a <b>modifier</b> to the server (ex HELP or CWD).  For example, use this method if you want to send a synchronous "HELP" request to the server. FtpCommand.Help would be used as the <i>command</i> parameter and the item you wish to receive help on would be used as the <i>modifier</i> parameter. This method differs from the Invoke(<ign>FtpCommand</ign>) method in that the Invoke(<ign>FtpCommand</ign>) method is used to send commands that DO NOT require an additional parameter (for example, NOOP or PWD).</p>
				<p>If you wish to send your own command, use FtpCommand.Null, and specify your entire command as the <i>modifier</i>. An example would be:</p>
				<code>
				 Invoke(FtpCommand.Null, "MYCOMMAND file1.txt").<br/>
					<br/>
				</code>
			</remarks><returns>
            An FtpInvoke object describing the request/response. 
            </returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates using Invoke to send a custom command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke

' Use Invoke(FtpCommand.Null) to send a proprietary command

Try
   invoke = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "MYFILECOMMAND file1.txt")
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success. Print response.
Debug.WriteLine("Response from server : " + invoke.Response.Text)
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Use Invoke(FtpCommand.Null) to send a proprietary command
try
{
   Dart.PowerTCP.Ftp.Invoke invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "MYFILECOMMAND file1.txt");
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}
    
// Success. Print response
Debug.WriteLine("Response from server : " + invoke.Response.Text);

// Close connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Invoke(Dart.PowerTCP.Ftp.FtpCommand)">
            <summary>
				<ign>Send</ign> an FTP command (without a command modifier) synchronously.
            </summary><param name="command">FTP command to send.</param><remarks>
				<p>Use this method to send low-level FTP <b>commands</b> to your server.  See the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~SendCommand.html">SendCommand</a> method for an even simpler technique.</p>
				<p>To invoke a <b>command</b> asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a>.</p>
				<p>For more information about synchronously sending commands, see the topic Sending Commands Synchronously.</p>
				<p>This method sends a <b>command</b> WITHOUT a modifier to the server (ex, NOOP or PWD). For example, use this method if you want to send an asynchronous "NOOP" request to the server. FtpCommand.NoOp would be used as the <i>command</i> parameter. This method differs from the Ftp.Invoke(<ign>FtpCommand</ign>, String) method in that the Ftp.Invoke(<ign>FtpCommand</ign>, String) method is used to send <b>commands</b> that require an additional parameter (for example, HELP or CWD).</p>
				<p>If you wish to send your own <b>command,</b> see Invoke(<ign>FtpCommand</ign>, String).</p>
			</remarks><returns>
             An FtpInvoke object describing the request/response.
            </returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates using Invoke to send a command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.Ftp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.List(System.String,System.Boolean)">
            <summary>
            Retrieve a file listing from the server synchronously.
            </summary><param name="searchPattern">Filename for the listing, which may include wildcards.</param><param name="full">true for a full listing, or false for a named list.</param><returns>Instance of a Listing object.</returns><remarks>
				<p>This method returns a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object, which represents an FTP listing.</p>
				<p>Specify a <b>full</b> listing for complete listing information, but if the server's listing format is not recognized as
            standard UNIX or DOS, you will have to parse out each line yourself. For an example on how to do this, see the topic Parsing An Unknown <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> Type. Use an abbreviated name list if you only need filename
            information.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Put(System.String,System.String)">
            <summary>
            Store a single file to the server synchronously.
            </summary><param name="localFileName">Source pathname of the local file to transfer.</param><param name="remoteFileName">Remote destination pathname for the file on the server.</param><returns>An FtpFile object that describes the transfer.</returns><remarks>
				<p>Use this method to synchronously store a single file to the server. To asynchronously store a file, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>.</p>
				<p>For more information on synchronous file transfer, see the topic Storing Files Synchronously Overview.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Put(System.IO.Stream,System.String)">
            <summary>
            Synchronously store a stream on the server as a file.
            </summary><param name="localStream">Source stream for the file.</param><param name="remoteFileName">Remote destination pathname for the file on the server.</param><returns>FtpFile object that describes the transfer.</returns><remarks>
				<p>Use this method to synchronously store a file to the server using a stream. To do this asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>.</p>
				<p>For more information on synchronous stream transfer, see the topic Transferring Streams Synchronously Overview.</p>
				<p>This method differs from the Ftp.Put(String, Int64) method in that Ftp.Put(String, Int64) is used to write to the open data connection.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ObjectDisposedException">Cannot access a closed stream.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>The following example demonstrates how to synchronously store a stream as a file on the server.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Create a MemoryStream to hold data to be stored on the server
Dim stream1 As New System.IO.MemoryStream()

' Create a byte array to hold data to be written to the stream.
Dim data() As Byte

' Fill the byte array with some text
data = System.Text.ASCIIEncoding.ASCII.GetBytes("Data to be stored on the FTP server.")

' Write to the stream
stream1.Write(data, 0, data.Length)

' Put method returns an FtpFile object containing information about the file 
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store stream")

' Store the data on the server under the name "stream.txt"
Try
   file = Ftp1.Put(stream1, "stream.txt")
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Success! Display information about the file on the server
Debug.WriteLine("Successfully stored stream. Filename on server: " + file.RemoteFileName)

' Close the connection
Ftp1.Close()        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create a MemoryStream to hold data to be stored on the server
System.IO.MemoryStream stream1 = new System.IO.MemoryStream();

// Create a byte array containing the data to be written to the stream
byte[] data = System.Text.Encoding.ASCII.GetBytes("Data to be stored on the FTP server.");

// Write to the stream
stream1.Write(data, 0, data.Length);

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store stream");

// Store the data on the server under the name "stream.txt"
try
{
   file = ftp1.Put(stream1, "stream.txt");
}
catch(Exception ex)
{
   Debug.WriteLine(ex.Message);
   return;
}

// Success! Display information about the file on the server.
Debug.WriteLine("Successfully Put stream. Filename on server: " + file.RemoteFileName);

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Put(System.String,System.String,System.String,System.Boolean,System.Boolean)">
            <summary>
            Synchronously put multiple files to the server.
            </summary><param name="localRoot">Source root directory on the client.</param><param name="searchPattern">Wildcard search pattern of files to put; may include a path.</param><param name="remoteRoot">Destination root directory on the server.</param><param name="subDirectories">true if sub-directories should be recursively copied.</param><param name="synchronize">true if files of the same size that already exist remotely should not be copied.</param><returns>An array of FtpFile objects that describe the transfer.</returns><remarks>
				<p>Use this method to synchronously put multiple files to the server. To put multiple files asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>.</p>
				<p>The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Get all files in the directory.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Get all files in the directory that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Get all files in the directory that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Get all files in the directory that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Get all files in the directory that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
            <example>The following example demonstrates how to synchronously store multiple files using the Put method.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim DirToStore As String = "c:\FtpTest\New"

' When using the Put method specifying a directory (MPUT) an array of FtpFiles is returned upon success
 Dim files() As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to MPUT all files in directory " + DirToStore)

Try
   ' Attempt to store the files to the server's working directory
   files = Ftp1.Put(DirToStore, "*", "", False)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Return
End Try

' Success! Display info about the files transferred.
Dim file As Dart.PowerTCP.Ftp.FtpFile
For Each file In files
   Debug.WriteLine(file.LocalFileName + " successfully stored.")
Next

' Close the connection
Ftp1.Close()        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string DirToStore = "C:\\FtpTest";

// When using the Put method specifying a directory (MPUT) an array of FtpFiles is returned upon success
Dart.PowerTCP.Ftp.FtpFile[] files;

Debug.WriteLine("Attempting to MPUT all files in directory " + DirToStore);

try
{
    // Attempt to store the files to the server's working directory
    files =  ftp1.Put(DirToStore, "*", "", false);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the files transferred
foreach(Dart.PowerTCP.Ftp.FtpFile file in files)
    Debug.WriteLine(file.LocalFileName + " successfully stored");

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Put(System.String,System.Int64)">
            <summary>
            Synchronously get a stream that can be used to write to the data connection.
            </summary><param name="remoteFileName">Remote destination pathname for the file on the server.</param><param name="restartMarker">Restart location within file on the server.</param><returns>Instance of a SegmentedStream.</returns><remarks>
				<p>This method will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object which can be used to write to the data connection. Simply call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream~Write.html">Write</a> or SegmentedStream.BeginWrite to write directly to the data stream.</p>
				<p>Since there is no local file to test for an automatic restart, you can specify a restart marker location within the
            remote file, and the stream will start writing at that byte offset location within the remote file.</p>
				<p>To asynchronously get a stream that can be used to write to the FTP data connection use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>.</p>
				<p>This method differs from the Ftp.Put(String, Stream) method in that Ftp.Put(String, Stream) is used to retrieve a file as a filled stream.
				.</p>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception>
            <example>This example demonstrates writing data to the data connection.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' When writing to the data connection, the Put method returns a SegmentedStream object
Dim stream1 As Dart.PowerTCP.Ftp.SegmentedStream

' Open data connection
Try
   stream1 = Ftp1.Put("myfile.txt", 0)
Catch ex As Exception
   Debug.WriteLine(ex.Message)
   Return
End Try

' Success. Write some data to the data stream
stream1.Write("Some data. ")

' Write some more data
stream1.Write("Some more data. ")

' Write one more time
stream1.Write("This is all of the data. ")

' Close the stream 
stream1.Close()

' Close the connection
Ftp1.Close()

'
' Retrieve and open the file "myfile.txt". It should contain:
'    "Some data. Some more data. This is all of the data." 
'

				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// When writing to the data connection, the Put method returns a SegmentedStream object
Dart.PowerTCP.Ftp.SegmentedStream stream1;

// Open data connection
try
{
   stream1 = ftp1.Put("myfile.txt", 0);
}
catch(Exception ex)
{
   Debug.WriteLine(ex.Message);
   return;
}

// Success. Write some data to the data stream
stream1.Write("Some data. ");

// Write some more data
stream1.Write("Some more data. ");

// Write one more time
stream1.Write("This is all of the data. ");

// Close the stream
stream1.Close();

// Close the connection
ftp1.Close();
            
/*
Retrieve and open the file "myfile.txt". It should contain:
    "Some data. Some more data. This is all of the data." 
*/
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.RawConnect(System.String,System.Int32)">
            <summary>
				Optional method you can use if you need to connect to an FTP server that expects a login sequence that is non-standard.
			</summary><param name="server">FTP proxy or destination server name.</param><param name="serverPort">FTP port (usually 21)</param><returns>Initial greeting from the proxy or server.</returns><remarks>
				<p>
					<b>Warning: </b> Do not use this method as the standard means for connecting to an FTP server.
				Usually, you will simply set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a> property to specify what server you will
				be using. There are cases, however, where you may want to control the login sequence. Use this method
				to code any desired login sequence. This method does not have an asynchronous counterpart, so you will
				need to create your own delegate if you wish to invoke this asynchronously.</p>
			</remarks>
            <example>The following example demonstrates logging into an FTP server that has a nonstandard login sequence.
				<code lang="VB">
' This demonstrates logging into a server that has a nonstandard
' login sequence, for example this server expects these commands
' to log in
' USER username
' PASS password
' GROUP groupname

Try
   Ftp1.RawConnect("MyFtpServer", 21)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Received greeting OK. Issue USER (Be sure to use FtpCommand.Null
' and define entire command as second parameter).
Try
   Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "USER blah")
Catch ex As Exception
    Debug.WriteLine("Error: " + ex.Message)
    Exit Sub
End Try

' Issued USER OK. Try PASS
Try
   Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "PASS mypass")
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Issued PASS OK. Try GROUP (the non-standard command).
Try
   Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "GROUP Admin")
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Logged in, try a method.
 Ftp1.Get("maladroit.txt", "C:\\weezer\\maladroit.txt")
				</code>
				<code lang="C#">
// This demonstrates logging into a server that has a nonstandard
// login sequence, for example this server expects these commands
// to log in
// USER username
// PASS password
// GROUP groupname

try
{
    ftp1.RawConnect("MyFtpServer", 21);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Received greeting OK. Issue USER (Be sure to use FtpCommand.Null
// and define entire command as second parameter).

try
{
    ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "USER blah");
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Issued USER OK. Try PASS
try
{
    ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "PASS mypass");
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}
            
// Issued PASS OK. Try GROUP
try
{
    ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "GROUP Admin");
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Logged in, try a method.
ftp1.Get("maladroit.txt", "C:\\weezer\\maladroit.txt");
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Delete(System.String,System.Boolean,System.Boolean)">
            <summary>
           Deletes a file or directory tree synchronously.
            </summary><param name="searchPattern">May be a pathname (with or without wildcards) or a directory (indicated by a trailing slash).</param><param name="removeEmptyDirectories">Use true to indicate that directories that do not contain files should be removed.</param><param name="subDirectories">Use true to indicate sub-directories should be searched for files to delete.</param><returns>An array of FtpFile objects that describe the deletion.</returns><remarks>
				<p>This method deletes a file, multiple files, or directories from the server synchronously. An array of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile.html">FtpFile</a> objects are returned from the method, containing data about files deleted. The only data contained within these objects should be the File.RemoteFileName, containing the names of the files deleted, and the File.Status, which should equal DeleteCompleted. All other members of this object should be at their default values.</p>
				<p>This method provides a high-level alternative to Ftp.Invoke(Command.Delete). It also expands upon this method by providing support for the deletion of multiple files and directory trees with a single method call.</p>
				<p>An empty return array indicates no deletes were attempted.</p>
				<p>To perform this method asynchronously, see <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginDelete.html">BeginDelete</a>.</p>
				<p>Use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~AbortTransfer.html">AbortTransfer</a> method to abort the deletion process while maintaining the control connection.</p>
				<p>The following table shows some examples of wildcards:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Wildcard</th>
							<th width="50%">Meaning</th>
						</tr>
						<tr valign="top">
							<td width="50%">*</td>
							<td width="50%">Delete all files in the directory (or subdirectories).</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that have a "." in the filename.</td>
						</tr>
						<tr valign="top">
							<td width="50%">*.txt</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that end with ".txt".</td>
						</tr>
						<tr valign="top">
							<td width="50%">Test*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that start with "Test".</td>
						</tr>
						<tr valign="top">
							<td width="50%">*Test*</td>
							<td width="50%">Delete all files in the directory (or subdirectories) that contain "Test" in the filename.</td>
						</tr>
					</table>
				</div>
			</remarks><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Delete(System.String)">
            <summary>
           Deletes a file.
            </summary><param name="fileName">Specifies the file to delete.</param><returns>An FtpFile instance that describe the deletion.</returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception><exception cref="T:System.IO.IOException">The filename, directory name, or volume label syntax is incorrect.</exception><exception cref="T:System.ArgumentException">A required argument contains invalid characters, is empty, or contains only white spaces.</exception><exception cref="T:System.NotSupportedException">The path format is not supported.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.Rename(System.String,System.String)">
            <summary>
				<ign>Rename</ign> a file on the server.
            </summary><param name="fromFileName">Current filename.</param><param name="toFileName">Desired filename.</param><remarks>
				<p>To rename a file using the FTP protocol, it is necessary to send the command RNFR <i>oldfilename</i>, check the response, then send the command
				RNTO <i>newfilename</i>.
				This method encapsulates the RNFR and RNTO commands in a single method call</p>
			</remarks><returns>
            An FtpInvoke object describing the request/response.
            </returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
            <example>The following example demonstrates a simple rename.
				<code lang="VB">
' Create Invoke object, which will contain request/response data
Dim invoke As Dart.PowerTCP.Ftp.Invoke

' Call Rename. Invoke object will contain request/response data
Try
   invoke = ftp1.Rename("aaa.txt", "zzz.txt")
' ProtocolException thrown if bad response received from server
Catch FTPEx As Dart.PowerTCP.Ftp.ProtocolException
   Debug.WriteLine("Rename unsuccessful")
   Debug.WriteLine(FtpEx.ToString())
   Exit Sub
End Try  

' If it gets here, Rename was successful
Debug.WriteLine("Rename successful")

' Request sent and Response received
Debug.WriteLine("Response/response " + invoke.ToString())

				</code>
				<code lang="C#">
//Create Invoke object which will contain request/response data
Dart.PowerTCP.Ftp.Invoke invoke;

// Call Rename
try
{
    invoke = ftp1.Rename("aaa.txt", "zzz.txt");
}
// ProtocolException thrown if bad response received from server
catch(Dart.PowerTCP.Ftp.ProtocolException FTPex)
{
    Debug.WriteLine("Rename unsuccessful");
    Debug.WriteLine(FTPEx.ToString());
    return;
}

// If it gets here, Rename was successful
Debug.WriteLine("Rename successful");

// Request sent and response received
Debug.WriteLine("Response/response " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.SendCommand(System.String)">
            <summary>
				<ign>Send</ign> an FTP command synchronously.
            </summary><param name="command">FTP command to send. No trailing "\r\n" is necessary.</param><remarks>
				<p>Use this method to send low-level FTP <b>commands</b> to your server. Internally, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> method is used.</p>
				<p>To invoke a <b>command</b> asynchronously, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a>.</p>
				<p>For more information about synchronously sending commands, see the topic Sending Commands Synchronously.</p>
				<p>This method is the simplest way to send a <b>command</b> to the server (ex HELP or CWD).  For example, use this method if you want to send a synchronous "HELP" request to the server.</p>
			</remarks><returns>
            An FtpInvoke object describing the request/response. 
            </returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad FTP response from server.</exception><exception cref="T:System.Net.Sockets.SocketException">The requested address is not valid in its context (possibly Ftp.Server property is not set or is invalid).</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.BlockingList(System.String,System.Boolean)">
            <summary>
            BlockingList is not aborted by AbortTransfer(). Too many issues for such small payback.
            </summary>
            <param name="searchPattern"></param>
            <param name="full"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.CheckForException">
            <summary>
            Called during lengthy operations to see if an Exception has been encountered (for any reason)
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Ftp.IsMatch(System.String,System.String)">
            <summary>
            Returns true if the filename satisfies the pattern provided. Supports * and $.
            </summary>
            <param name="fileName"></param>
            <param name="pattern"></param>
            <returns></returns>
            
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Certificate">
            <summary>
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> object representing the certificate to use for optional client-side authentication.
			</summary><value>
				A Certificate object representing the certificate to use for optional client-side authentication; null otherwise.
			</value><remarks>
				<p>If a secure server requests a certificate from the client for client-authentication, the value of this 
				property is sent to the server.</p>
				<p>Typically this property can either be set before attempting to connect or from within the CertificateRequested
				event which is raised when the server requests a certificate from the client.</p>
			</remarks>
            <example>The following example demonstrates assigning a certificate for client certificate authentication.
				<code lang="VB">
    Private Sub Ftp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.CertificateRequested
        'The server has requested a certificate from the client
        'There is a certificate in the CurrentUser/MY store that we want to use
        'Here it is found and the Certificate property is set to it
        Dim store As CertificateStore = New CertificateStore(CertificateStoreLocation.CurrentUser, CertificateStoreName.My)
        Dim c As Certificate
        For Each c In store
            If (c.IssuerName = "PowerTCPTest-CA" And c.IssuedTo = "PowerTCPTest") Then Ftp1.Certificate = c
        Next
    End Sub
				</code>
				<code lang="C#">
private void ftp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested a certificate from the client
	//There is a certificate in the CurrentUser/MY store that we want to use
	//Here it is found and the Certificate property is set to it
	CertificateStore store = new CertificateStore(CertificateStoreLocation.CurrentUser, CertificateStoreName.My);
	foreach (Certificate c in store)
	{
		if (c.IssuerName == "PowerTCPTest-CA" &amp;&amp; c.IssuedTo == "PowerTCPTest")
			ftp1.Certificate = c;
	}
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.CertificateReceived">
            <summary>
				This event is raised when a certificate has been received to be authenticated.
			</summary><remarks>
				<p>The <b>CertificateReceived</b> event is raised when a certificate has been received from
				a secure server.
				A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.html">CertificateReceivedEventArgs</a> object is passed into the event handler, containing
				information required to determine the validity of the certificate.
				If the certificate is determined to be invalid (if any of the properties <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidDate.html">ValidDate</a>,
				<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidName.html">ValidName</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~TrustedRoot.html">TrustedRoot</a> are false) the certificate is 
				rejected. <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a> is false to signify this. Set <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a>
				to true to override this and accept the certificate.
				</p>
			</remarks>
            <example>The following example demonstrates receiving a remote certificate.
				<code lang="VB">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        'Use Implicit Secure FTP
        Ftp1.Security = Security.Implicit

        'Do not ignore problems with remote certificates
        Ftp1.UseAuthentication = True

        'Login and get working directory
        Ftp1.Server = "myServer"
        Ftp1.Username = "myUser"
        Ftp1.Password = "myPassword"
        Ftp1.Invoke(FtpCommand.PrintDir)
    End Sub

    Private Sub Ftp1_CertificateReceived(ByVal sender As Object, ByVal e As CertificateReceivedEventArgs) Handles Ftp1.CertificateReceived
        'Fires during SSL handshake when server presents its certificate
        Dim msg As String = "The server could not be validated for the following reason(s):"
        e.Accept = True

        'Security checks
        If (Not e.TrustedRoot) Then
            msg = msg + vbCrLf + "    -The certificate CA was not trusted"
            e.Accept = False
        End If
        If (Not e.ValidName) Then
            msg = msg + vbCrLf + "    -The certificate name was invalid"
            e.Accept = False
        End If
        If (Not e.ValidDate) Then
            msg = msg + vbCrLf + "   -The certificate date was invalid"
            e.Accept = False
        End If

        'If Validation failed, show message to user
        If (e.Accept = False) Then
            msg = msg + vbCrLf + vbCrLf + "Do you wish to override the security check?"
            If (MessageBox.Show(msg, "Security Alert: Server could not be validated", _
             MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.Yes) Then e.Accept = True
        End If
    End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
	//Use Implicit Secure FTP
	ftp1.Security = Security.Implicit;

	//Do not ignore problems with remote certificates
	ftp1.UseAuthentication = true;
			
	//Login and get working directory
	ftp1.Server = "myServer";
	ftp1.Username = "myUser";
	ftp1.Password = "myPassword";
	ftp1.Invoke(FtpCommand.PrintDir);
}

private void ftp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//Fires during SSL handshake when server presents its certificate
	string msg = "The server could not be validated for the following reason(s):";
	e.Accept = true;

	//Security checks
	if (!e.TrustedRoot)
	{
		msg = msg + "\r\n    -The certificate CA was not trusted";
		e.Accept = false;
	}
	if (!e.ValidName)
	{
		msg = msg + "\r\n    -The certificate name was invalid";
		e.Accept = false;
	}
	if (!e.ValidDate)
	{
		msg = msg + "\r\n    -The certificate date was invalid";
		e.Accept = false;
	}

	//If Validation failed, show message to user
	if (e.Accept == false)
	{
		msg = msg + "\r\n\r\nDo you wish to override the security check?";
		if (MessageBox.Show(msg, "Security Alert: Server could not be validated", 
			MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.CertificateRequested">
            <summary>
				This event is raised when a certificate has been requested.
			</summary><remarks>
				<p>The <b>CertificateRequested</b> event is raised when a secure server requests a certificate 
				from the client for client authentication. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property of the current <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component (or, if using a different
				component, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component used for the underlying connection) must be 
				set to a valid certificate. The easiest way to do this is to cast the <i>sender</i> parameter to an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a>,
				then set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property to a valid certificate.
				</p>
				<p>Many objects provide a high-level Object.Certificate property, which represents the certificate used by the object.
				If the object you are using has such a high-level property it is recommended to use this property instead of the implementation
				described above.</p>
			</remarks>
            <example>The following example demonstrates assigning a certificate for client certificate authentication.
				<code lang="VB">
    Private Sub Ftp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.CertificateRequested
        'The server has requested a certificate from the client
        'There is a certificate in the CurrentUser/MY store that we want to use
        'Here it is found and the Certificate property is set to it
        Dim store As CertificateStore = New CertificateStore(CertificateStoreLocation.CurrentUser, CertificateStoreName.My)
        Dim c As Certificate
        For Each c In store
            If (c.IssuerName = "PowerTCPTest-CA" And c.IssuedTo = "PowerTCPTest") Then Ftp1.Certificate = c
        Next
    End Sub
				</code>
				<code lang="C#">
private void ftp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested a certificate from the client
	//There is a certificate in the CurrentUser/MY store that we want to use
	//Here it is found and the Certificate property is set to it
	CertificateStore store = new CertificateStore(CertificateStoreLocation.CurrentUser, CertificateStoreName.My);
	foreach (Certificate c in store)
	{
		if (c.IssuerName == "PowerTCPTest-CA" &amp;&amp; c.IssuedTo == "PowerTCPTest")
			ftp1.Certificate = c;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.UseAuthentication">
            <summary>Gets or sets a value that determines if certificate authentication is used.</summary><remarks>
				<p>If set to true, you must control the acceptance/denial of certificates
				in the CertificateReceived event. If set to false, all certificates will be accepted no matter if they
				are valid or invalid.
				</p>
			</remarks><value>
				A Boolean value which determines if certificate authentication is used. Defaults to true.
			</value>
            <example>The following example demonstrates receiving a remote certificate.
				<code lang="VB">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        'Use Implicit Secure FTP
        Ftp1.Security = Security.Implicit

        'Do not ignore problems with remote certificates
        Ftp1.UseAuthentication = True

        'Login and get working directory
        Ftp1.Server = "myServer"
        Ftp1.Username = "myUser"
        Ftp1.Password = "myPassword"
        Ftp1.Invoke(FtpCommand.PrintDir)
    End Sub

    Private Sub Ftp1_CertificateReceived(ByVal sender As Object, ByVal e As CertificateReceivedEventArgs) Handles Ftp1.CertificateReceived
        'Fires during SSL handshake when server presents its certificate
        Dim msg As String = "The server could not be validated for the following reason(s):"
        e.Accept = True

        'Security checks
        If (Not e.TrustedRoot) Then
            msg = msg + vbCrLf + "    -The certificate CA was not trusted"
            e.Accept = False
        End If
        If (Not e.ValidName) Then
            msg = msg + vbCrLf + "    -The certificate name was invalid"
            e.Accept = False
        End If
        If (Not e.ValidDate) Then
            msg = msg + vbCrLf + "   -The certificate date was invalid"
            e.Accept = False
        End If

        'If Validation failed, show message to user
        If (e.Accept = False) Then
            msg = msg + vbCrLf + vbCrLf + "Do you wish to override the security check?"
            If (MessageBox.Show(msg, "Security Alert: Server could not be validated", _
             MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.Yes) Then e.Accept = True
        End If
    End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
	//Use Implicit Secure FTP
	ftp1.Security = Security.Implicit;

	//Do not ignore problems with remote certificates
	ftp1.UseAuthentication = true;
			
	//Login and get working directory
	ftp1.Server = "myServer";
	ftp1.Username = "myUser";
	ftp1.Password = "myPassword";
	ftp1.Invoke(FtpCommand.PrintDir);
}

private void ftp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//Fires during SSL handshake when server presents its certificate
	string msg = "The server could not be validated for the following reason(s):";
	e.Accept = true;

	//Security checks
	if (!e.TrustedRoot)
	{
		msg = msg + "\r\n    -The certificate CA was not trusted";
		e.Accept = false;
	}
	if (!e.ValidName)
	{
		msg = msg + "\r\n    -The certificate name was invalid";
		e.Accept = false;
	}
	if (!e.ValidDate)
	{
		msg = msg + "\r\n    -The certificate date was invalid";
		e.Accept = false;
	}

	//If Validation failed, show message to user
	if (e.Accept == false)
	{
		msg = msg + "\r\n\r\nDo you wish to override the security check?";
		if (MessageBox.Show(msg, "Security Alert: Server could not be validated", 
			MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.UseSslShutdown">
            <summary>Controls whether or not shut-down bytes are sent to the server when the connection is closed.</summary><remarks>
				<p>When the Object.Close method is used to close down a secure connection, the component will
				send out shut-down bytes to attempt to gracefully shut down the connection. However, some servers
				do not expect these shut-down bytes and, as a result, the connection can be improperly closed.
				If this is the case, set this property to false and no shut-down bytes will be sent when the connection
				is closed.</p>
			</remarks><value>True if shut-down bytes are to be sent to the server; false otherwise. The default value is true.</value>
            <example>The following example demonstrates accessing the exposed TCP connection.
				<code lang="VB"> 
Private Sub DisplayConnectionInfo()
   ' Check current connection state. If connected display info about the connection.    
   If Ftp1.Connected Then
      label1.Text = "Connected to " + Ftp1.Connection.RemoteEndPoint.Address.ToString()
   Else
      label1.Text = "Not Connected"
   End If
End Sub        
				</code>
				<code lang="C#">
private void DisplayConnectionInfo()
{
   // Check current connection state. If connected display info about the connection.
   if(ftp1.Connected)
      label1.Text = "Connected to " + ftp1.Connection.RemoteEndPoint.Address.ToString();
   else
      label1.Text = "Not connected";
}     
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.EndDelete">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginDelete.html">BeginDelete</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginDelete.html">BeginDelete</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into the event, containing information about the files deleted.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginDelete.html">BeginDelete</a> method. See the topic Using EndXXX Events for more information.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.EndGet">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into the event, containing information about the transfer.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic,Using Events Within The Visual Studio .NET Environment.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a> method. See the topic Using EndXXX Events for more information.</p>
			</remarks>
            <example>The following example demonstrates how to asynchronously retrieve a single file.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToGet As String = "test.txt"

' Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
Ftp1.BeginGet(FileToGet, "RetrievedFile.txt", Nothing)

' Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet)

' When the BeginGet operation has completed, the EndGet Event will fire.

Private Sub Ftp1_EndGet(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndGet

    ' If an error occurred, it would be returned in the event. Be sure to check for it.
    If e.Exception Is Nothing Then
       Debug.WriteLine("Get completed for file " + file.RemoteFileName)
    Else
       Debug.WriteLine("Error: " + e.Exception.ToString())
    End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToGet = "test.txt";

// Call BeginGet, this will begin an asynchronous Get. Upon completion the EndGet Event will be fired.
ftp1.BeginGet(FileToGet, Application.StartupPath + "\\" + new System.IO.FileInfo(FileToGet).Name, null);

// Display message, because BeginGet is asynchronous, this will be immediately executed.
Debug.WriteLine("Retrieving " + FileToGet);

// When the BeginGet operation has completed, the EndGet Event will fire. 
private void ftp1_EndGet(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

    // If an error occurred, it would be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       Debug.WriteLine("Get completed for file " + file.RemoteFileName);
    }
    else
    {
       Debug.WriteLine("Error: " + e.Exception.ToString());
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.EndInvoke">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> completes. An <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a> object will be passed into the event, containing information about the request sent and the response received.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs~Exception.html">Exception</a> for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> method. See the topic Using EndXXX Events for more information.</p>
			</remarks>
            <example>The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.EndList">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs.html">ListEventArgs</a> object will be passed into the event, containing information about the listing.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs.html">ListEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> method. See the topic Using EndXXX Events for more information.</p>
			</remarks>
            <example>The following example demonstrates using BeginList to retrieve a Listing asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get a listing for all text files in home/test. Upon completion the EndList
' event will fire, with the Listing passed in as an arg
 Ftp1.BeginList("/home/test/*.txt", True, Nothing)

' Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving Listing")

' When the BeginList operation has completed, the EndList Event will fire. 
Private Sub Ftp1_EndList(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ListEventArgs) Handles Ftp1.EndList
      
   ' If an error occurred during the asynchronous method, it would be 
   ' returned in the event. Be sure to check for it.
   if e.Exception Is Nothing Then
   
      ' Retrieve listing and display

      ' Begin setting up the ListView (listView1 is a standard ListView object) display

      ' Show gridlines.
      ListView1.GridLines = True

      ' Set View to Details
      ListView1.View = View.Details

      ' Add column headings for file name, size, and date.
      ListView1.Columns.Add("File Name", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Size", 100, HorizontalAlignment.Left)
      ListView1.Columns.Add("File Timestamp", 100, HorizontalAlignment.Left)

      ' Iterate through the listing, adding a row to the ListBox for each
      Dim le As Dart.PowerTCP.Ftp.ListEntry
      For Each le In e.Listing
         Dim cols() As String = {le.Name, le.Size.ToString(), le.TimeStamp}
         ListView1.Items.Add(New ListViewItem(cols))
      Next
  Else
     Debug.WriteLine(e.Exception.Message)
  End If
  
  ' Close the connection
  Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Get a listing for all text files in home/test. Upon completion the EndList
// event will fire, with the Listing passed in as an arg
ftp1.BeginList("/home/test/*.txt", true, null);

// Because BeginList is asynchronous, this line will be immediately executed.
Debug.WriteLine("Retrieving listing");

// When the BeginList operation has completed, the EndList Event will fire.

private void ftp1_EndList(object sender, Dart.PowerTCP.Ftp.ListEventArgs e)
{
    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
       // Retrieve listing and display

       // Begin setting up the ListView (listView1 is a standard ListView object) display

       // Show gridlines.
       listView1.GridLines = true;

       // Set View to Details
       listView1.View = View.Details;

       // Add column headings for file name, size, and date.
       listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
       listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);
       
       // Iterate through the listing, adding a row to the ListBox for each
       foreach(Dart.PowerTCP.Ftp.ListEntry le in e.Listing)
       {
          string[] cols = {le.Name, le.Size.ToString(), le.TimeStamp};
          listView1.Items.Add(new ListViewItem(cols));
       }
    }
    else
    {
        Debug.WriteLine("Error: " + ex.Message);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.EndPut">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object will be passed into the event, containing information about the transfer.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs.html">FileEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FileEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.
				</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> method. See the topic Using EndXXX Events for more information.</p>
			</remarks>
            <example>The following example demonstrates using <b>BeginPut</b> to Put a file to the server asynchronously
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FileToPut As String = "c:\FtpTest\doc.txt"


' Call BeginPut for the specified file, this will begin an asynchronous Put. Upon completion
' the EndPut Event will be fired. (The FileInfo object parses the name from the path).
Ftp1.BeginPut(FileToPut, New IO.FileInfo(FileToPut).Name, Nothing)

'Report to user. Since BeginPut is asynchronous, this line will be immediately executed
Debug.WriteLine("Storing file")

' When the BeginPut operation has completed, the EndPut Event will fire. 
Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut

   Dim file As Dart.PowerTCP.Ftp.FtpFile

   ' If an error occurred, it would be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Successfully Put " + file.LocalFileName)
   Else
      Debug.WriteLine("Error: " + e.Exception.ToString())
   End If
   
   ' Close the connection
   Ftp1.Close()
   
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToPut = "c:\\FtpTest\\MyFile.bmp";


// Call BeginPut for the specified file, this will begin an asynchronous Put. Upon completion
// the EndPut Event will be fired. (The FileInfo object parses the filename from the path).
ftp1.BeginPut(FileToPut, new System.IO.FileInfo(FileToPut).Name, null);

// Report to user. Since BeginPut is asynchronous, this line will be immediately executed.
Debug.WriteLine("Storing file");

// When the BeginPut operation has completed, the EndPut Event will fire. 
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{

   // If an error occurred, it would be returned in the event. Be sure to check for it.
   if(e.Exception == null)
   {
      Debug.WriteLine("Successfully put " + file.LocalFileName);
   }
   else
   {
      Debug.WriteLine("Error: " + e.Exception.ToString())
   }
   
   // Close the connection
   ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.Preview">
            <summary>
            Raised before each file is transferred.
            </summary><remarks>
				<p>This event is raised before a file transfer is started. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PreviewEventArgs.html">PreviewEventArgs</a> object will be passed into the event, containing data about the file transfer. The transfer may be cancelled from within this event.
				For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.Progress">
            <summary>
            Raised repeatedly while a file transfer is in progress.
            </summary><remarks>
				<p>This event is raised repeatedly while a file transfer is taking place. A ProgressEventArgs object will be passed into the event, containing data about the file transfer progress (such as current file being transferred, bytes transferred, etc).
				For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events Within The Visual Studio .NET Environment.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BlockSize.html">BlockSize</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ProgressSize.html">ProgressSize</a> properties controls how often this event will be raised.</p>
				<p>If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Compression.html">Compression</a> is set to Compression.Archive and the file is being retrieved from the server, ProgressEventArgs.Length will be set to -1.</p>
				<p>If the size of the remote file could not be determined, ProgressEventArgs.Length will be set to -1.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component as a reference, you must create a method to handle the event yourself. To learn how to do this, see the topic Using Events When Using The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> Component As A Reference.</p>
			</remarks>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.ConnectedChanged">
            <summary>
            Raised when the value of the Object.Connected property changes.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>The following example demonstrates the <b>ConnectedChanged</b> event, and how using the <b>AutoClose</b> property effects the connection status.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Create Invoke object
Dim f As Dart.PowerTCP.Ftp.Invoke

' Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)")
f = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.PrintDir)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.")
f = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Help)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Be sure to close the connection. The ConnectedChanged event should fire once more
Ftp1.Close()

' Monitor the connection status using the ConnectedChanged event
Private Sub Ftp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.ConnectedChanged

   ' The state of the connection has changed. Check current state.
   If Ftp1.Connected Then
      Debug.WriteLine("FTP Control connection connected")
   Else
      Debug.WriteLine("FTP Control connection disconnected")
   End If
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create Invoke object

Dart.PowerTCP.Ftp.Invoke f;

// Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)");
f = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.PrintDir);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.");
f = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Help);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Be sure to close the connection. The ConnectedChanged event should fire once more
ftp1.Close();


// Monitor the connection status using the ConnectedChanged event.

private void ftp1_ConnectedChanged(object sender, System.EventArgs e)
{

    // The state of the connection has changed. Check current state.
    if(ftp1.Connected)
        Debug.WriteLine("FTP control connection connected.");
    else
        Debug.WriteLine("FTP control connection disconnected.");
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.BusyChanged">
            <summary>
			Raised when the value of the Object.Busy property changes.
			</summary><remarks>
				<p>This event is fired when the value of the Object.Busy property changes. The Object.Busy property changes
			when a method is executing that is occupying the TCP connection.
			</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying to the user when the PowerTCP component is busy.</li>
					<li>Taking action within your application when the PowerTCP component is no longer busy.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself.
			For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>The following example demonstrates the Ftp.Busy property, the BusyChanged event, and the BusyException.
				<code lang="VB">
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFtpServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Storing a binary file
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

   ' Store a large file, Ftp.Busy will be true for the duration
   ' of the store operation.
   Ftp1.BeginPut("C:\Test\Test.bmp", "newtest.bmp", Nothing)

   ' Try another asynchronous method immediately after the 
   'first, this should throw a BusyException
   Try
      Ftp1.BeginPut("C:\Test\Test.bmp", "newtest2.bmp", Nothing)
   Catch BusyEx As Dart.PowerTCP.Ftp.BusyException
      Debug.WriteLine("BusyException: " + BusyEx.Message)
   End Try
End Sub

Private Sub Ftp1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.BusyChanged
   Debug.WriteLine("Busy property changed. Busy now = " + Ftp1.Busy)
End Sub

Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut
   If e.Exception Is Nothing Then
      Debug.WriteLine("Put complete")
   Else
      Debug.WriteLine("Error: " + e.Exception.Message)
   End If
End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
   // Set server and user properties. This will allow calling of other
   // Ftp Component methods with the log in taking place "behind the scenes"
   ftp1.Server = "MyFtpServer";
   ftp1.Username = "blah";
   ftp1.Password = "mypass";
            
   // Storing a binary file
   ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

   // Store a large file, Ftp.Busy will be true for the duration
   // of the store operation.
   ftp1.BeginPut("C:\\Test\\Test.bmp", "newtest.bmp", null);

   // Try another asynchronous method immediately after the 
   // first, this should throw a BusyException
   try
   {
      ftp1.BeginPut("C:\\Test\\Test.bmp", "newtest2.bmp", null);
   }
   catch(Dart.PowerTCP.Ftp.BusyException BusyEx)
   {
                Debug.WriteLine("BusyException: " + BusyEx.Message);
   }
}

// BusyChanged event fires whenever the Busy property changes
private void ftp1_BusyChanged(object sender, System.EventArgs e)
{
   Debug.WriteLine("Busy property changed. Busy now = " + ftp1.Busy);
}

// EndPut event fires when the asynchronous BeginGet completes.
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
   if(e.Exception == null)
      Debug.WriteLine("Put complete");
   else
      Debug.WriteLine("Error: " + e.Exception.Message);
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Ftp.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The <b>Object.Trace</b> event reports data sent/received at a higher level. For example, for the
				Telnet component, <b>Object.Trace</b> reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>The following example demonstrates using the <b>Log</b> event to create a text log of all data sent over the control connection.
				<code lang="VB"> 
' The Trace Event will fire whenever data is sent/received over the control connection. 
Private Sub Ftp1_Log(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.SegmentEventArgs) Handles Ftp1.Log
   ' Create FileStream to write to log file
   Dim stream1 As New System.IO.FileStream("c:\FtpTest\mylog.log", IO.FileMode.OpenOrCreate, IO.FileAccess.ReadWrite)

   ' Create text to precede sent/received data.
   Dim recv() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Received &lt;--" + vbCrLf)
   Dim sent() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Sent --&gt;" + vbCrLf)

   ' Set the stream position to append.
   stream1.Position = stream1.Length

   ' Check if data is incoming or outgoing and write appropriate data
   If e.Segment.Sent = True Then
      stream1.Write(sent, 0, sent.Length)
   Else
      stream1.Write(recv, 0, recv.Length)
   End If

   ' Write the data
   stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count)

   ' Close the stream
   stream1.Close()

End Sub    
				</code>
				<code lang="C#">
// The Trace Event will fire whenever data is sent/received. 

private void Ftp1_Trace(object sender, Dart.PowerTCP.Ftp.SegmentEventArgs e)
{

    // Create FileStream to write to log file
    System.IO.FileStream stream1 = new System.IO.FileStream("c:\\FtpTest\\log.txt", System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);

    // Create text to precede sent/received data.
    byte[] recv = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nReceived &lt;-- \r\n");
    byte[] sent = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nSent --&gt; \r\n");

    // Set the stream position to append.
    stream1.Position = stream1.Length;

    // Check if data is incoming or outgoing and write appropriate data
    if(e.Segment.Sent == true)
        stream1.Write(sent, 0, sent.Length);
    else
        stream1.Write(recv, 0, recv.Length);

    // Write the data
    stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count);

    // Close the stream
    stream1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Account">
            <summary>
            Gets or sets account information required by the server. Not normally used.
            </summary><remarks>
				<p>Although most servers either allow anonymous FTP, or simply use USER and PASS for authentication, a small portion of servers require account information as well. In this case, the server will issue a reply code of 332 in response to the PASS &lt;<i>password</i>&gt; command, expecting a response in the form ACCT &lt;<i>account name</i>&gt;. The server may issue this response later in the dialogue as well (for example, when attempting to access a file). When the <b>Ftp.Account</b> property is set, the ACCT command is automatically sent in response to a reply code of 332.</p>
				<p>Use the <b>Ftp.Account</b> property if you expect your application could be used against servers that issue a 332 reply code as a response to PASS or other commands.</p>
			</remarks><value>
            A string to be automatically sent (along with the ACCT command) in response to a 332 reply code.
            </value>
            <example>The following example demonstrates simple use of the Account property to cause the ACCT command to be transparently issued in response to a 332 response code.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' If response to PASS command (or any other command) is 332, the ACCT command 
' will automatically be issued if the Account property is set.
Ftp1.Account = "myaccount"

Dim FileToStore As String = "c:\FtpTest\mynewgfile.bmp"

' Sending an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file (FileInfo object parses the name from the path)
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)

' Close the connection
Ftp1.Close()        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// If response to PASS command (or any other command) is 332, the ACCT command 
// will automatically be issued if the Account property is set.
ftp1.Account = "myaccount";

// Sending an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file (FileInfo object parses the name from the path)
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Allocate">
            <summary>
            Gets or sets a value that controls the use of the ALLO command before files are stored on the server.
            </summary><remarks>
				<p>When set to true, the ALLO command will be sent to the server with the proper file size before the 
            STOR, APPE or STOU commands are sent. Most servers do not require it's use and should ignore it.
				However, some servers need to allocate room for an incoming file and the ALLO command 
is used for that purpose. Use the <b>Ftp.Allocate</b> property if you expect your 
application could be used against servers which require the ALLO command to 
be sent with the file size of files to be transferred. </p>
			</remarks><value>
            true if the ALLO command is to be sent before any file storage takes place, otherwise false. The default value is false.
            </value>
            <example>The following example demonstrates simple use of the <b>Allocate</b> property to transparently issue the ALLO command before storing a file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Allocate property to true, this will cause the ALLO command to be sent before storing a
' file to reserve space on the server.
Ftp1.Allocate = true

Dim FileToStore As String = "c:\FtpTest\mynewgfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file. The ALLO command will be transparently issued before the file is stored.
' (The FileInfo object is used to parse the filename from the filepath)
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())    

' Close the connection
Ftp1.Close()    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Allocate property to true, this will cause the ALLO command to be sent before storing a
// file to reserve space on the server.
ftp1.Allocate = true;

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file. The ALLO command will be transparently issued before the file is stored.
// (The FileInfo object is used to parse the filename from the filepath)
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.BlockSize">
            <summary>
            Gets or sets the buffer size used during file and socket I/O.
            </summary><remarks>
				<p>When sending a file, this value determines how many bytes are processed for each file read.
            When receiving a file, this value determines how large a buffer will be used for receiving file data.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event will be raised in the frequency specified by this property.</p>
				<p>Set the <b>Ftp.BlockSize</b> property to a lower number if you wish to have the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Progress_EV.html">Progress</a> event be raised more frequently.</p>
			</remarks><value>
            An integer value indicating the buffer size to use during file and socket I/O. Defaults to 8196.
            </value>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.MaxTransferRate">
            <summary>
            Gets or sets the maximum transfer rate of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component in bytes per second. 
            </summary><remarks>
				<p>A value of 0 indicates that all available bandwidth will be used.</p>
				<p>The MaxTransferRate property is used to throttle the speed of data transfer and can be changed during a transfer.  By default the component will utilize all available
				bandwidth.</p>
			</remarks><value>
            An integer value indicating the desired speed of transfer in bytes per second. The default is 0.
            </value>
            <example>The following example demonstrates capturing file transfer progress info.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFtpServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
Ftp1.BlockSize = 1024

' Set the MaxTransfer Rate to 5 kbps
Ftp1.MaxTransferRate = 5

' Attempt to put multiple files to the server
Try
   Ftp1.Put("C:\Test", "*", "", True)
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try

' Success
Debug.WriteLine("Complete!")

' Monitor the progress using the progress event.
Private Sub Ftp1_Progress(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.ProgressEventArgs) Handles Ftp1.Progress
   ' Display the currently transferring file
   Label1.Text = "Currently transferring " + e.FileName

   ' Display the total bytes transferred
   Label2.Text = "Total bytes transferred: " + e.Count
   
   ' Display the current transfer rate
   Label3.Text = "Transfer Rate: " + e.TransferRate

   ' Set the properties of ProgressBar1 (this ProgressBar displays progress
   ' for each individual file)
   ProgressBar1.Minimum = 0
   ProgressBar1.Maximum = e.Length
   ProgressBar1.Value = e.Position

   ' Set the properties of progressBar2 (this ProgressBar displays progress
   ' for all files, useful when transferring multiple files - MPUT).
   ProgressBar2.Minimum = 0
   ProgressBar2.Maximum = e.TotalFiles
   ProgressBar2.Value = e.CurrentFile
End Sub    
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFtpServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
        
// Set FtpProgressEvent to raise every 1024 K processed (default is 8096).
ftp1.BlockSize = 1024;
    
// Set the MaxTransferRate to 5 kbps
ftp1.MaxTransferRate = 5;

// Attempt to put multiple files to the server
try
{
   ftp1.Put("C:\\Test", "*", "", true);
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}

// Success
Debug.WriteLine("Complete!");

// Monitor the progress using the progress event.
private void ftp1_Progress(object sender, Dart.PowerTCP.Ftp.ProgressEventArgs e)
{
   // Display the currently transferring file
   label1.Text = "Currently transferring " + e.FileName;
 
   // Display the total bytes transferred
   label2.Text = "Total bytes transferred: " + e.Count;
   
   // Display the current transfer rate
   label3.Text = "Transfer Rate: " + e.TransferRate;
            
   // Set the properties of progressBar1 (this ProgressBar displays progress
   // for each individual file)
   progressBar1.Minimum = 0;
   progressBar1.Maximum = (int)e.Length;
   progressBar1.Value = (int)e.Position;

   // Set the properties of progressBar2 (this ProgressBar displays progress
   // for all files, useful when transferring multiple files - MPUT).
   progressBar2.Minimum = 0;
   progressBar2.Maximum = (int)e.TotalFiles;
   progressBar2.Value = (int)e.CurrentFile;
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Busy">
            <summary>
				Returns true if a method is currently in use. 
			</summary><remarks>
				<p>When used in PowerTCP Zip <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Compression.html">Compression</a> for .NET, this property provides protection against accessing a method that is still processing a command.</p>
				<p>When used in an Internet communications component, this property provides protection against sending commands over a busy socket. For example, if the PowerTCP component is engaged in sending or receiving data, and another method is called that
				requires use of the same socket, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.BusyException.html">BusyException</a> is thrown.</p>
				<p>The Object.BusyChanged event is raised whenever the value of this property changes.</p>
				<p>For Internet communications components, check this property within your code if you feel a new operation could be 
				attempted over a socket that is already engaged in sending or receiving data. This property is also 
				useful for displaying socket status to the user. For example, a "stoplight" could 
				be part of the user interface that would be red when the <b>Object.Busy</b> property is true, and 
				green when false.</p>
			</remarks><value>
				true if a method is currently is use, otherwise false
			</value>
            <example>The following example demonstrates the Ftp.Busy property, the BusyChanged event, and the BusyException.
				<code lang="VB">
Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
   ' Set server and user properties. This will allow calling of other
   ' Ftp Component methods with the log in taking place "behind the scenes"
   Ftp1.Server = "MyFtpServer"
   Ftp1.Username = "blah"
   Ftp1.Password = "mypass"

   ' Storing a binary file
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

   ' Store a large file, Ftp.Busy will be true for the duration
   ' of the store operation.
   Ftp1.BeginPut("C:\Test\Test.bmp", "newtest.bmp", Nothing)

   ' Try another asynchronous method immediately after the 
   'first, this should throw a BusyException
   Try
      Ftp1.BeginPut("C:\Test\Test.bmp", "newtest2.bmp", Nothing)
   Catch BusyEx As Dart.PowerTCP.Ftp.BusyException
      Debug.WriteLine("BusyException: " + BusyEx.Message)
   End Try
End Sub

Private Sub Ftp1_BusyChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.BusyChanged
   Debug.WriteLine("Busy property changed. Busy now = " + Ftp1.Busy)
End Sub

Private Sub Ftp1_EndPut(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.FileEventArgs) Handles Ftp1.EndPut
   If e.Exception Is Nothing Then
      Debug.WriteLine("Put complete")
   Else
      Debug.WriteLine("Error: " + e.Exception.Message)
   End If
End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
   // Set server and user properties. This will allow calling of other
   // Ftp Component methods with the log in taking place "behind the scenes"
   ftp1.Server = "MyFtpServer";
   ftp1.Username = "blah";
   ftp1.Password = "mypass";
            
   // Storing a binary file
   ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

   // Store a large file, Ftp.Busy will be true for the duration
   // of the store operation.
   ftp1.BeginPut("C:\\Test\\Test.bmp", "newtest.bmp", null);

   // Try another asynchronous method immediately after the 
   // first, this should throw a BusyException
   try
   {
      ftp1.BeginPut("C:\\Test\\Test.bmp", "newtest2.bmp", null);
   }
   catch(Dart.PowerTCP.Ftp.BusyException BusyEx)
   {
                Debug.WriteLine("BusyException: " + BusyEx.Message);
   }
}

// BusyChanged event fires whenever the Busy property changes
private void ftp1_BusyChanged(object sender, System.EventArgs e)
{
   Debug.WriteLine("Busy property changed. Busy now = " + ftp1.Busy);
}

// EndPut event fires when the asynchronous BeginGet completes.
private void ftp1_EndPut(object sender, Dart.PowerTCP.Ftp.FileEventArgs e)
{
   if(e.Exception == null)
      Debug.WriteLine("Put complete");
   else
      Debug.WriteLine("Error: " + e.Exception.Message);
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Client">
            <summary>
			Gets or sets the client hostname or address when a specific interface binding is desired. 
			</summary><value>
			A string representing a host name or dot address.
			</value><remarks>
				<P>If the local host has multiply interfaces, set this property to either a dot address ("111.111.111.111") or a hostname 
			(which is resolved by DNS), specifying the local interface to use.</P>
				<P>Normally, the default interface binding is chosen. Use this property to 
			override the default behavior, which is to bind to the first (default) 
			adapter.</P>
			</remarks>
            <example>The following example demonstrates nonstandard use of the server/client properties.
				<code lang="VB"> 
Ftp1.Server = "MyFTPServer"

' ServerPort defaults to 21, the well-known port for FTP control connection.
' This demonstrates changing the control port to a non-standard port.
Ftp1.ServerPort = 1121 

Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Client property to request a specific interface binding
Ftp1.Client = "111.111.111.111" 

' Explicitly set a client control port. (This defaults to 0 - no preference).
Ftp1.ClientPort = 1122 

' Set ClientDataPort. The server will attempt to connect to any port in the
' range 5000-5100 and stop attempting upon success.            
Ftp1.ClientDataPort = "5000:5100" 

' Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
' specified in the code above). When data is ready to be transferred, the data connection will take place on the 
' first open port between the range specified (in this case 5000-5100).
Ftp1.Put("myfile.txt", "myfile.txt")        
				</code>
				<code lang="C#">
ftp1.Server = "MyFTPServer";

// ServerPort defaults to 21, the well-known port for FTP control connection.
// This demonstrates changing the control port to a non-standard port.
ftp1.ServerPort = 1121;

ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Client property to request a specific interface binding
ftp1.Client = "111.111.111.111";

// Explicitly set a client control port. (This defaults to 0 - no preference).
ftp1.ClientPort = 1122;

// The control will attempt to connect to any port in the
// range 5000-5100 and stop attempting upon success.
ftp1.ClientDataPort = "5000:5100";

// Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
// specified in the code above). When data is ready to be transferred, the data connection will take place on the
// first open port between the range specified (in this case 5000-5100).
ftp1.Put("myfile.txt", "myfile.txt");
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.ClientDataPort">
            <summary>
            Gets or sets a string used to restrict the local data port to a value or range compatible with your firewall.
            </summary><remarks>
				<p>This property is used to set a range of ports to use for data transfers. This is useful for traversing firewalls where the firewall administrator can configure the firewall to allow these data connections to pass.</p>
				<p>RECOMMENDED USE: Set Passive property to true. In this scenario, a single port may be specified (ClientDataPort = "10000"). The server will cycle through available ports, accepting data connections are they are requested by the client.</p>
				<p>ALTERNATIVE USE: Set Passive property to false. In this scenario, the server always binds to its port 20, and makes an active connection to the client. If ClientDataPort was set to "10000:10010", then the server will connect to port 10010, then port 10009, etc, as new data connections are established. Once the list of ports is exhaused, however, it is restarted from the beginning (port 10010 in this case). In the event that the first use is still in "TIME_WAIT", then the server will not complete the connection to the client until TIME_WAIT state expires (this may be over a minute on some servers). You can sense this condition by setting the value of the Timeout property to a small number.</p>
			</remarks><value>
            A string representing the local port or range of local ports to which the data connection is restricted. A "0" indicates that any port can be used. The default is "0".
            </value>
            <example>The following example demonstrates nonstandard use of the server/client properties.
				<code lang="VB"> 
Ftp1.Server = "MyFTPServer"

' ServerPort defaults to 21, the well-known port for FTP control connection.
' This demonstrates changing the control port to a non-standard port.
Ftp1.ServerPort = 1121 

Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Client property to request a specific interface binding
Ftp1.Client = "111.111.111.111" 

' Explicitly set a client control port. (This defaults to 0 - no preference).
Ftp1.ClientPort = 1122 

' Set ClientDataPort. The server will attempt to connect to any port in the
' range 5000-5100 and stop attempting upon success.            
Ftp1.ClientDataPort = "5000:5100" 

' Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
' specified in the code above). When data is ready to be transferred, the data connection will take place on the 
' first open port between the range specified (in this case 5000-5100).
Ftp1.Put("myfile.txt", "myfile.txt")        
				</code>
				<code lang="C#">
ftp1.Server = "MyFTPServer";

// ServerPort defaults to 21, the well-known port for FTP control connection.
// This demonstrates changing the control port to a non-standard port.
ftp1.ServerPort = 1121;

ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Client property to request a specific interface binding
ftp1.Client = "111.111.111.111";

// Explicitly set a client control port. (This defaults to 0 - no preference).
ftp1.ClientPort = 1122;

// The control will attempt to connect to any port in the
// range 5000-5100 and stop attempting upon success.
ftp1.ClientDataPort = "5000:5100";

// Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
// specified in the code above). When data is ready to be transferred, the data connection will take place on the
// first open port between the range specified (in this case 5000-5100).
ftp1.Put("myfile.txt", "myfile.txt");
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.ClientPort">
            <summary>
			Gets or sets a string used to restrict the local data port to a value or range of values.
			</summary><value>
			A string representing the local port or range of local ports to which communication is
			 restricted. A "0" indicates that any port can be used. The default is "0". 
			</value><remarks>
				<p>Set this property if for 
some reason the client machine is limited in the ports that can be used. 
This is often the case in intranet environments where client 
are restricted or behind a firewall for security purposes.</p>
				<p>The default value, "0", indicates that any port may be used. When set to a 
single value, such as "20", only that port is used. When set to a range of 
values, such as "1024:1028", successive ports in this range are tried until 
one can be opened.</p>
			</remarks>
            <example>The following example demonstrates nonstandard use of the server/client properties.
				<code lang="VB"> 
Ftp1.Server = "MyFTPServer"

' ServerPort defaults to 21, the well-known port for FTP control connection.
' This demonstrates changing the control port to a non-standard port.
Ftp1.ServerPort = 1121 

Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Client property to request a specific interface binding
Ftp1.Client = "111.111.111.111" 

' Explicitly set a client control port. (This defaults to 0 - no preference).
Ftp1.ClientPort = 1122 

' Set ClientDataPort. The server will attempt to connect to any port in the
' range 5000-5100 and stop attempting upon success.            
Ftp1.ClientDataPort = "5000:5100" 

' Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
' specified in the code above). When data is ready to be transferred, the data connection will take place on the 
' first open port between the range specified (in this case 5000-5100).
Ftp1.Put("myfile.txt", "myfile.txt")        
				</code>
				<code lang="C#">
ftp1.Server = "MyFTPServer";

// ServerPort defaults to 21, the well-known port for FTP control connection.
// This demonstrates changing the control port to a non-standard port.
ftp1.ServerPort = 1121;

ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Client property to request a specific interface binding
ftp1.Client = "111.111.111.111";

// Explicitly set a client control port. (This defaults to 0 - no preference).
ftp1.ClientPort = 1122;

// The control will attempt to connect to any port in the
// range 5000-5100 and stop attempting upon success.
ftp1.ClientDataPort = "5000:5100";

// Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
// specified in the code above). When data is ready to be transferred, the data connection will take place on the
// first open port between the range specified (in this case 5000-5100).
ftp1.Put("myfile.txt", "myfile.txt");
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Compression">
            <summary>
            Gets or sets the type of compression desired. 
            </summary><remarks>
				<p>Some servers support 'MODE Z' and will compress/decompress files and listings that are uploaded or downloaded. This is useful when bandwidth is restricted. On a 100 MB LAN, the use of compression results in slower transfers.</p>
				<p>Compression.None indicates no compression is used.</p>
				<p>Compression.Archive is used for client/side compression/decompression only, resulting in server files that are stored in their compressed state.</p>
				<p>Compression.Full is used for client AND server compression/decompression, resulting in server files that are stored in their uncompressed state. If the server does not support 'MODE Z', then this </p>
				<p><a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Compression.html">Compression</a> software is provided by the generosity of ComponentAce:</p>
				<p>Copyright (c) 2006-2007, ComponentAce
					<br>http://www.componentace.com</br>
					<br>All rights reserved.</br>
				</p>
				<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>
				<p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of ComponentAce nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
				<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
			</remarks><value>
            A Dart.PowerTCP.Ftp.Compression value indicating the desired compression. The default is Compression.None.
            </value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
            <example>The following example demonstrates accessing the exposed TCP connection.
				<code lang="VB"> 
Private Sub DisplayConnectionInfo()
   ' Check current connection state. If connected display info about the connection.    
   If Ftp1.Connected Then
      label1.Text = "Connected to " + Ftp1.Connection.RemoteEndPoint.Address.ToString()
   Else
      label1.Text = "Not Connected"
   End If
End Sub        
				</code>
				<code lang="C#">
private void DisplayConnectionInfo()
{
   // Check current connection state. If connected display info about the connection.
   if(ftp1.Connected)
      label1.Text = "Connected to " + ftp1.Connection.RemoteEndPoint.Address.ToString();
   else
      label1.Text = "Not connected";
}     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Connection">
            <summary>
				Gets the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component instance used for the connection.
			</summary><remarks>
				<p>Many PowerTCP components use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component for the connection. This property exposes that object, allowing such actions as sending server requests directly over the TCP connection or getting information about the socket (such as local/remote IP addresses).
				If you need to communicate with a proxy server, set the properties of Object.Connection.Proxy to enable proxy communication.
				In addition, Object.Connection.Send can be used to send any command to the server.</p>
				<p>Use the <b>Object.Connection</b> property to directly access the TCP connection. This could be useful if:</p>
				<ul>
					<li>You need to use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Proxy.html">Proxy</a> object to communicate with proxy servers.</li>
					<li>You wish to display information about the socket endpoints to the user (local/remote IP addresses, for example).</li>
					<li>You want to use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> object used by the PowerTCP component as an initializer for the TraceForm.</li>
					<li>You wish to capture trace information by using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Trace_EV.html">Trace</a> event.</li>
					<li>You wish to close the connection.</li>
				</ul>
			</remarks><value>
				The Tcp instance that the PowerTCP component uses for the connection. 
			</value>
            <example>The following example demonstrates accessing the exposed TCP connection.
				<code lang="VB"> 
Private Sub DisplayConnectionInfo()
   ' Check current connection state. If connected display info about the connection.    
   If Ftp1.Connected Then
      label1.Text = "Connected to " + Ftp1.Connection.RemoteEndPoint.Address.ToString()
   Else
      label1.Text = "Not Connected"
   End If
End Sub        
				</code>
				<code lang="C#">
private void DisplayConnectionInfo()
{
   // Check current connection state. If connected display info about the connection.
   if(ftp1.Connected)
      label1.Text = "Connected to " + ftp1.Connection.RemoteEndPoint.Address.ToString();
   else
      label1.Text = "Not connected";
}     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. <b>Object.DoEvents</b> is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If <b>Object.DoEvents</b> is set to false, this will not be possible.
			Set the <b>Object.DoEvents</b> property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
            <example>The following example demonstrates
				<code lang="VB">
Private Sub ButtonPutFile_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
    
    ' Set server and user properties. This will allow calling of other
    ' Ftp Component methods with the log in/log out taking place "behind the scenes"
    Ftp1.Server = "MyFTPServer"
    Ftp1.Username = "blah"
    Ftp1.Password = "MyPass"

    ' Make sure DoEvents is true so UI events will be processed.
    Ftp1.DoEvents = True
     
    ' Put method returns an FtpFile object 
    Dim file As Dart.PowerTCP.Ftp.FtpFile
    
    ' File is an image
    Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
     
    Try

       ' Begin a transfer, the user can click a button which calls Ftp.AbortTransfer.
       ' If this happens, the transfer should stop and return an FtpFile object.
       file = Ftp1.Put("C:\Test\Test.bmp", "Test.bmp")
    Catch ex As Exception
        Debug.WriteLine("Error: " + ex.Message)
        Exit Sub
    End Try
    
    ' Success, the file was either successfully transferred, or the transfer
    ' was successfully aborted. Find out which occurred.
    If file.Position = file.Length Then
       ' Transfer not aborted.
       Debug.WriteLine("File successfully transferred.")
       Debug.WriteLine("Name of file on server: " + file.RemoteFileName)
    Else
       ' Transfer was aborted
       Debug.WriteLine("File transfer aborted")
       Debug.WriteLine("Bytes transferred: " + file.Count)
    End If
End Sub

Private Sub ButtonAbortTransfer_Click(ByVal sender As System.Object, ByVal e As System.EventArgs)
   Ftp1.AbortTransfer()
End Sub
				</code>
				<code lang="C#">
private void buttonPutFile_Click(object sender, System.EventArgs e)
{
    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in/log out taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "MyPass";

    // Make sure DoEvents is true so UI events will be processed.
    ftp1.DoEvents = true;
    
    // Put method returns an FtpFile object
    Dart.PowerTCP.Ftp.FtpFile file;
    
    // File is an image
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;
    
    // Begin a transfer, the user can click a button which calls Ftp.AbortTransfer.
    // If this happens, the transfer should stop and return an FtpFile object.
    try
    {
       file = ftp1.Put("C:\\Test\\test.bmp", "test.bmp");
    }
    catch(Exception ex)
    {
       Debug.WriteLine("Error: " + ex.Message);
       return;
    }
    
    // Success, the file was either successfully transferred, or the transfer
    // was successfully aborted. Find out which occurred.
    if(file.Position == file.Length)
    {
       // Transfer not aborted.
       Debug.WriteLine("File successfully transferred.");
       Debug.WriteLine("Name of file on server: " + file.RemoteFileName);
    }
    else
    {
       // Transfer was aborted
       Debug.WriteLine("File transfer aborted");
       Debug.WriteLine("Bytes transferred: " + file.Count);
    }

}

private void buttonAbort_Click(object sender, System.EventArgs e)
{
    // If DoEvents is true, this button we be able to be clicked, aborting the transfer
    ftp1.AbortTransfer();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Editor">
            <summary>
				In Visual Studio.NET, displays an interactive form to use to test real time protocol operations.
			</summary><value>
				An EditorForm to use in VS.NET to test protocol operations. 
			</value><remarks>
				<p>This property can only be used by clicking this property in the Properties Window in Visual Studio.NET. This will open an application which can be used to test protocol operation. The EditorForm will not be available if the PowerTCP component is being used as a reference.</p>
				<p>The <b>Object.Editor</b> property can ONLY be used at design time in the Visual Studio.NET environment.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.FileType">
            <summary>
            Gets or sets the data type for subsequent transfers.
            </summary><remarks>
				<p>Sending an ASCII file as Image or an binary file as ASCII can alter the formatting of the file. Set <b>Ftp.FileType</b> to FileType.Ascii if you are transferring files made entirely of ASCII characters (usually text files)and set <b>Ftp.FileType</b> to FileType.Image to transfer binary files without changing the formatting of the file.</p>
				<p>The TYPE command is automatically sent with the value of this property before any file transfer takes place.</p>
				<p>When set to FileType.Ascii, a CR/LF pair should be put at the end of every line in the file before sending it. 
            Since the Windows operating system already uses a CR/LF pair as the native line separator, 
            there is no need to modify the stream as it is received or sent. 
            Another operating system that uses a single CR as the native line separator, however, must expand the size 
            of most files it sends, and shrink the size of most files it receives (to change the line separator to/from a CR/LF pair).</p>
				<p>When set to FileType.Image, the line separator remains unmodified, making this property setting necessary for sending and receiving
            binary files (that may contain line separators).</p>
			</remarks><value>
            One of the FileType values. The default value is FileType.Ascii.
            </value>
            <example>The following example demonstrates checking to see the type of file (by looking at the bytes) and setting the FileType accordingly.
				<code lang="VB">
' This method demonstrates checking the bytes of a file to determine if
' it is binary or ASCII, then FTPing accordingly

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

Dim FilePath As String = "C:\FtpTest\log.txt"

' Create new filestream
Dim fstream As New System.IO.FileStream(FilePath, IO.FileMode.Open)

' Create new byte array to hold the FileStream's data
Dim data(fstream.Length) As Byte

' Read data from the file into the buffer.
fstream.Read(data, 0, fstream.Length)
fstream.Close()

Dim binary As Boolean = False

' Iterate through the bytes, checking to see if any are above 128. If so it is
' binary. (This is not a 100% accurate way of checking a file because the file
' may be a binary file whose bytes all happen to be below 128.)

Dim i As Integer
For i = 0 To data.Length - 1
   If data(i) &gt; 128 Then
      binary = True
   End If
Next

' Set the file type
If binary Then
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
Else
   Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Ascii
End If

' Put the file (The FileInfo object parses the name from the path)
Ftp1.Put(FilePath, New System.IO.FileInfo(FilePath).Name)
        
				</code>
				<code lang="C#">
// This method demonstrates checking the bytes of a file to determine if
// it is binary or ASCII, then FTPing accordingly

// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FilePath = "C:\\Files\\binaryfile.exe";

// Create new filestream
System.IO.FileStream fstream = new System.IO.FileStream(FilePath, System.IO.FileMode.Open);

// Create new byte array to hold the FileStream's data
byte[] data = new byte[fstream.Length];

// Read data from the file into the buffer.
fstream.Read(data, 0, (int)fstream.Length);
fstream.Close();

bool binary = false;

// Iterate through the bytes, checking to see if any are above 128. If so it is
// binary. (This is not a 100% accurate way of checking a file because the file
// may be a binary file whose bytes all happen to be below 128.)
for(int i = 0; i &lt; data.Length; i++)
    if(data[i] &gt; 128)
        binary = true;

// Set the file type
if(binary)
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;
else
    ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Ascii;

// Put the file (The FileInfo object parses the name from the path)
ftp1.Put(FilePath,  new System.IO.FileInfo(FilePath).Name);
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Passive">
            <summary>
            Gets or sets a value that determines if the server should accept a passive data connection.
            </summary><remarks>
				<p>When true, a PASV command is sent before a data transfer and the client connects to the server. 
            When false, a PORT command is sent before a data transfer and the server connects to the client.</p>
				<p>Set the <b>Ftp.Passive</b> property to true to make your application firewall friendly since firewalls often restrict incoming connections, while allowing outgoing connections.</p>
			</remarks><value>
            true if the data connection should be passive; otherwise, false. The default value is true.
            </value>
            <example>The following example demonstrates simple use of the Passive property in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Specify a non-passive connection. The server will connect to the client
' for any data connections.
Ftp1.Passive = false
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
            
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Specify a non-passive connection. The server will connect to the client
// for any data connections.
ftp1.Passive = false;

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
            
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.UseControlAddressForPassive">
            <summary>
            		Gets or sets or a value that determines what server address should be used when doing a Passive data connection.
            </summary><remarks>
			<p>When a Passive file transfer is desired, the server's response to the PASV command will indicate the address and port the client should connect to. This is almost always the same address being used by the control connection, so using this property's default value of true will usually work correctly. If your server is using a different address for the data connection, just set this property to false to use this address instead.</p>
			<p>This property defaults to true because there are scenarios under which the client must connect to an intermediate firewall instead of directly to the server. Under these conditions, if the control connection is encrypted or the firewall does not property modify the server's response to the PASV command, then the client will connect to the same address as the control connection (which will typically allow proper operation).</p>
			<p>FTP servers have evolved to be very configurable (for security reasons). Please check our support forum for addition information.</p>
			</remarks><value>
            		True if the control connection address should be used for Passive data connections, false otherwise.  Defaults to true.
            </value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Password">
            <summary>
            Gets or sets the password used during session login.
            </summary><remarks>
				<p>The value of this property is automatically sent (with the PASS command) when the server requests password information, which normally
            occurs after the username is sent.
            When "anonymous" is used for <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, this value is normally your email address.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component was designed to automatically log in to the server when any communication with the server needs to take place. In order for this to occur the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, <b>Ftp.Password,</b> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a> properties all have to be set to valid values. Once this has been done, the user will be automatically logged in transparently whenever communication with the server needs to occur. If either the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ServerPort.html">ServerPort</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, or <b>Ftp.Password</b> properties change, this will automatically be detected and login will automatically occur using the new data specified. It is recommended to use this method of logging into an FTP server over using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method, which is reserved for special connection cases not defined in the FTP RFC.</p>
				<p>For more information about logging in and out, see the topic Session Management Overview.</p>
				<p>You must set the <b>Ftp.Password</b> property if you wish to connect to any server that requires authentication. If your application requires authentication communication that is NOT defined in the RFC spec, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method to connect to the server, then use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> methods to send your login information.</p>
			</remarks><value>
            A string value representing the password to be issued during session login.
            </value>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.ProgressSize">
            <summary>
			Gets or sets a value that controls the frequency for raising the Progress event.
            </summary><remarks>
				<p>When using blocking programming techniques (i.e. using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Get.html">Get</a>, etc)
				this property controls the amount of time-slices given to the UI thread. A lower value will provide finer granularity for a progress bar, but may 
				saturate the UI thread when larger files are transferred. A larger value will 
				provide fewer Progress events, depending on the needs of the application.</p>
				<p>Note, when using blocking techniques, it is possible for some messages on the UI thread
				to not be processed properly. This will cause such behavior as button clicks not registering,
				minimized windows not being able to be restored, etc. To eliminate any such behavior, use non-blocking
				techniques (i.e. use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginGet.html">BeginGet</a>, etc).</p>
			</remarks><value>
            An integer value representing the password to be issued during session login.
            </value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Proxy">
            <summary>
            Returns the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> instance that controls proxy server use.
            </summary><remarks>
				<p>Some networks are configured to require your use of an FTP proxy server. PowerTCP supports most types.
            Configure your proxy use by specifying the properties of this <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> object.</p>
				<p>If any communication needs to occur outside of the proxies defined in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> object (for example,
             perhaps you need to connect to a server that expects a proprietary command for successfully login) use
             the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method, which receives the greeting from the server. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> methods can then
             be used to sent any command (including the proprietary command) to the server.</p>
				<p>Use the <b>Ftp.Proxy</b> property if your application needs to connect with one of the following proxies:</p>
				<ul>
					<li>SOCKS v4</li>
					<li>SOCKS v5</li>
					<li>SITE hostname</li>
					<li>USER after logon</li>
					<li>USER with no logon</li>
					<li>OPEN Proxy</li>
					<li>PIPE Proxy</li>
				</ul>
			</remarks><value>
            The FtpProxy object to use to control proxy server use.
            </value>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Restart">
            <summary>
            Gets or sets a value that controls the automatic use of file transfer restarts.
            </summary><remarks>
				<p>When set to false, file transfers always transfer the entire file.
            If you wish to resume a previously incomplete transfer, set this property to true and the local and remote file
            sizes will be compared. If a partial file is seen, then the REST (restart) command is used to preserve that
            portion of the file that was previously transferred.
            If a partial file was transferred, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Count.html">Count</a> (the number of bytes transferred) will not equal <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpFile~Length.html">Length</a>.</p>
				<p>If the server does not support restarts, this value will be ignored and the entire file will be transferred.</p>
				<p>If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Compression.html">Compression</a> is set to Compression.Archive and you attempt to set this property to true an InvalidOperationException will be raised.</p>
			</remarks><value>
            true if file transfer restart should be automatically used; otherwise, false. The default value is false.
            </value>
            <example>The following example demonstrates using the Restart property to specify whether a file transfer should be restarted if possible.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
            
' Storing a binary file
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Specify a restart
Ftp1.Restart = true

' Put returns an FtpFile object
Dart.PowerTCP.Ftp.FtpFile File

' Put the file, if it partially exists on the server AND the server
' supports restarts, it will automatically be restarted
File = Ftp1.Put("C:\Test\Test.bmp", "Test.Bmp")

' Display. If the file transfer was restarted Length will not Equal count. If the
' file transfer was restarted, Length and Count will be equal
Debug.WriteLine("Length of the file: " + File.Length)
Debug.WriteLine("Bytes transferred: " + File.Count)

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypaass";
            
// Storing a binary file
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;
            
// Specify a restart
ftp1.Restart = true;

// Put returns an FtpFile object
Dart.PowerTCP.Ftp.FtpFile File;

// Put the file, if it partially exists on the server AND the server
// supports restarts, it will automatically be restarted
File = ftp1.Put("C:\\Test\\Test.bmp", "Test.Bmp");

// Display. If the file transfer was restarted Length will not Equal count. If the
// file transfer was restarted, Length and Count will be equal
Debug.WriteLine("Length of the file: " + File.Length);
Debug.WriteLine("Bytes transferred: " + File.Count);

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Security">
            <summary>Specifies the security protocol and authentication type used.</summary><remarks>
				<p>Set this value to the type of security protocol and authentication type used by the
				 server. For example, if explicit SSL is used, set this property to Security.Explicit and connect to the secure server. 
				 Typically when using explicit security, you will connect to the well-known port
				for the protocol you are using. If implicit SSL is used, set this property to Security.Implicit and connect to the secure server. Typically, 
				when using implicit security, you will connect to a port other than the well-known port for the protocol you are using.
				in this case.</p>
				<p>For more information about implicit and explicit SSL, see the topic Explicit vs Implicit <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Security.html">Security</a>.</p>
			</remarks><value>
				One of the Security values. The default type is Security.None.
			</value>
            <example>The following example demonstrates receiving a remote certificate.
				<code lang="VB">
    Private Sub Button1_Click(ByVal sender As System.Object, ByVal e As System.EventArgs) Handles Button1.Click
        'Use Implicit Secure FTP
        Ftp1.Security = Security.Implicit

        'Do not ignore problems with remote certificates
        Ftp1.UseAuthentication = True

        'Login and get working directory
        Ftp1.Server = "myServer"
        Ftp1.Username = "myUser"
        Ftp1.Password = "myPassword"
        Ftp1.Invoke(FtpCommand.PrintDir)
    End Sub

    Private Sub Ftp1_CertificateReceived(ByVal sender As Object, ByVal e As CertificateReceivedEventArgs) Handles Ftp1.CertificateReceived
        'Fires during SSL handshake when server presents its certificate
        Dim msg As String = "The server could not be validated for the following reason(s):"
        e.Accept = True

        'Security checks
        If (Not e.TrustedRoot) Then
            msg = msg + vbCrLf + "    -The certificate CA was not trusted"
            e.Accept = False
        End If
        If (Not e.ValidName) Then
            msg = msg + vbCrLf + "    -The certificate name was invalid"
            e.Accept = False
        End If
        If (Not e.ValidDate) Then
            msg = msg + vbCrLf + "   -The certificate date was invalid"
            e.Accept = False
        End If

        'If Validation failed, show message to user
        If (e.Accept = False) Then
            msg = msg + vbCrLf + vbCrLf + "Do you wish to override the security check?"
            If (MessageBox.Show(msg, "Security Alert: Server could not be validated", _
             MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) = DialogResult.Yes) Then e.Accept = True
        End If
    End Sub
				</code>
				<code lang="C#">
private void button1_Click(object sender, System.EventArgs e)
{
	//Use Implicit Secure FTP
	ftp1.Security = Security.Implicit;

	//Do not ignore problems with remote certificates
	ftp1.UseAuthentication = true;
			
	//Login and get working directory
	ftp1.Server = "myServer";
	ftp1.Username = "myUser";
	ftp1.Password = "myPassword";
	ftp1.Invoke(FtpCommand.PrintDir);
}

private void ftp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//Fires during SSL handshake when server presents its certificate
	string msg = "The server could not be validated for the following reason(s):";
	e.Accept = true;

	//Security checks
	if (!e.TrustedRoot)
	{
		msg = msg + "\r\n    -The certificate CA was not trusted";
		e.Accept = false;
	}
	if (!e.ValidName)
	{
		msg = msg + "\r\n    -The certificate name was invalid";
		e.Accept = false;
	}
	if (!e.ValidDate)
	{
		msg = msg + "\r\n    -The certificate date was invalid";
		e.Accept = false;
	}

	//If Validation failed, show message to user
	if (e.Accept == false)
	{
		msg = msg + "\r\n\r\nDo you wish to override the security check?";
		if (MessageBox.Show(msg, "Security Alert: Server could not be validated", 
			MessageBoxButtons.YesNo, MessageBoxIcon.Exclamation) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Server">
            <summary>
            Gets or sets the FTP server hostname or address.
            </summary><remarks>
				<p>Used to identify the FTP resource by either hostname (that is resolved by DNS) or dot address (of the form 11.22.33.44).
            The object always checks this property, so you can change it at any time and subsequent sessions will be automatically
            established with the correct server.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> objects were designed to automatically log in to the server when any communication with the server needs to take place. In order for this to occur the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a>, and <b>Ftp.Server</b> properties all have to be set to valid values. 
				Once this has been done, the user will be automatically logged in transparently.  If either the <b>Ftp.Server,</b> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ServerPort.html">ServerPort</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a> properties change, this will automatically be detected and login will automatically occur using the new data specified. It is recommended to use this method of logging into an FTP server over using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method, which is reserved for special connection cases not defined in the FTP RFC.</p>
				<p>You must set the <b>Ftp.Server</b> property before proper use. The only exception to this is in the rare case where a connection is required to an FTP server that is operating outside of the RFC spec. In this situation, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method to specify a server to connect to and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> methods to send the required commands.</p>
			</remarks><value>
            A string value representing the FTP resource to connect to.
            </value>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.ServerPort">
            <summary>
            Gets or sets the FTP server port.
            </summary><remarks>
				<p>Used to identify the FTP resource port, which is the "well-known" port 21 by convention.
            The object always checks this property, so you can change it at any time and subsequent sessions will be automatically
            established with the correct port.</p>
				<p>If either the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a>, <b>Ftp.ServerPort,</b> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Username.html">Username</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a> properties change, this will automatically be detected and login will automatically occur using the new data specified.</p>
				<p>Most FTP servers operate at the well known port of "21". However, often a FTP server is forced to operate at a non-standard port. In these cases, set the <b>Ftp.ServerPort</b> property to the non-standard port.</p>
			</remarks><value>
            An integer value representing the port of the FTP resource to connect to. Defaults to 21.
            </value>
            <example>The following example demonstrates nonstandard use of the server/client properties.
				<code lang="VB"> 
Ftp1.Server = "MyFTPServer"

' ServerPort defaults to 21, the well-known port for FTP control connection.
' This demonstrates changing the control port to a non-standard port.
Ftp1.ServerPort = 1121 

Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Client property to request a specific interface binding
Ftp1.Client = "111.111.111.111" 

' Explicitly set a client control port. (This defaults to 0 - no preference).
Ftp1.ClientPort = 1122 

' Set ClientDataPort. The server will attempt to connect to any port in the
' range 5000-5100 and stop attempting upon success.            
Ftp1.ClientDataPort = "5000:5100" 

' Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
' specified in the code above). When data is ready to be transferred, the data connection will take place on the 
' first open port between the range specified (in this case 5000-5100).
Ftp1.Put("myfile.txt", "myfile.txt")        
				</code>
				<code lang="C#">
ftp1.Server = "MyFTPServer";

// ServerPort defaults to 21, the well-known port for FTP control connection.
// This demonstrates changing the control port to a non-standard port.
ftp1.ServerPort = 1121;

ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Client property to request a specific interface binding
ftp1.Client = "111.111.111.111";

// Explicitly set a client control port. (This defaults to 0 - no preference).
ftp1.ClientPort = 1122;

// The control will attempt to connect to any port in the
// range 5000-5100 and stop attempting upon success.
ftp1.ClientDataPort = "5000:5100";

// Begin a Put. The Ftp control will (attempt to) make the control connection on port 1121 (the non-standard port
// specified in the code above). When data is ready to be transferred, the data connection will take place on the
// first open port between the range specified (in this case 5000-5100).
ftp1.Put("myfile.txt", "myfile.txt");
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.StoreType">
            <summary>
            Gets or sets the type of store to use when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Put.html">Put</a> method or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginPut.html">BeginPut</a> method is called.
            </summary><remarks>
				<p>The default value (StoreType.Replace) is used by most applications, and is required for file transfer restarts.
            Use StoreType.Unique for storing files under unique names, and StoreType.Append for appending information.</p>
				<p>When using StoreType.Unique, the name of the file will be returned in the reply. When using StoreType.Append, if the file does not exist on the server, it will simply be created.</p>
				<p>Changing the <b>Ftp.StoreType</b> property is useful in several scenarios, for example:</p>
				<ul>
					<li> If your server does not support restarts, and you wish to simulate a restart, you can use StoreType.Append for adding the missing portion of any file.</li>
					<li> StoreType.Replace can be used along with MPUT to synchronize folders on a local root with a remote root.</li>
					<li> StoreType.Unique may be helpful for archival purposes.</li>
				</ul>
			</remarks><value>
            One of the StoreType values. The default value is StoreType.Replace.
            </value>
            <example>The following example demonstrates file synchronization between a local root and a remote root. First, filenames from both the local root and remote root are retrieved using Ftp.ExpandLocalFiles and Ftp.ExpandRemoteFiles. Then extraneous files are deleted from the server. Then Ftp.StoreType is set to Replace to assure that the files on the client will replace those on the server. Finally all files on the local root are put to the server.
				<code lang="VB">
Private Sub SynchronizeFiles(ByVal LocalRoot As String, ByVal RemoteRoot As String)

' This sub demonstrates synchronization of files between a local root
' and a root on the FTP server, to get all files on the FTP Server to
' be the same as on the local root

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Get listing of local files
Dim lFiles() As String
lFiles = Ftp1.ExpandLocalFiles(LocalRoot + "*", False)

' Get a listing of remote files
Dim rFiles() As String
rFiles = Ftp1.ExpandRemoteFiles(RemoteRoot + "*", False)

Dim found As Boolean
Dim i As Integer

' Iterate though list of files on the server and compare to local files.
' If it does not exist locally, delete it
For i = 0 To rFiles.Length - 1

   found = False
   Dim j As Integer

   For j = 0 To lFiles.Length - 1

      ' Create FileInfo objects to parse filename
      Dim rFileInfo As New System.IO.FileInfo(rFiles(i))
      Dim lFileInfo As New System.IO.FileInfo(lFiles(i))

      ' Compare file names
      If (rFileInfo.Name = lFileInfo.Name) Then
         found = True
         Exit For
      End If
   Next

   If Not found Then
      Debug.WriteLine("Deleting " + rFiles(i) + " from server")
      Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rFiles(i))
   End If
Next

' Now MPUT all files in LocalRoot and both directories are synched

' First, make sure old files are replaced
Ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace

' Then MPUT
Debug.WriteLine("Uploading all files")
Ftp1.Put(LocalRoot, "*", RemoteRoot, False)
Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched")

' Close the connection
Ftp1.Close()

End Sub  
				</code>      
				<code lang="C#">
private void SynchronizeFiles(string LocalRoot, string RemoteRoot)
{
    // This sub demonstrates synchronization of files between a local root
    // and a root on the FTP server, to get all files on the FTP Server to
    // be the same as on the local root

    // Set server and user properties. This will allow calling of other
    // Ftp Component methods with the log in taking place "behind the scenes"
    ftp1.Server = "MyFTPServer";
    ftp1.Username = "blah";
    ftp1.Password = "mypass";

    // Get list of local files
    string[] lfiles = ftp1.ExpandLocalFiles(LocalRoot + "*", false);
    
    // Get list of remote files
    string[] rfiles = ftp1.ExpandRemoteFiles(RemoteRoot + "*", false);

    bool found;

    // Iterate though list of files on the server and compare to local files.
    // If it does not exist locally, delete it
    for(int i = 0; i &lt; lfiles.Length; i++)
    {
        found = false;
        for(int j = 0; j &lt; lfiles.Length; j++)
        {
            // Compare filenames
            if(new System.IO.FileInfo(rfiles[i]).Name == new System.IO.FileInfo(lfiles[j]).Name)
            {
                found = true;
                break;
            }
        }

        if(!found) // Delete the file from the server.
        {
            Debug.WriteLine("Deleting " + rfiles[i] + " from server");
            ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Delete, rfiles[i]);
        }
    }
    
    // Now just MPUT all files in the local root and everything is synched.

    // First, make sure old files are replaced
    ftp1.StoreType = Dart.PowerTCP.Ftp.StoreType.Replace;

    // Then MPUT
    Debug.WriteLine("Uploading all files");
    ftp1.Put(LocalRoot, "*", RemoteRoot, false);
    Debug.WriteLine(LocalRoot + " and " + RemoteRoot + " are synched.");

    // Close connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Timeout">
            <summary>
				Specifies the maximum number of milliseconds to wait for responses to commands or time between data buffer transfers.
			</summary><remarks>
				<p>After connecting to a server, this value is used to establish the period of time to wait for
			server responses. During data transfer operations, a SocketException will
			be thrown if any data buffer transfer
			operation does not complete within the timeout period.</p>
			</remarks><value>
				 An integer specifying the maximum number of milliseconds to wait for responses to commands.
			</value>
            <example>The following example demonstrates setting the <b>Timeout</b> property to detect when file transfer fails (for example, if the network connection is terminated).
				<code lang="VB">
' Set timeout to 5 seconds
Ftp1.Timeout = 5000

Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


Try
   ' When retrieving the file, if no response is received within 5 seconds
   ' a SocketException will be thrown
   Ftp1.Get("thefile.txt", "thefile.txt")
Catch ex as System.Net.Sockets.SocketException
   Debug.WriteLine("A socket exception has occurred: " + ex.Message)
   Return        
Catch ex as Exception
   Debug.WriteLine("An exception occurred: " + ex.Message)
   Return
End Try

Debug.WriteLine("File successfully retrieved")

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set timeout to 5 seconds
ftp1.Timeout = 5000;

ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

try
{
    // When retrieving the file, if no response is received within 5 seconds
    // a SocketException will be thrown
    ftp1.Get("thefile.txt", "thefile.txt");
}
catch(System.Net.Sockets.SocketException ex)
{
    Debug.WriteLine("A socket exception has occurred: " + ex.Message);
    return;
}
catch(Exception ex)
{
    Debug.WriteLine("An exception occurred: " + ex.Message);
    return;
}
Debug.WriteLine("File successfully retrieved");

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.UseIpSync">
            <summary>
            Indicates whether 'Interrupt Process and Synch' bytes are sent with the ABOR command.
            </summary><remarks>
				<p>The default value is false. Also, the IP/SYNC bytes are never sent to proxies or over a secure channel.</p>
				<p>When receiving a file or a listing, and AbortTransfer() is used to abort the transfer, some servers require the
				IP/SYNC signal (4 bytes) be sent with the ABOR. This behavior causes unintended side-effects when Windows Firewall
				is in use. By setting this property to true, direct connections to HP/UX servers and other specific FTP servers will
				operate better when the ABOR command is sent.</p>
			</remarks><value>True if Interrupt Process and Synch special action is taken, false otherwise.  Default is false.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Ftp.Username">
            <summary>
            Gets or sets the <b>Ftp.Username</b> used during session login.
            </summary><remarks>
				<p>The value of this property is automatically sent during session login (with the USER command).</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component was designed to automatically log in to the server when any communication with the server needs to take place. In order for this to occur the <b>Ftp.Username,</b> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a>, and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a> properties all have to be set to valid values. 
				Once this has been done, the user will be automatically logged in transparently.  If either the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Server.html">Server</a>, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~ServerPort.html">ServerPort</a>, <b>Ftp.Username,</b> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Password.html">Password</a> properties change, this will automatically be detected and login will automatically occur using the new data specified. It is recommended to use this method of logging into an FTP server over using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method, which is reserved for special connection cases not defined in the FTP RFC.</p>
				<p>For more information about logging in and out, see the topic Session Management.</p>
				<p>You must set the <b>Ftp.Username</b> property if you wish to connect to any server that requires authentication. If your application requires authentication communication that is NOT defined in the RFC spec, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~RawConnect.html">RawConnect</a> method to connect to the server, then use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~Invoke.html">Invoke</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginInvoke.html">BeginInvoke</a> methods to send your login information.</p>
			</remarks><value> A string value representing the Ftp.Username to be issued during session login. </value>
            <example>The following example demonstrates simple use of the client/server properties in storing a single file.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"
             
Dim FileToStore As String = "c:\FtpTest\mynewfile.bmp"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image
            
' Put method returns an FtpFile object containing information about the file transfer
Dim file As Dart.PowerTCP.Ftp.FtpFile
Debug.WriteLine("Attempting to store file " + FileToStore)
            
Try
   ' Attempt to store the file (The FileInfo object parses the filename from the path)
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try
            
' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image;

// Put method returns an FtpFile object containing information about the file transfer
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

try
{
    // Attempt to store the file (The FileInfo object parses the filename from the path)
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="T:FtpEditor">
            <summary>
            Summary description for Test.
            </summary>
        </member>
        <member name="T:FtpEditorForm">
            <summary>
            Summary description for FtpEditorForm.
            </summary>
        </member>
        <member name="M:FtpEditorForm.Dispose">
            <summary>
            Release all system resources.
            </summary>
        </member>
        <member name="M:FtpEditorForm.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
        </member>
        <member name="M:FtpEditorForm.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:PowerTcpLicenseProvider">
            <summary>
            Base class for all PowerTCP classes
            </summary>
        </member>
        <member name="M:PowerTcpLicenseProvider.GetKeyValue(System.String)">
            <summary>
            This method checks CurrentUser first and LocalMachine seconds, looking for the string value for "name"
            </summary>
            <param name="name"></param>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpProxy">
            <summary>
				The <b>FtpProxy</b> class provides an easy way to manage communication with FTP proxy servers when transferring files.
			</summary><remarks>
				<p>The <b>FtpProxy</b> class provides extensive native support for proxy servers. Simply set the appropriate properties of the <b>FtpProxy</b> class and proxy communication occurs transparently.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example> 
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpProxy.#ctor">
            <summary>
				Initializes a new instance of the <b>FtpProxy</b> class.
			</summary><remarks>
				The default constructor initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpProxy.html">FtpProxy</a> class.
			</remarks>
            <example>The following example demonstrates creating an FtpProxy object.
				<code lang="VB"> 
' Declare as class member
Friend WithEvents FtpProxy1 As Dart.PowerTCP.Ftp.FtpProxy

' Create in class initilization
Me.FtpProxy1 = New Dart.PowerTCP.Ftp.FtpProxy        
				</code>
				<code lang="C#">
private Dart.PowerTCP.Ftp.FtpProxy FtpProxy1 = new Dart.PowerTCP.Ftp.FtpProxy();         
				</code>
			</example> 
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProxy.Server">
            <summary>
				Get or set a value which specifies the FTP <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> to use.
			</summary><value>
				A string representing the FTP Proxy to use.
			</value><remarks>
				<p>Specifies the hostname of the proxy server. Specify the server either in dot notation ("111.111.111.111") or by host name ("myserver").
				Use this property if you are using a Socks4, Socks5, Site, User, or Pipe proxy.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>  
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProxy.Password">
            <summary>
				Password to use when authenticating to an FTP proxy.
			</summary><value>
				A string value representing the password used to access the FTP proxy.
			</value><remarks>
				<p>Specifies the password to use for authentication on some proxies. Set this property if you are using a Socks4, Socks5, Site (optional), or User (optional) proxy.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>  
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProxy.ServerPort">
            <summary>
				Port to use when connecting to an FTP <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a>.
			</summary><remarks>
				<p>Specifies the port to use when connecting to the proxy server.
				Set this property if you are using a Socks4, Socks5, Site, User, or Pipe proxy.</p>
			</remarks><value>An integer value representing the FTP Proxy port to connect to.</value>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>  
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProxy.Type">
            <summary>
				Type of FTP proxy.
			</summary><value>
				One of the FtpProxyType values.
			</value><remarks>
				<p>Specifies the type of proxy.
				Set this property to specify the type of proxy server for the connection, or else use FtpProxyType.None if no proxy server will be used.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>  
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpProxy.Username">
            <summary>
				Username to use when authenticating to an FTP proxy.
			</summary><value>
				A string value representing the username used to access the FTP proxy.
			</value><remarks>
				<p>Specifies the username to use for authentication on some proxies.
				Set this property if you are using a Socks4, Socks5, Site (optional), or User (optional) proxy.</p>
			</remarks>
            <example>The following example demonstrates basic proxy use.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Set Proxy properties and all proxy issues will be handled "behind the scenes"
Ftp1.Proxy.Server = "MyProxy"
Ftp1.Proxy.ServerPort = 8888
Ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.Socks5
Ftp1.Proxy.Username = "proxyblah"
Ftp1.Proxy.Password = "myproxypass"

Dim FileToStore As String = "c:\FtpTest\mypic.gif"

' File is an image
Ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

' Put method returns an FtpFile object containing information about the file
Dim file As Dart.PowerTCP.Ftp.FtpFile

Debug.WriteLine("Attempting to store file " + FileToStore)

' Store the file
Try
   file = Ftp1.Put(FileToStore, New System.IO.FileInfo(FileToStore).Name)
Catch ex As Exception
   Debug.WriteLine("Error " + ex.Message)
   Return
End Try

' Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName)
Debug.WriteLine("File now on server as " + file.RemoteFileName)
Debug.WriteLine("Size of file " + file.Length.ToString())
Debug.WriteLine("Data transferred " + file.Count.ToString())
        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Set Proxy properties and all proxy issues will be handled "behind the scenes"
ftp1.Proxy.Server = "MyProxy";
ftp1.Proxy.ServerPort = 8888;
ftp1.Proxy.Type = Dart.PowerTCP.Ftp.FtpProxyType.User;
ftp1.Proxy.Username = "proxyblah";
ftp1.Proxy.Password = "myproxypass";


string FileToStore = "C:\\FtpTest\\MyPic.gif";

// File is an image
ftp1.FileType = Dart.PowerTCP.Ftp.FileType.Image

// Put method returns an FtpFile object containing information about the file
Dart.PowerTCP.Ftp.FtpFile file;

Debug.WriteLine("Attempting to store file " + FileToStore);

// Store the file
try
{
    file = ftp1.Put(FileToStore, new System.IO.FileInfo(FileToStore).Name);
}
catch(Exception ex)
{
    Debug.WriteLine("Error: " + ex.Message);
    return;
}

// Success! Display info about the file transferred.
Debug.WriteLine("Successfully stored file " + file.LocalFileName);
Debug.WriteLine("File now on server as " + file.RemoteFileName);
Debug.WriteLine("Size of file " + file.Length.ToString());
Debug.WriteLine("Data transferred " + file.Count.ToString());     
				</code>
			</example>  
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpWebRequest">
            <summary>
				Provides an FTP-specific implementation of the WebRequest class.
			</summary><remarks>
				<p>The <b>FtpWebRequest</b> class provides support for the properties and methods defined in WebRequest and for additional properties and methods that enable the user to interact directly with servers using FTP.</p>
				<p>Do not use the <b>FtpWebRequest</b> constructor. Use the WebRequest.Create method to initialize new <b>FtpWebRequest</b> instances. If the scheme for the URI is ftp://, WebRequest.Create returns an <b>FtpWebRequest</b> instance.</p>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebRequest~GetResponse.html">GetResponse</a> method makes a synchronous request to the Internet resource specified in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebRequest~RequestUri.html">RequestUri</a> property and returns an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebResponse.html">FtpWebResponse</a> instance containing the response.</p>
			</remarks>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.#ctor(System.Uri)">
            <summary>
				Initializes a new instance of the <b>FtpWebRequest</b> class.
			</summary><param name="uri">A Uri containing the URI of the requested resource.</param><remarks>
				<p>Do not use the <b>FtpWebRequest</b> constructor. Use the WebRequest.Createmethod to initialize new <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebRequest.html">FtpWebRequest</a> instances. If the scheme for the URI is ftp://, WebRequest.Create returns an <b>FtpWebRequest</b> instance.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.Abort">
            <summary>
				Cancels an FTP request for an Internet resource.
			</summary><remarks>
				<b>Abort</b> cancels a request for a resource.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.GetRequestStream">
            <summary>
				Returns a Stream for writing file data to the Internet resource specified by the Uri property.
			</summary><value>
				A Stream to use to write request data.
			</value><exception cref="T:System.InvalidOperationException">The <b>GetRequestStream</b> method is called more than once.</exception><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad response was received from the server.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.BeginGetRequestStream(System.AsyncCallback,System.Object)">
            <summary>
				Starts an asynchronous request for a Stream used to send file data to an Internet resource.
			</summary><param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param><param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.EndGetRequestStream(System.IAsyncResult)">
            <summary>
				Completes an asynchronous stream request that was started by the BeginGetRequestStream() method.
			</summary><param name="ar">Reference to the pending asynchronous request that is returned from BeginGetRequestStream.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.GetResponse">
            <summary>
				Sends a request to an Internet resource and returns a WebResponse instance (file).
			</summary><value>A WebResponse containing the response from the Internet resource.</value><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad response was received from the server.</exception><remarks>
				<p>The <b>FtpWebRequest.GetResponse</b> method returns an WebResponse instance containing the response from the Internet resource. The actual instance returned is an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebResponse.html">FtpWebResponse</a>, and can be typecast to that class to access FTP-specific properties.</p>
			</remarks>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.BeginGetResponse(System.AsyncCallback,System.Object)">
            <summary>
				Begins an asynchronous request for an Internet file using FTP.
			</summary><param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param><param name="state">An object containing state information for this operation.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequest.EndGetResponse(System.IAsyncResult)">
            <summary>
				Completes an asynchronous request for an Internet resource that was started with the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebRequest~BeginGetResponse.html">BeginGetResponse</a> method.
			</summary><param name="ar">Reference to the pending asynchronous request that is returned from FtpWebRequest.BeginGetResponse.</param>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.ConnectionGroupName">
            <summary>
				Gets or sets the name of the connection group for the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.ContentLength">
            <summary>
				Gets or sets the name of the connection group for the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.ContentType">
            <summary>
				Gets or sets the value of the <b>Content-type</b> HTTP header. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Credentials">
            <summary>
				Provides authentication information for the request.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Headers">
            <summary>
				Gets a collection of the name/value pairs that make up the HTTP headers. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Method">
            <summary>
				Gets or sets the method for the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.PreAuthenticate">
            <summary>
				Gets or sets a value indicating whether to send a preauthentication header with the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Proxy">
            <summary>
				Gets or sets proxy information for the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.RequestUri">
            <summary>
				Gets the original Uri of the request.
			</summary><value>
				A Uri containing the URI of the Internet resource passed to the WebRequest.Create method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Timeout">
            <summary>
				Gets or sets the timeout value for a request.
			</summary><value>
				The number of milliseconds to wait before the request times out.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Password">
            <summary>
				Gets or sets the password to use for authentication
			</summary><value>
				A string value to use for authentication.
			</value><remarks>
				<p>If requesting a resource from a server that requires authentication, this property must be set.</p>
			</remarks>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Username">
            <summary>
				Gets or sets the username to use for authentication
			</summary><value>
				A string value to use for authentication.
			</value><remarks>
				<p>If requesting a resource from a server that requires authentication, this property must be set.</p>
			</remarks>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebRequest.Ftp">
            <summary>
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> instance used to make the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.FtpWebRequest.html">FtpWebRequest</a>.
			</summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpWebRequestCreator">
            <summary>
				Provides an FTP-specific implementation of the IWebRequest interface.
			</summary>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequestCreator.#ctor">
            <summary>
				Initializes a new instance of the <b>FtpWebRequestCreator</b> class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebRequestCreator.Create(System.Uri)">
            <summary>
				Implements the IWebRequestCreate interface
			</summary><param name="uri">A Uri containing the URI of the requested resource.</param>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.FtpWebResponse">
            <summary>
				Provides an FTP-specific implementation of the WebResponse class.
			</summary><remarks>
				<p>The WebResponse class is the abstract (MustInherit in Visual Basic) base class from which protocol-specific response classes are derived. Applications can participate in request and response transactions in a protocol-agnostic manner using instances of the WebResponse class while protocol-specific classes derived from WebResponse carry out the details of the request.</p>
				<p>Client applications do not create WebResponse objects directly, they are created by calling the GetResponse method on a WebRequest instance.</p>
			</remarks>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebResponse.#ctor(Dart.PowerTCP.Ftp.FtpWebRequest)">
            <summary>
				Initializes a new instance of the <b>FtpWebResponse</b> class.
			</summary><param name="request">An FtpWebRequest object encapsulating the request.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebResponse.Close">
            <summary>
				Cleans up resources and closes the underlying stream by calling the <ign>Stream.Close</ign> method. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.FtpWebResponse.GetResponseStream">
            <summary>
				Returns the file data stream from the Internet resource.
			</summary><returns>A Stream containing the body of the response.</returns><exception cref="T:Dart.PowerTCP.Ftp.ProtocolException">Bad response was received from the server.</exception>
            <example>The following example demonstrates using the WebRequest/Response classes to get a file using FTP.
				<code lang="VB">
' Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", New Dart.PowerTCP.Ftp.FtpWebRequestCreator())

' Create Request object (this will be anonymous FTP)
Dim req As Dart.PowerTCP.Ftp.FtpWebRequest 
req = System.Net.WebRequest.Create("ftp://myServer/file.txt")

req.Password = "pass"
req.Username = "user"

' Get response
Dim res As Dart.PowerTCP.Ftp.FtpWebResponse = req.GetResponse

' Get response content
Dim stream1 As System.IO.Stream = res.GetResponseStream()

' Create file stream to write content to file
Dim fstream As System.IO.FileStream
fstream = New System.IO.FileStream("c:\FtpTest\file.txt", System.IO.FileMode.Create)

Dim buffer(8096) As Byte
Dim count As Integer

count = -1
Do While (count &lt;&gt; 0)

   ' Read content into a buffer
   count = stream1.Read(buffer, 0, buffer.Length)

   ' Write content to a file
   fstream.Write(buffer, 0, count)

Loop

' Close the file
fstream.Close()
				</code>
				<code lang="C#">
// Register the FTP prefix
System.Net.WebRequest.RegisterPrefix("ftp", new Dart.PowerTCP.Ftp.FtpWebRequestCreator());

// Create Request object (this will be anonymous FTP)
Dart.PowerTCP.Ftp.FtpWebRequest req = 
(Dart.PowerTCP.Ftp.FtpWebRequest)System.Net.WebRequest.Create("ftp://myServer//file.txt");

req.Username = "user";
req.Password = "pass";

// Get response
System.Net.WebResponse res = req.GetResponse();

// Get response content
System.IO.Stream stream1 = res.GetResponseStream();

// Create file stream to write content to file
System.IO.FileStream fstream = new System.IO.FileStream("c:\\FtpTest\\file.txt", System.IO.FileMode.Create);

byte[] buffer = new byte[8096];
int count = -1;

do
{
    // Read content into a buffer
    count = stream1.Read(buffer, 0, buffer.Length);

    // Write content to a file
    fstream.Write(buffer, 0, count);
}
while (count != 0);

// Close the file
fstream.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebResponse.ContentLength">
            <summary>
				Gets the length of the content returned by the request. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebResponse.ContentType">
            <summary>
				Gets the content type of the response. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebResponse.Headers">
            <summary>
				Gets the headers associated with this response from the server. This property always throws a NotSupportedException.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.FtpWebResponse.ResponseUri">
            <summary>
				Gets the Uri of the Internet resource that responded to the request.
			</summary><value>
				A Uri containing the URI of the Internet resource that responded to the request.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Response">
            <summary>
				Presents the response portion from an Internet protocol Request/Response pair.
			</summary><remarks>
				<p>Often, protocols define that commands be responded to with responses made up of a 
				response code and response text. For example(using the FTP protocol as an example), the FTP protocol defines a command "CWD"
				which is a request to change the working directory. If command sent to the server was "CWD 
				MYDIR" (a request to change to a directory called "MYDIR"), the 
				response back from the server may be something like "200 Working Directory Changed". 
				In PowerTCP this response is encapsulated by the <b>Response</b> object, allowing access to the 
				code (through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Code.html">Code</a> property), the text (through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Text.html">Text</a> property),
				or the raw response (through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~ToString.html">ToString</a> method). The <b>Response</b> object is usually
				a member of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Invoke.html">Invoke</a> object, which represents a request/response pair.</p>
			</remarks>
            <example>The following example demonstrates closing a connection.
				<code lang="VB">
' First, check to see if currently connected
If Ftp1.Connected Then

   ' Close method returns an Invoke object
   Dim invoke As Dart.PowerTCP.Ftp.Invoke

   ' Attempt to close the connection by using the Close method
   Try
      invoke = Ftp1.Close()
   Catch ex As Exception
      ' An error occurred during the close attempt
      Debug.WriteLine(ex.Message)
   End Try

   If Ftp1.Connected Then
      ' For some reason the Close method did not work. Just perform a harsh abort
      Ftp1.Dispose()
      Debug.WriteLine("Unable to QUIT, connection aborted")
   Else
      Debug.WriteLine("Close successful.")
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString())
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text)
   End If

Else
   Debug.WriteLine("You are not connected")
End If        
				</code>
				<code lang="C#">
// First, check to see if currently connected
if(ftp1.Connected)
{
    // Close method returns an Invoke object
    Dart.PowerTCP.Ftp.Invoke invoke;
    
    // Attempt to Close the connection by using the Close method
    try
    {
        invoke = ftp1.Close();
    }
    catch(Exception ex)
    {
        // An error occurred during the close attempt
        Debug.WriteLine(ex.Message);
    }
    if(ftp1.Connected)
    {
        // For some reason the QUIT command did not work, just perform a "harsh" abort
        ftp1.Dispose();
        Debug.WriteLine("Unable to QUIT, connection aborted");
    }
    else
    {
      Debug.WriteLine("Close successful.");
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString());
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text);
    }
}
else{Debug.WriteLine("You are not connected");}     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Response.#ctor(System.String)">
            <summary>
				Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response.html">Response</a> class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Response.ToString">
            <summary>
				Returns the complete response string received.
			</summary><returns>A string representing the unparsed response from the server.</returns><remarks>
				<p>The String.ToString method is overridden to allow access to the entire 
				unparsed string. To retrieve a parsed listing of the response code or text, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Code.html">Code</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Text.html">Text</a> property, respectively.</p>
				<p>This property is useful if you wish to see the entire response string returned from the server without any formatting applied.</p>
			</remarks>
            <example>The following example demonstrates the <b>ConnectedChanged</b> event, and how using the <b>AutoClose</b> property effects the connection status.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Create Invoke object
Dim f As Dart.PowerTCP.Ftp.Invoke

' Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)")
f = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.PrintDir)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.")
f = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Help)
Debug.WriteLine("Response from server: " + f.Response.ToString())

' Be sure to close the connection. The ConnectedChanged event should fire once more
Ftp1.Close()

' Monitor the connection status using the ConnectedChanged event
Private Sub Ftp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Ftp1.ConnectedChanged

   ' The state of the connection has changed. Check current state.
   If Ftp1.Connected Then
      Debug.WriteLine("FTP Control connection connected")
   Else
      Debug.WriteLine("FTP Control connection disconnected")
   End If
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Create Invoke object

Dart.PowerTCP.Ftp.Invoke f;

// Call a couple of methods. The ConnectedChange event should only fire once , to connect
Debug.WriteLine("Sending a PWD command. The ConnectedChanged Event should fire once for this (log in)");
f = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.PrintDir);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Because the connection is maintained, the ConnectedChanged event will not fire for other methods called
Debug.WriteLine("Sending a HELP command. The ConnectedChanged Event should not fire for this.");
f = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Help);
Debug.WriteLine("Response from server: " + f.Response.ToString());

// Be sure to close the connection. The ConnectedChanged event should fire once more
ftp1.Close();


// Monitor the connection status using the ConnectedChanged event.

private void ftp1_ConnectedChanged(object sender, System.EventArgs e)
{

    // The state of the connection has changed. Check current state.
    if(ftp1.Connected)
        Debug.WriteLine("FTP control connection connected.");
    else
        Debug.WriteLine("FTP control connection disconnected.");
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Response.Code">
            <summary>
				Gets the 3-digit response code from the response string.
			</summary><value>An integer representing the response code parsed from the raw response.</value><remarks>
				<p>The <b>Response.Code</b> property allows easy access to the code parsed from the raw response. To retrieve the raw response, simply use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~ToString.html">ToString</a> method.</p>
				<p>This property is useful because it allows checking of the code received from the server without parsing. For example, if you are checking for a response code between 200 and 299, you can simply say:</p>
				<code>
if(Invoke.Response.Code &lt; 200 &amp;&amp; Invoke.Response.Code &gt; 300)
   // Take action here
</code>
				<p>This is helpful because you don't have to explicitly parse the raw response, and because the value is already an integer, allowing numerical comparison.</p>
			</remarks>
            <example>The following example demonstrates closing a connection.
				<code lang="VB">
' First, check to see if currently connected
If Ftp1.Connected Then

   ' Close method returns an Invoke object
   Dim invoke As Dart.PowerTCP.Ftp.Invoke

   ' Attempt to close the connection by using the Close method
   Try
      invoke = Ftp1.Close()
   Catch ex As Exception
      ' An error occurred during the close attempt
      Debug.WriteLine(ex.Message)
   End Try

   If Ftp1.Connected Then
      ' For some reason the Close method did not work. Just perform a harsh abort
      Ftp1.Dispose()
      Debug.WriteLine("Unable to QUIT, connection aborted")
   Else
      Debug.WriteLine("Close successful.")
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString())
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text)
   End If

Else
   Debug.WriteLine("You are not connected")
End If        
				</code>
				<code lang="C#">
// First, check to see if currently connected
if(ftp1.Connected)
{
    // Close method returns an Invoke object
    Dart.PowerTCP.Ftp.Invoke invoke;
    
    // Attempt to Close the connection by using the Close method
    try
    {
        invoke = ftp1.Close();
    }
    catch(Exception ex)
    {
        // An error occurred during the close attempt
        Debug.WriteLine(ex.Message);
    }
    if(ftp1.Connected)
    {
        // For some reason the QUIT command did not work, just perform a "harsh" abort
        ftp1.Dispose();
        Debug.WriteLine("Unable to QUIT, connection aborted");
    }
    else
    {
      Debug.WriteLine("Close successful.");
      Debug.WriteLine("Response Code From Server: " + invoke.Response.Code.ToString());
      Debug.WriteLine("Response Text From Server: " + invoke.Response.Text);
    }
}
else{Debug.WriteLine("You are not connected");}     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Response.Text">
            <summary>
				Gets the textual response without the 3-digit response code and CR/LF's.
			</summary><value>A string representing the test response parsed from the raw response.</value><remarks>
				<p>The <b>Response.Text</b> property allows easy access to the text (the response from the server minus the response code and CRLFs) parsed from the raw response. 
				To retrieve the raw response, simply use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~ToString.html">ToString</a> method.</p>
				<p>This property is useful because it allows access to the response string from the server without having to parse.</p>
				<p>If the response from the server was "200 Working Directory Changed", this property would contain "Working Directory Changed".</p>
			</remarks>
            <example>The following example demonstrates using Invoke to send a custom command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke

' Use Invoke(FtpCommand.Null) to send a proprietary command

Try
   invoke = Ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "MYFILECOMMAND file1.txt")
Catch ex As Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success. Print response.
Debug.WriteLine("Response from server : " + invoke.Response.Text)
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Use Invoke(FtpCommand.Null) to send a proprietary command
try
{
   Dart.PowerTCP.Ftp.Invoke invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.Null, "MYFILECOMMAND file1.txt");
}
catch(Exception ex)
{
   Debug.WriteLine("Error: " + ex.Message);
   return;
}
    
// Success. Print response
Debug.WriteLine("Response from server : " + invoke.Response.Text);

// Close connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Invoke">
            <summary>
				Presents the results from an Internet protocol Request/Response pair.
			</summary><remarks>
				<p>Many Internet protocols are based on a request/reply system, where the client sends a request, 
				and the server sends at least one reply. This continues lock-step until communication is 
				complete. The <b>Invoke</b> object encapsulates these request/reply pairs. </p>
				<p>In PowerTCP commands are often sent using the Object.Invoke or Object.BeginInvoke 
				methods. When a 
				command is sent an <b>Invoke</b> object is returned describing both the request and 
				response. The response is encapsulated by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Invoke~Response.html">Response</a> property, which allows easy access to the 
				raw and parsed response from the server. The request is represented by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Invoke~Request.html">Request</a> 
				property, a string containing the request sent.</p>
			</remarks>
            <example>The following example demonstrates using Invoke to send a command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.Ftp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Invoke.#ctor">
            <summary>
				Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Invoke.html">Invoke</a> class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Invoke.#ctor(System.String,Dart.PowerTCP.Ftp.Response)">
            <summary>
				Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Invoke.html">Invoke</a> class.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Invoke.ToString">
            <summary>
				Returns the entire request/response pair.
			</summary><returns>A string value representing the entire request/response pair.</returns><remarks>
				<p>This method returns the entire request/response pair, with additional formatting.</p>
			</remarks>
            <example>The following example demonstrates a simple rename.
				<code lang="VB">
' Create Invoke object, which will contain request/response data
Dim invoke As Dart.PowerTCP.Ftp.Invoke

' Call Rename. Invoke object will contain request/response data
Try
   invoke = ftp1.Rename("aaa.txt", "zzz.txt")
' ProtocolException thrown if bad response received from server
Catch FTPEx As Dart.PowerTCP.Ftp.ProtocolException
   Debug.WriteLine("Rename unsuccessful")
   Debug.WriteLine(FtpEx.ToString())
   Exit Sub
End Try  

' If it gets here, Rename was successful
Debug.WriteLine("Rename successful")

' Request sent and Response received
Debug.WriteLine("Response/response " + invoke.ToString())

				</code>
				<code lang="C#">
//Create Invoke object which will contain request/response data
Dart.PowerTCP.Ftp.Invoke invoke;

// Call Rename
try
{
    invoke = ftp1.Rename("aaa.txt", "zzz.txt");
}
// ProtocolException thrown if bad response received from server
catch(Dart.PowerTCP.Ftp.ProtocolException FTPex)
{
    Debug.WriteLine("Rename unsuccessful");
    Debug.WriteLine(FTPEx.ToString());
    return;
}

// If it gets here, Rename was successful
Debug.WriteLine("Rename successful");

// Request sent and response received
Debug.WriteLine("Response/response " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Invoke.Request">
            <summary>
				Gets the request sent to the server.
			</summary><value>
				A string representing the request sent to the server.
			</value><remarks>
				<p>This property represents the command sent to the server.</p>
			</remarks>
            <example>The following example demonstrates using Invoke to send a command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.Ftp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Invoke.Response">
            <summary>
				Gets the response received from the server.
			</summary><value>
				A Response object representing the response received from the server.
			</value><remarks>
				<p>The response to a command is encapsulated by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response.html">Response</a> object, which allows easy access to the code (through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Code.html">Code</a> property) and text (through the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~Text.html">Text</a> property) portions of the response without parsing. If you wish to have to entire, unparsed response from the server, simply use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~ToString.html">ToString</a> method.</p>
			</remarks>
            <example>The following example demonstrates using Invoke to send a command.
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Invoke a command
Dim invoke as Dart.PowerTCP.Ftp.Invoke
Try
   invoke = Ftp1.Invoke(FtpCommand.NoOp)
Catch ex as Exception
   Debug.WriteLine("Error: " + ex.Message)
   Exit Sub
End Try
            
' Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString())
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Invoke a command
Dart.PowerTCP.Ftp.Invoke invoke;
try
{
   invoke = ftp1.Invoke(Dart.PowerTCP.Ftp.FtpCommand.NoOp);
}
catch (Exception ex)
{
    Debug.WriteLine("Error: " + ex.ToString());
    return;
}

// Success
Debug.WriteLine("Request/Response messages: " + invoke.ToString());
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.InvokeEventArgs">
            <summary>
				This class is passed into EndInvoke events and provides data for these event.
			</summary><remarks>
				<p>A <b>InvokeEventArgs</b> object is passed into an EndInvoke event after a command has been sent asynchronously. This object represents the command sent to the server and the response received from the server.</p>
				<p>Many TCP/IP protocols are based on a request/response system, where the client sends a request, and the server sends at least one reply. This continues lock-step until communication is finished. The <b>InvokeEventArgs</b> object encapsulates these request/reply pairs. </p>
				<p>In PowerTCP commands are often explicitly sent using the Object.Invoke or Object.BeginInvoke methods, and transparently sent using higher-level methods. When a command is sent asynchronously an <b>InvokeEventArgs</b> object is returned in the event handler describing both the request and response. The response is encapsulated by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs~Response.html">Response</a> property which allows easy access to the raw and parsed response from the server. The request is represented by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs~Request.html">Request</a> property, a string containing the request sent.</p>
				<p>If your code causes an exception, it would be returned to the handling
				event without you seeing it. To preclude such a condition, you should ALWAYS
				use a try/catch block around your event-handling code.</p>
			</remarks>
            <example>The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvokeEventArgs.#ctor(System.String,Dart.PowerTCP.Ftp.Response,System.Object,System.Exception)">
            <summary>
				Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a> class.
			</summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.InvokeEventArgs.Request">
            <summary>
				Gets the request sent to the server.
			</summary><value>
				A string representing the request sent to the server.
			</value><remarks>
				<p>This property represents the command sent to the server.</p>
			</remarks>
            <example>The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.InvokeEventArgs.Response">
            <summary>
				Gets the response received from the server.
			</summary><value>
				A Response object representing the response received from the server.
			</value><remarks>
				<p>The response to a command is encapsulated by the <b>InvokeEventArgs.Response</b> property, which allows easy access to the code (through the InvokeEventArgs.Code property) and text (through the InvokeEventArgs.Text property) portions of the response without parsing. If you wish to have to entire, unparsed response from the server, simply use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Response~ToString.html">ToString</a> method.</p>
			</remarks>
            <example>The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.InvokeEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.InvokeEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a> may be thrown. You could check this property to see if it was of type <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a>, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>The following example demonstrates using <b>Ftp.BeginInvoke</b> to issue a command (in this case, CDUP) asynchronously.
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"


' Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
Ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, Nothing, Nothing)

' Report
Debug.WriteLine("CDUP command sent.")

' When the BeginInvoke operation has completed, the EndInvoke Event will fire.
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke

   ' If an error occurred during the asynchronous method, it would 
   ' be returned in the event. Be sure to check for it.
   If e.Exception Is Nothing Then
      Debug.WriteLine("Command issued " + e.Request)
      Debug.WriteLine("Response received " + e.Response.ToString();
   Else
      Debug.WriteLine(e.Exception.Message)
   End If
   
   ' Close the connection
   Ftp1.Close()
End Sub        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";


// Issue CDUP command asynchronously, upon completion the EndInvoke Event will be fired.
ftp1.BeginInvoke(Dart.PowerTCP.Ftp.FtpCommand.ChangeDirUp, null, null);

// Report
Debug.WriteLine("CDUP command sent.");

// When the BeginInvoke operation has completed, the EndInvoke Event will fire.
private void ftp1_EndInvoke(object sender, Dart.PowerTCP.Ftp.InvokeEventArgs e)
{

    // If an error occurred during the asynchronous method, it would 
    // be returned in the event. Be sure to check for it.
    if(e.Exception == null)
    {
        Debug.WriteLine("Command issued " + e.Request);
        Debug.WriteLine("Response received " + e.Response);
    }
    else
    {
        Debug.WriteLine("Error: " + e.Exception.Message);
    }

    // Close the connection
    ftp1.Close();
}     
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.InvokeEventHandler">
            <summary>
				Represents the method (event handler) that will be raised when the Object.BeginInvoke operation completes.
			</summary><param name="sender">The source of the event.</param><param name="e">An InvokeEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				When using the Object.BeginInvoke method, the class that holds the event data is the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a> class. A method must be created with the same signature as the delegate. 
				If you are working within the Visual Studio.NET environment, this can be automatically done for you. See the "Using Events In PowerTCP" topic for more information.
				If you are not working within the Visual Studio.NET environment, you must do this yourself.
				In this example that would mean a method would have to be defined to accept two arguments (an object and a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.InvokeEventArgs.html">InvokeEventArgs</a>) and return void.
				Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event (see examples below).</p>
				<p>For more information about event handler delegates, see the "Using Events In PowerTCP" topic.</p>
			</remarks>
            <example>The following example demonstrates how to assign an event handler to an event.
				<code lang="VB"> 
' *** EndInvoke Event ***

' You can either use the AddHandler statement to associate an event with an event handler in your init code
AddHandler Ftp1.EndInvoke, New Dart.PowerTCP.Ftp.InvokeEventHandler(AddressOf Ftp1_EndInvoke)

' Or you can use the Handles keyword to associate an event handler with an event
Private Sub Ftp1_EndInvoke(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.InvokeEventArgs) Handles Ftp1.EndInvoke        
				</code>
				<code lang="C#">
// EndInvoke event
this.ftp1.EndInvoke += new Dart.PowerTCP.Ftp.InvokeEventHandler(this.ftp1_EndInvoke);         
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ListEntry">
            <summary>
				Represents each line of the textual listing received from an FTP server
			</summary><remarks>
				<p>When any method is called that requests an FTP listing from the server (for example, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a>) a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object (and all of the <b>ListEntry</b> objects contained within this object) is automatically created. The <b>ListEntry</b> object represents the fields of a listing, such as name, path, time stamp, etc. </p>
				<p>For example, the following code,</p>
				<code>
Dart.PowerTCP.Listing<ign/> myList =  ftp1.List<ign/>("*", true);
</code>
				<p>would return a listing that would be encapsulated by the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object <i>myList</i>. This object would be made up of many
				<b>ListEntry</b> objects describing each individual file/directory. For example, perhaps the raw listing returned from the
				above method call was as follows:</p>
				<code>
-rw-r--r--   1 test     users         240 Aug 10 09:23 file1.txt
-rw-r--r--   1 test     users         255 Aug 10 09:23 file2.txt
</code>
				<p>This would return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object with two <b>ListEntry</b> objects. The values for the first <b>ListEntry</b> object (contained at myList[0]) would look like the following:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Value</th>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Name</td>
							<td width="50%">"file1.txt"</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Permissions</td>
							<td width="50%">"-rw-r--r--"</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Group</td>
							<td width="50%">"users"</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Size</td>
							<td width="50%">12</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].TimeStamp</td>
							<td width="50%">"Oct 19 10:08"</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Text</td>
							<td width="50%">"-rw-r--r--   1 test     users         240 Aug 10 09:23 file1.txt"</td>
						</tr>
					</table>
				</div>
				<p>If a field is needed that is not represented in the <b>ListEntry</b> object, simple use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Text.html">Text</a> property to retrieve the raw text listing, and parse appropriately.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ListEntry.#ctor(System.String,System.String,Dart.PowerTCP.Ftp.ListingFormat,System.Boolean)">
            <summary>
				Creates a new instance of <b>ListEntry</b>.
			</summary><remarks>
				<p>When any method is called that requests an FTP listing from the server (for example, <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a>) a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object (and all of the <b>ListEntry</b> objects contained within this object) is automatically created.</p>
			</remarks><param name="text">Line received from the server.</param><param name="path">Path information returned from the server.</param><param name="format">Format of the Listing.</param><param name="full">Indicates a full listing or a name list.</param>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Destination">
            <summary>
				Gets or sets the actual location to which a link is pointing when <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> indicates a UNIX listing, and Listing.Type is Link. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the actual location to which a link is pointing
			</value><remarks>
				<p>UNIX links act as shortcuts to other files. For example, if there is a link named "MyLink" pointing to a file called "MyFile.txt", the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Name.html">Name</a> property will be "MyLink". To get the actual file, you would have to access <b>ListEntry.Destination,</b> which would contain "MyFile.txt".</p>
				<p>This property will only have a value if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is UNIX and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Type.html">Type</a> is Link.</p>
			</remarks>
            <example>The following example demonstrates checking the ListEntry to determine if it is a link, and displaying appropriately.
				<code lang="VB">
' In this example, a Listing is displayed. In the cases where a link
' is present, instead of displaying the link, the actual file the link
' is pointing to will be displayed

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "MyPass"

' Retrieve listing
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Iterate through the ListEntries
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

    If le.Type = Dart.PowerTCP.Ftp.EntryType.Link Then
        ' It is a link, add the link to the ListBox
        listBox1.Items.Add(le.Source + "-&gt;" + le.Destination)
    else
        'It is not a link, display the file name
        listBox1.Items.Add(le.Name)
    End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// In this example, a Listing is displayed. In the cases where a link
// is present, instead of displaying the link, the actual file the link
// is pointing to will be displayed

// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "MyPass";

// Retrieve listing
Dart.PowerTCP.Ftp.Listing list =  ftp1.List("*", true);

// Iterate through the ListEntries
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.Link)
        // It is a link, add the link to the ListBox
        listBox1.Items.Add(le.Source + "-&gt;" + le.Destination);
    else
        // It is not a link, display the file name
        listBox1.Items.Add(le.Name);
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Group">
            <summary>
				When <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> indicates a UNIX listing, gets the UNIX file group name. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the UNIX file group name.
			</value><remarks>
				<p>This property will only have value when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> property is UNIX. To determine group rights, see <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Permissions.html">Permissions</a>.</p>
			</remarks>
            <example>The following example demonstrates displaying UNIX-only properties in a Listing
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Ftp.List returns a Listing object
Dim list As Dart.PowerTCP.Ftp.Listing

' Get a listing
list = Ftp1.List("*", True)

' Check to be sure it is UNIX
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.UNIX Then

   ' Display the fields that are only available in a UNIX listing

   ' Begin setting up the ListView diplay

   ' Show gridlines.
   listView1.GridLines = True

   ' Set View to Details
   listView1.View = View.Details

   ' Add column headings for the generic ListEntry properties.
   listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Add column headings for the UNIX only ListEntry properties
   listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Iterate through the listing, adding a row to the ListBox for each
   Dim le As Dart.PowerTCP.Ftp.ListEntry
   For Each le In list

      ' Display files only
         If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then

            Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions}
            listView1.Items.Add(New ListViewItem(cols))

         End If
   Next
End If

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
            
// Ftp.List returns a Listing object
Dart.PowerTCP.Ftp.Listing list;

// Get a listing
list = ftp1.List("*", true);

// Check to be sure it is UNIX
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.UNIX)
{
    // Display the fields that are only available in a UNIX listing

    // Begin setting up the ListView diplay

    // Show gridlines.
    listView1.GridLines = true;

    // Set View to Details
    listView1.View = View.Details;

    // Add column headings for the generic ListEntry properties.
    listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

    // Add column headings for the UNIX only ListEntry properties
    listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left);


    // Iterate through the listing, adding a row to the ListBox for each
    foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
    {
        // Display files only
        if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
        {
            string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions };
            listView1.Items.Add(new ListViewItem(cols));
        }
    }

    // Close the connection
    ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Name">
            <summary>
				Gets or sets the file or directory name, depending on the value of the Type property. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the name of the file or directory.
			</value><remarks>
				<p>This property represents the name of the file only. To obtain the path, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Path.html">Path</a> property.</p>
				<p>If the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is UNIX and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Type.html">Type</a> is Link, this property will contain the value of the link name. In this case to obtain the file the link is pointing to, see <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Destination.html">Destination</a>.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Owner">
            <summary>
				When <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> indicates a UNIX listing, gets the UNIX file owner name. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the UNIX file owner.
			</value><remarks>
				<p>This property will only have a value if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is UNIX. The owner is typically the person who created the file. Inspect <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Permissions.html">Permissions</a> to determine owner rights.</p>
			</remarks>
            <example>The following example demonstrates displaying UNIX-only properties in a Listing
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Ftp.List returns a Listing object
Dim list As Dart.PowerTCP.Ftp.Listing

' Get a listing
list = Ftp1.List("*", True)

' Check to be sure it is UNIX
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.UNIX Then

   ' Display the fields that are only available in a UNIX listing

   ' Begin setting up the ListView diplay

   ' Show gridlines.
   listView1.GridLines = True

   ' Set View to Details
   listView1.View = View.Details

   ' Add column headings for the generic ListEntry properties.
   listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Add column headings for the UNIX only ListEntry properties
   listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Iterate through the listing, adding a row to the ListBox for each
   Dim le As Dart.PowerTCP.Ftp.ListEntry
   For Each le In list

      ' Display files only
         If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then

            Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions}
            listView1.Items.Add(New ListViewItem(cols))

         End If
   Next
End If

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
            
// Ftp.List returns a Listing object
Dart.PowerTCP.Ftp.Listing list;

// Get a listing
list = ftp1.List("*", true);

// Check to be sure it is UNIX
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.UNIX)
{
    // Display the fields that are only available in a UNIX listing

    // Begin setting up the ListView diplay

    // Show gridlines.
    listView1.GridLines = true;

    // Set View to Details
    listView1.View = View.Details;

    // Add column headings for the generic ListEntry properties.
    listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

    // Add column headings for the UNIX only ListEntry properties
    listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left);


    // Iterate through the listing, adding a row to the ListBox for each
    foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
    {
        // Display files only
        if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
        {
            string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions };
            listView1.Items.Add(new ListViewItem(cols));
        }
    }

    // Close the connection
    ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Path">
            <summary>
				Gets the path reported for files in sub-directories. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the path of the file.
			</value><remarks>
				<p>This property represents the path of the file only. To obtain the name, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Name.html">Name</a> property.</p>
				<p>This property will only have a value if:</p>
				<ol>
					<li>The List call is for a recursive listing: Ftp.List("-R", true)</li>
					<li>The server supports recursive listings, in the format of:</li>
				</ol>
				<pre class="code">
./hello:
total 12
-rw-r-----   1 test     users       5751 Jan 29  2003 links.txt

./newdir:
total 12
-rw-r-----   1 test     users       4339 Jan 29  2003 imapdebug2.txt
-rw-r-----   1 test     users         12 Jan 27  2003 rtv.txt
</pre>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Permissions">
            <summary>
				In UNIX, gets the file permissions for a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> object. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the UNIX permissions.
			</value><remarks>
				<p>This property will only be valid if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is UNIX.
				Use the <b>ListEntry.Permissions</b> property if the server is returning a UNIX listing and you would like to know the permissions for a file.</p>
			</remarks>
            <example>The following example demonstrates displaying UNIX-only properties in a Listing
				<code lang="VB">
' Set server and user properties. This will allow us to call other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Ftp.List returns a Listing object
Dim list As Dart.PowerTCP.Ftp.Listing

' Get a listing
list = Ftp1.List("*", True)

' Check to be sure it is UNIX
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.UNIX Then

   ' Display the fields that are only available in a UNIX listing

   ' Begin setting up the ListView diplay

   ' Show gridlines.
   listView1.GridLines = True

   ' Set View to Details
   listView1.View = View.Details

   ' Add column headings for the generic ListEntry properties.
   listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Add column headings for the UNIX only ListEntry properties
   listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left)
   listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left)

   ' Iterate through the listing, adding a row to the ListBox for each
   Dim le As Dart.PowerTCP.Ftp.ListEntry
   For Each le In list

      ' Display files only
         If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then

            Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions}
            listView1.Items.Add(New ListViewItem(cols))

         End If
   Next
End If

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";
            
// Ftp.List returns a Listing object
Dart.PowerTCP.Ftp.Listing list;

// Get a listing
list = ftp1.List("*", true);

// Check to be sure it is UNIX
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.UNIX)
{
    // Display the fields that are only available in a UNIX listing

    // Begin setting up the ListView diplay

    // Show gridlines.
    listView1.GridLines = true;

    // Set View to Details
    listView1.View = View.Details;

    // Add column headings for the generic ListEntry properties.
    listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

    // Add column headings for the UNIX only ListEntry properties
    listView1.Columns.Add("File Group", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Owner", 100, System.Windows.Forms.HorizontalAlignment.Left);
    listView1.Columns.Add("File Permissions", 100, System.Windows.Forms.HorizontalAlignment.Left);


    // Iterate through the listing, adding a row to the ListBox for each
    foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
    {
        // Display files only
        if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
        {
            string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp, le.Group, le.Owner, le.Permissions };
            listView1.Items.Add(new ListViewItem(cols));
        }
    }

    // Close the connection
    ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Size">
            <summary>
				Gets the size of the file in bytes. Can be set by the user when parsing the Text property.
			</summary><value>
				An integer value representing the size of the file or directory as reported by the server in the listing
			</value><remarks>
				<p>This value may not reflect the actual size of the file, as CRLF may not be included in the count by the server. To get the actual file size for any file, use <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~GetSize.html">GetSize</a>.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Source">
            <summary>
				When <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> indicates a UNIX listing, and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Type.html">Type</a> is Link, gets the name of the link. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the name of a UNIX link.
			</value><remarks>
				<p>UNIX links act as shortcuts to other files. For example, if there is a link named "MyLink" pointing to a file called "MyFile.txt", the <b>ListEntry.Source</b> property will be "MyLink". To get the actual file, you would have to access <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Destination.html">Destination</a>, which would contain "MyFile.txt".</p>
				<p>This property will only have a value if the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> is UNIX and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Type.html">Type</a> is Link.</p>
			</remarks>
            <example>The following example demonstrates checking the ListEntry to determine if it is a link, and displaying appropriately.
				<code lang="VB">
' In this example, a Listing is displayed. In the cases where a link
' is present, instead of displaying the link, the actual file the link
' is pointing to will be displayed

' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in/log out taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "MyPass"

' Retrieve listing
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Iterate through the ListEntries
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

    If le.Type = Dart.PowerTCP.Ftp.EntryType.Link Then
        ' It is a link, add the link to the ListBox
        listBox1.Items.Add(le.Source + "-&gt;" + le.Destination)
    else
        'It is not a link, display the file name
        listBox1.Items.Add(le.Name)
    End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// In this example, a Listing is displayed. In the cases where a link
// is present, instead of displaying the link, the actual file the link
// is pointing to will be displayed

// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in/log out taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "MyPass";

// Retrieve listing
Dart.PowerTCP.Ftp.Listing list =  ftp1.List("*", true);

// Iterate through the ListEntries
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.Link)
        // It is a link, add the link to the ListBox
        listBox1.Items.Add(le.Source + "-&gt;" + le.Destination);
    else
        // It is not a link, display the file name
        listBox1.Items.Add(le.Name);
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Text">
            <summary>
				Gets the raw list entry.
			</summary><value>
				A string value representing the raw text returned from the server for the particular list entry.
			</value><remarks>
				<p><a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a>s are automatically parsed for most common fields. However, many servers have proprietary fields. In cases such as this, for listing fields not contained within the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> object, the raw listing can be retrieved using this property, and parsed.</p>
				<p>The <b>ListEntry.Text</b> property is useful for diagnostics purposes, to see a raw <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a>. It is also useful for dealing with servers that
				return a "proprietary" listing. For example, if the server may return a UNIX listing. This would look something like:</p>
				<code>
r-xr-xr-x   1 owner    group               20 Jan 10  2002 file1.txt 
</code>
				<p>It also may return a DOS listing which would look something like:</p>
				<code>
01-10-02  10:18AM                    20 file1.txt 
</code>
				<p>In either of these cases, the format would be detected and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> would be set appropriately. However, if the listing returned was a proprietary listing such as:</p>
				<code>
file1.txt   Jan-10-2002   20
</code>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component would be unable to detect the type. You would have to get the raw text using the <b>ListEntry.Text</b> property, and parse it yourself.</p>
			</remarks>
            <example>The following example demonstrates parsing a listing. This example demonstrates checking the format, and parsing if unknown.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Check to see if the server returned an Unknown listing 
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.Unknown Then

   ' In this example, the server is returning a proprietary listing which looks like:
   '            myfile.txt     158     01-11-02     11:55

   ' Create a pattern to use as a RegularExpression which matches the above listing format
   Dim pattern As String
   pattern = "(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)"

   ' Create new Regex object
   Dim regex As New System.Text.RegularExpressions.Regex(pattern)

   ' Iterate through ListEntries
   Dim l As Dart.PowerTCP.Ftp.ListEntry
   For Each l In list

      ' Get raw listing
      Dim raw As String = l.Text

      ' Attempt to match regular expression
      Dim match As System.Text.RegularExpressions.Match
      match = regex.Match(raw)

      ' Extract groupnames from Groups collection
      Dim filename As String = match.Groups["filename"].Value
      Dim filesize As String = match.Groups["filesize"].Value
      Dim filedate As String = match.Groups["filedate"].Value
      Dim filetime As String = match.Groups["filetime"].Value

      ' Display result
      Debug.WriteLine("Filename: " + filename)
      Debug.WriteLine("Filesize: " + filesize)
      Debug.WriteLine("Filedate: " + filedate)
      Debug.WriteLine("Filetime: " + filetime)
   Next
   
   'Close the connection
   Ftp1.Close()
End If        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// In this example, the server is returning a proprietary listing which looks like:
//            myfile.txt     158     01-11-02     11:55

// Create a pattern to use as a RegularExpression which matches the above listing format
string ppattern = @"(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Check to see if the server returned an Unknown listing format
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.Unknown)
{
    // Create new Regex object
    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern);

    // Iterate through ListEntries
    foreach(Dart.PowerTCP.Ftp.ListEntry l in list)
    {
        // Get raw listing
        string raw = l.Text;

        // Attempt to match regular expression
        System.Text.RegularExpressions.Match match = regex.Match(raw);
        
        // Extract groupnames from Groups collection
        string filename = match.Groups["filename"].Value;
        string filesize = match.Groups["filesize"].Value;
        string filedate = match.Groups["filedate"].Value;
        string filetime = match.Groups["filetime"].Value;

        // Display result
        Debug.WriteLine("Filename: " + filename);
        Debug.WriteLine("Filesize: " + filesize);
        Debug.WriteLine("Filedate: " + filedate);
        Debug.WriteLine("Filetime: " + filetime);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.TimeStamp">
            <summary>
				Gets the time/date the file was last modified. Can be set by the user when parsing the Text property.
			</summary><value>
				A string representing the time/date the file was last modified.
			</value>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ListEntry.Type">
            <summary>
				Gets type of entry (File or Directory)
			</summary><value>
				One of the EntryType values.
			</value><remarks>
				<p>The <b>Type</b> of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> will either be EntryType.File, EntryType.Directory, or EntryType.Link. If the 
				Type is EntryType.Link, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Source.html">Source</a> property will contain the link name and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Destination.html">Destination</a> property will contain the file the link is pointing to.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Listing">
            <summary>
				Represents the textual listing received from an FTP server.
			</summary><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~List.html">List</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp~BeginList.html">BeginList</a> methods request a listing from the FTP server. When this listing is returned, it is encapsulated by the <b>Listing</b> object (representing the entire listing) which contains <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> objects (representing an individual list entry, such as a file). 
			For example, the following code,</p>
				<code>
Dart.PowerTCP.Listing<ign/> myList =  ftp1.List<ign/>("*", true);
</code>
				<p>would return a listing that would be encapsulated by the <b>Listing</b> object <i>myList</i>. This object would be made up of many
			<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> objects describing each individual file/directory. For example, perhaps the raw listing returned from the
			above method call was as follows:</p>
				<code>
-rw-r--r--   1 test     users         240 Aug 10 09:23 file1.txt
-rw-r--r--   1 test     users         255 Aug 10 09:23 file2.txt
</code>
				<p>This would return a <b>Listing</b> object with two <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry.html">ListEntry</a> objects. The values would look like
		the following:</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Value</th>
						</tr>
						<tr valign="top">
							<td width="50%">myList.Format</td>
							<td width="50%">UNIX</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Name</td>
							<td width="50%">file1.txt</td>
						</tr>
						<tr valign="top">
							<td width="50%">myList[0].Permissions</td>
							<td width="50%">-rw-r--r--</td>
						</tr>
						<tr valign="top">
							<td width="50%">etc...</td>
							<td width="50%"/>
						</tr>
					</table>
				</div>
				<p>The above table shows the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component was able to detect the listing format, which is contained in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing~Format.html">Format</a> property.</p>
			</remarks>
            <example>
				<code lang="VB">
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Begin setting up the ListView diplay
' Show gridlines.
ListView1.GridLines = True

' Set View to Details
ListView1.View = View.Details

' Add column headings for file name, size, and date.
ListView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left)
ListView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left)

' Iterate through the listing, adding a row to the ListBox for each
Dim le As Dart.PowerTCP.Ftp.ListEntry
For Each le In list

   ' Display files only
   If le.Type = Dart.PowerTCP.Ftp.EntryType.File Then
      Dim cols() As String = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp}
      ListView1.Items.Add(New ListViewItem(cols))
   End If
Next

' Close the connection
Ftp1.Close()
				</code>
				<code lang="C#">
// Set server and user properties. This will allow calling of other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Begin setting up the ListView diplay

// Show gridlines.
listView1.GridLines = true;

// Set View to Details
listView1.View = View.Details;

// Add column headings for file name, size, and date.
listView1.Columns.Add("File Name", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Size", 100, System.Windows.Forms.HorizontalAlignment.Left);
listView1.Columns.Add("File Timestamp", 100, System.Windows.Forms.HorizontalAlignment.Left);

// Iterate through the listing, adding a row to the ListBox for each
foreach(Dart.PowerTCP.Ftp.ListEntry le in list)
{
    // Display files only
    if(le.Type == Dart.PowerTCP.Ftp.EntryType.File)
    {
        string[] cols = {le.Path + le.Name, le.Size.ToString(), le.TimeStamp};
        listView1.Items.Add(new ListViewItem(cols));
    }
}

// Close the connection
ftp1.Close();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.#ctor(System.String,System.Boolean)">
            <summary>
			Creates a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> instance and populates it with the raw text listing.
			</summary><param name="text">Raw text listing.</param><param name="full">True for a full listing, and false for a named list (NLST).</param><remarks>
				<p>The default constructor creates a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.ToString">
            <summary>
				Gets the raw listing test used to initialize the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object.
			</summary><value>A string representing the raw listing retrieved from the server</value><remarks>
				<p>If you wish to access the raw text of each individual list entry, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ListEntry~Text.html">Text</a> property. If you would like access to the raw text of the entire listing, use this property.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.CopyTo(Dart.PowerTCP.Ftp.ListEntry[],System.Int32)">
            <summary>
				Copies the entire collection to a compatible one-dimensional Array, starting at the specified index of the target array.
			</summary><remarks>
				<p>The specified array must be of a compatible type.</p>
				<p>This method uses Array.Copy to copy the elements.</p>
			</remarks><param name="array">The one-dimensional Array that is the destination of the elements copied from ArrayList. The Array must have zero-based indexing.</param><param name="index">The zero-based index in array at which copying begins.</param><exception cref="T:System.ArgumentNullException">array is a null reference (Nothing in Visual Basic).</exception><exception cref="T:System.ArgumentException">array is multidimensional.</exception><exception cref="T:System.InvalidCastException">The type of the source ArrayList cannot be cast automatically to the type of the destination array.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.Add(Dart.PowerTCP.Ftp.ListEntry)">
            <summary>Add an object to the end of the collection.</summary><param name="value">The object to add to the end of the collection.</param><remarks>
				<P>If Count already equals Capacity, the capacity of the list is doubled by automatically reallocating the internal array and copying the existing elements to the new array before the new element is added.</P>
				<P>If <B>Count</B> is less than <B>Capacity</B>, this method is an O(1) operation. If the capacity needs to be increased to accommodate the new element, this method becomes an O(<I>n</I>) operation, where <I>n</I> is <B>Count</B>.</P>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.Insert(System.Int32,Dart.PowerTCP.Ftp.ListEntry)">
            <summary>
				Inserts an element into the collection at the specified index.
			</summary><remarks>
				<p>If Count already equals Capacity, the capacity of the list is doubled by automatically reallocating the internal array before the new element is inserted.</p>
				<p>If index is equal to Count, value is added to the end of ArrayList.</p>
				<p>In collections of contiguous elements, such as lists, the elements that follow the insertion point move down to accommodate the new element. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</p>
			</remarks><param name="index">The zero-based index at which value should be inserted.</param><param name="value">The Object to insert.</param><exception cref="T:System.ArgumentOutOfRangeException">
			index is less than zero. 
			<P>-or-</P>
				<P>index is greater than Count.</P>
			</exception><exception cref="T:System.NotSupportedException">
			The ArrayList is read-only. 
			<p>-or-</p>
				<p>The ArrayList has a fixed size.</p>
			</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.IndexOf(Dart.PowerTCP.Ftp.ListEntry)">
            <summary>
				Searches for the specified <i>value</i> and returns the zero-based index of the first occurrence within the entire collection.
			</summary><remarks>
				<p>The collection is searched forward starting at the first element and ending at the last element.</p>
				<p>This method performs a linear search. On average, this is an O(n/2) operation, where n is Count. The longest search is an O(n) operation.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><returns>
				The zero-based index of the first occurrence of value within the entire collection, if found; otherwise, -1.
			</returns><param name="value">The Object to locate in the collection.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.Contains(Dart.PowerTCP.Ftp.ListEntry)">
            <summary>
				Determines whether an element is in the collection.
			</summary><remarks>
				<p>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(n) operation, where n is Count.</p>
				<p>This method determines equality by calling Object.Equals.</p>
			</remarks><param name="value">The Object to locate in the collection. The element to locate can be a null reference (Nothing in Visual Basic). </param><returns>
				true if item is found in the collection; otherwise, false.
			</returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Listing.Remove(Dart.PowerTCP.Ftp.ListEntry)">
            <summary>
				Removes the first occurrence of a specific object from the collection.
			</summary><param name="value">The Object to remove from the collection.</param><remarks>
				<P>This method performs a linear search; therefore, the average execution time is proportional to Count. That is, this method is an O(<I>n</I>) operation, where <I>n</I> is <B>Count</B>.</P>
				<P>This method determines equality by calling Object.Equals.</P>
				<P>In collections of contiguous elements, such as lists, the elements that follow the removed element move up to occupy the vacated spot. If the collection is indexed, the indexes of the elements that are moved are also updated. This behavior does not apply to collections where elements are conceptually grouped into buckets, such as a hashtable.</P>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Listing.Format">
            <summary>
				Gets the format of the listing: ListingFormat.UNIX, ListingFormat.DOS or ListingFormat.Unknown.
			</summary><value>One of the ListingFormat values.</value><remarks>
				<p>When a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Listing.html">Listing</a> object is created, the format of the listing is automatically detected. If the format is unable to be detected, ListingFormat.Unknown is returned.</p>
				<p>The Listing.Text property is useful for seeing the perceived listing type, therefore being able to handle the listing accordingly. It is also useful for dealing with servers that
				return a "proprietary" listing. For example, if the server may return a UNIX listing. This would look something like:</p>
				<code>
r-xr-xr-x   1 owner    group               20 Jan 10  2002 file1.txt 
</code>
				<p>It also may return a DOS listing which would look something like:</p>
				<code>
01-10-02  10:18AM                    20 file1.txt 
</code>
				<p>In either of these cases, the format would be detected and <b>Listing.Format</b> would be set appropriately. However, if the listing returned was a proprietary listing such as:</p>
				<code>
file1.txt   Jan-10-2002   20
</code>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Ftp.html">Ftp</a> component would be unable to detect the type. You would have to get the raw text (using ListEntry.Text), and parse it yourself.</p>
			</remarks>
            <example>The following example demonstrates parsing a listing. This example demonstrates checking the format, and parsing if unknown.
				<code lang="VB"> 
' Set server and user properties. This will allow calling of other
' Ftp Component methods with the log in taking place "behind the scenes"
Ftp1.Server = "MyFTPServer"
Ftp1.Username = "blah"
Ftp1.Password = "mypass"

' Retrieve file list. Listing details will be contained in the Listing Object
Dim list As Dart.PowerTCP.Ftp.Listing
list = Ftp1.List("*", True)

' Check to see if the server returned an Unknown listing 
If list.Format = Dart.PowerTCP.Ftp.ListingFormat.Unknown Then

   ' In this example, the server is returning a proprietary listing which looks like:
   '            myfile.txt     158     01-11-02     11:55

   ' Create a pattern to use as a RegularExpression which matches the above listing format
   Dim pattern As String
   pattern = "(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)"

   ' Create new Regex object
   Dim regex As New System.Text.RegularExpressions.Regex(pattern)

   ' Iterate through ListEntries
   Dim l As Dart.PowerTCP.Ftp.ListEntry
   For Each l In list

      ' Get raw listing
      Dim raw As String = l.Text

      ' Attempt to match regular expression
      Dim match As System.Text.RegularExpressions.Match
      match = regex.Match(raw)

      ' Extract groupnames from Groups collection
      Dim filename As String = match.Groups["filename"].Value
      Dim filesize As String = match.Groups["filesize"].Value
      Dim filedate As String = match.Groups["filedate"].Value
      Dim filetime As String = match.Groups["filetime"].Value

      ' Display result
      Debug.WriteLine("Filename: " + filename)
      Debug.WriteLine("Filesize: " + filesize)
      Debug.WriteLine("Filedate: " + filedate)
      Debug.WriteLine("Filetime: " + filetime)
   Next
   
   'Close the connection
   Ftp1.Close()
End If        
				</code>
				<code lang="C#">
// Set server and user properties. This will allow us to call other
// Ftp Component methods with the log in taking place "behind the scenes"
ftp1.Server = "MyFTPServer";
ftp1.Username = "blah";
ftp1.Password = "mypass";

// In this example, the server is returning a proprietary listing which looks like:
//            myfile.txt     158     01-11-02     11:55

// Create a pattern to use as a RegularExpression which matches the above listing format
string ppattern = @"(?&lt;filename&gt;\S+)\s+(?&lt;filesize&gt;\S+)\s+(?&lt;filedate&gt;\S+)\s+(?&lt;filetime&gt;\S+)";

// Retrieve file list. Listing details will be contained in the Listing Object
Dart.PowerTCP.Ftp.Listing list = ftp1.List("*", true);

// Check to see if the server returned an Unknown listing format
if(list.Format == Dart.PowerTCP.Ftp.ListingFormat.Unknown)
{
    // Create new Regex object
    System.Text.RegularExpressions.Regex regex = new System.Text.RegularExpressions.Regex(pattern);

    // Iterate through ListEntries
    foreach(Dart.PowerTCP.Ftp.ListEntry l in list)
    {
        // Get raw listing
        string raw = l.Text;

        // Attempt to match regular expression
        System.Text.RegularExpressions.Match match = regex.Match(raw);
        
        // Extract groupnames from Groups collection
        string filename = match.Groups["filename"].Value;
        string filesize = match.Groups["filesize"].Value;
        string filedate = match.Groups["filedate"].Value;
        string filetime = match.Groups["filetime"].Value;

        // Display result
        Debug.WriteLine("Filename: " + filename);
        Debug.WriteLine("Filesize: " + filesize);
        Debug.WriteLine("Filedate: " + filedate);
        Debug.WriteLine("Filetime: " + filetime);
    }
    
    // Close the connection
    ftp1.Close();
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Listing.Item(System.Int32)">
            <summary>
				Gets or sets the element at the specified index.
			</summary><param name="index">The zero-based index of the element to get or set.</param><value>The element at the specified index.</value><exception cref="T:System.ArgumentOutOfRangeException">
				<I>Index</I> is less than zero. 
<P>-or-</P>
				<P>
					<I>Index</I> is equal to or greater than Count.</P>
			</exception><remarks>
				<p>This property provides the ability to access a specific element in the 
collection by using the following syntax:
<pre class="code">myCollection[Index]</pre>
</p>
				<p>
				Note, intellisense may not work on members of objects referenced by using this indexer.
				If you would like intellisense to work, get the object referenced by the indexer into 
				it's own variable.
				</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.PipeStream">
            <summary>Represents a stream that wraps an internal stream.</summary><remarks>
				<p><b>PipeStream</b> wraps a stream that is filtered or encoded/decoded in some fashion, calling its methods and properties internally.</p>
				<p><b>PipeStream</b> provides the capability to perform buffered reads/writes.
Typically, derived classes would perform a transformation
(filtering/encoding) to the data passing through it.</p>
				<p><b>PipeStream</b> does not support seeking\.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.ResetPosition">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
				<p>The default constructor creates a new instance
			of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a>, with <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream~CoreStream.html">CoreStream</a> initialized to the
			Stream passed in as <i>coreStream</i>.
			</p>
			</remarks><param name="coreStream">The Stream object to set as PipeStream.CoreStream.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
				<p>The default constructor creates a new instance
			of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a>, with <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream~CoreStream.html">CoreStream</a> initialized to the
			Stream passed in as <i>coreStream</i>.
			</p>
			</remarks><param name="coreStream">The Stream object to set as PipeStream.CoreStream.</param><param name="encoding">The Encoding type to use for data transformations.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.#ctor">
            <summary>Creates a new instance of PipeStream.</summary><remarks>
				<p>This constructor is used by derived objects, which must set coreStream.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Read data from the Stream.</summary><remarks>
				<p>This method actually calls PipeStream.CoreStream.Read, passing the data "through"
				the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a> and into <i>buffer</i>.
				</p>
			</remarks><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the Stream is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Writes data to the stream.</summary><remarks>
				<p>This method actually calls PipeStream.CoreStream.Write, passing the data "through"
				the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a> and into <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream~CoreStream.html">CoreStream</a>.</p>
			</remarks><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the Stream is not writeable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.Flush">
            <summary>
				Updates the underlying repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The Stream is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.InternalWrite(System.Byte[],System.Int32,System.Int32)">
            <summary>
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.ReadFilter(System.Byte[],System.Byte[]@)">
            <summary>
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.PipeStream.FinalWrite(System.Byte[])">
            <summary>
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PipeStream.CoreStream">
            <summary>The internal stream to which all buffered reads/writes are being made.</summary><remarks>
				<p>
					This property returns the internal stream to which all buffered reads/writes are being made.
				</p>
			</remarks><returns>The internal Stream object.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PipeStream.CanRead">
            <summary>	
				Gets a value indicating whether the current Stream supports reading.
			</summary><value>
				true if reading is currently allowed, and false if not.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PipeStream.Position">
            <summary>Gets or sets the position within the current stream</summary><remarks>
				<p>Returns PipeStream.CoreStream.Position if not writing, and the 
			amount written to the stream, if writing. Attempting to set this property returns an InvalidOperationException unless it is set to 0, in which case the position of the PipeStream.CoreStream.Position
			 will be set to 0, and this object is ready for reading.</p>
			</remarks><returns>A value indicating the current position in the stream.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.PipeStream.Length">
            <summary>Gets the length in bytes of the stream.</summary><remarks>
				<p>Returns PipeStream.CoreStream.Length if not writing, and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream~Position.html">Position</a>, if writing.</p>
			</remarks><returns>A value indicating the length in bytes of the stream.</returns>
        </member>
        <member name="T:PowerTcp">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:PowerTcp.#ctor">
            <summary>
            Summary
            </summary>
        </member>
        <member name="M:PowerTcp.GetString(System.String)">
            <summary>
            Summary
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:PowerTcp.ValidateEnum(System.String,System.Enum)">
            <summary>
            ValidateEnum should be called by every property of type System.Enum that is set, or where val is a parameter
            </summary>
            <param name="name">Specify Property or Method Parameter name</param>
            <param name="val"></param>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Segment">
            <summary>
            Provides a reference to a data segment where data is sent or received over a TCP stream.
            </summary>
            <remarks>
            <p>When data is sent or received when using the Tcp component (which may be by using the Tcp component
            directly, or by using another component that uses the Tcp component for the underlying connection), a Segment object is returned.
            This Segment object will contain data such as the data sent or received and the amount of bytes sent
            or received. To use the data, simply access the Segment.Buffer property using the offset specified
            by the Segment.Offset property. As a shortcut, the Segment.ToString method can be used to simply return
            all data sent or received as a string.</p>
            <p>The Segment object is also used by other components beside the Tcp component. 
            For example, several components have a Trace event which allows access to any data sent or received over the
            control connection. A SegmentEventArgs class is made accessible in this event, containing a Segment object
            describing the data sent or received.</p>
            </remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Segment.ToString">
            <summary>
			Returns all data sent/received as a string.
			</summary><returns>A string representing all data sent or received.</returns><p>If the object is a Segment object, this property returns all data contained in Segment.Buffer as a string. 
			The Object.Charset property is used for decoding the byte array into the string.
			If the object is a Datagram object, this property returns all data contained in Datagram.Buffer.
			</p>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Segment.Buffer">
            <summary>
			The buffer containing the data that was sent/received.
			</summary><value>
			A byte array containing data that was sent/received over the socket.
			</value><remarks>
				<p>When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component, using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object. The
			data sent/received is available through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a>.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			data sent/received is available through Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a> or Datagram.Buffer property contains the actual
			data sent or received.</p>
			</remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Segment.Offset">
            <summary>
			The offset into the buffer.
			</summary><value>An integer representing the offset into the buffer.</value><remarks>
			Use this property to access offset parameter of the Receive and Send methods.
			</remarks><remarks>
				<p>When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component, using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object. The
			buffer offset is available through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Offset.html">Offset</a>.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			buffer offset is available through Datagram.Offset.</p>
				<p>Use this property to properly access the data available in <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a> or Datagram.Buffer.</p>
				<p>When using other PowerTCP components, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Offset.html">Offset</a> or Datagram.Offset property contains the 
			offset into the buffer.</p>
			</remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Segment.Count">
            <summary>
			The amount of bytes that were sent/received.
			</summary><value>
			An integer value representing the amount of bytes that were sent/received.
			</value><remarks>
				<p>When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component, using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object. The
			amount of bytes transferred is available through <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Offset.html">Offset</a>.</p>
				<p>When using the Udp component, using Udp.Send or Udp.Receive will return a Datagram object. The
			amount of bytes transferred is available through Datagram.Offset.</p>
				<p>When using other PowerTCP components, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> or Datagram object (which one depends on if TCP or UDP
			is used as the transport protocol) is made available to describe
			data sent or received, often in a Trace event. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Count.html">Count</a> or Datagram.Count property contains the 
			amount of bytes transferred.</p>
			</remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Segment.Sent">
            <summary>
			Indicates whether the data was sent or received.
			</summary><value>true if the data was sent, false otherwise.</value><remarks>
				<p>When using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component, all data sent or received with <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object.
			The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Sent.html">Sent</a> property indicates whether data was sent or received. If this property is true, then 
			the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object was created because data was sent; false, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object was created
			because data was received.</p>
				<p>When using the Udp component, all data sent or received with Udp.Send or Udp.Receive will return a Datagram object.
			The Datagram.Sent property indicates whether data was sent or received. If this property is true, then 
			the Datagram object was created because data was sent; false, the Datagram object was created
			because data was received.</p>
				<p>
			When using other PowerTCP components, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> or Datagram object is made available to describe
			data sent or received, often in a Trace event. Access the Sent property to determine if the Trace event
			was raised because data was sent or received.
			</p>
			</remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Segment.SocketFlags">
            <summary>
				Gets the SocketFlags associated with the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a>.
			</summary><remarks>
				<p>Indicates the flags used when <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> are used. See the SocketFlags topic within the MSDN documentation for more info.</p>
			</remarks><value>
				The SocketFlags associated with the Segment.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SegmentEventArgs">
            <summary>
            Provides data for any event where data is sent or received.
            </summary>
            <remarks><p>A <b>SegmentEventArgs</b> object is passed as a parameter to all events that report the transfer of data. This object contains
            a Segment object that references the data sent/received.</p>
            <p>If your code causes an exception, it would be returned to the handling
            event without you seeing it. To preclude such a condition, you should ALWAYS
            use a try/
            catch block around your event-handling code.</p>
            </remarks>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentEventArgs.Segment">
            <summary>
            The Segment object referencing the data that was sent or received.
            </summary>
            <value>A Segment object referencing the data that was sent or received.</value>
            <remarks><p>
            The Segment object will contain data describing the data that was sent or received.
            For example, the Segment object will contain the data itself, the amount of bytes sent,'
            and whether the Segment object was created as a result of data being sent or received.</p>
            <p>To access the data contained within the Segment object, simply access the properties of the
            Segment object. As a shortcut, you can simply get all data contained within the Segment object by
            using the Segment.ToString method.</p>
            </remarks>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a> may be thrown. You could check this property to see if it was of type <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a>, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SegmentEventHandler">
            <summary>
            Represents the method (event handler) that is raised when data is received or sent.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A SegmentEventArgs object that contains the event data.</param>
            <remarks>
            <p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
            <ul type="disc">
            <li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
            <li>A delegate that points to a method that provides the response to the event.</li>
            </ul>
            When sending or receiving data, the class that holds the event data is the SegmentEventArgs class. A method must be created with the same signature as the delegate. In this example that would mean a method would have to be defined to accept two arguments (an object and a SegmentEventArgs) and return void.
            Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event.
            </p>
            <p>For more information about event handler delegates, see the Using Events in PowerTCP topic.</p>
            <p>If your code causes an exception, it would be returned to the handling
            event without you seeing it. To preclude such a condition, you should ALWAYS
            use a try/
            catch block around your event-handling code.</p>
            </remarks>
            <example>
            <example>The following example demonstrates using the <b>Log</b> event to create a text log of all data sent over the control connection.
				<code lang="VB"> 
' The Trace Event will fire whenever data is sent/received over the control connection. 
Private Sub Ftp1_Log(ByVal sender As Object, ByVal e As Dart.PowerTCP.Ftp.SegmentEventArgs) Handles Ftp1.Log
   ' Create FileStream to write to log file
   Dim stream1 As New System.IO.FileStream("c:\FtpTest\mylog.log", IO.FileMode.OpenOrCreate, IO.FileAccess.ReadWrite)

   ' Create text to precede sent/received data.
   Dim recv() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Received &lt;--" + vbCrLf)
   Dim sent() As Byte = System.Text.Encoding.ASCII.GetBytes(vbCrLf + "Sent --&gt;" + vbCrLf)

   ' Set the stream position to append.
   stream1.Position = stream1.Length

   ' Check if data is incoming or outgoing and write appropriate data
   If e.Segment.Sent = True Then
      stream1.Write(sent, 0, sent.Length)
   Else
      stream1.Write(recv, 0, recv.Length)
   End If

   ' Write the data
   stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count)

   ' Close the stream
   stream1.Close()

End Sub    
				</code>
				<code lang="C#">
// The Trace Event will fire whenever data is sent/received. 

private void Ftp1_Trace(object sender, Dart.PowerTCP.Ftp.SegmentEventArgs e)
{

    // Create FileStream to write to log file
    System.IO.FileStream stream1 = new System.IO.FileStream("c:\\FtpTest\\log.txt", System.IO.FileMode.OpenOrCreate, System.IO.FileAccess.ReadWrite);

    // Create text to precede sent/received data.
    byte[] recv = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nReceived &lt;-- \r\n");
    byte[] sent = System.Text.ASCIIEncoding.ASCII.GetBytes("\r\nSent --&gt; \r\n");

    // Set the stream position to append.
    stream1.Position = stream1.Length;

    // Check if data is incoming or outgoing and write appropriate data
    if(e.Segment.Sent == true)
        stream1.Write(sent, 0, sent.Length);
    else
        stream1.Write(recv, 0, recv.Length);

    // Write the data
    stream1.Write(e.Segment.Buffer, e.Segment.Offset, e.Segment.Count);

    // Close the stream
    stream1.Close();
				</code>
			</example>
            </example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SegmentedStream">
            <summary>
            Used to provide advanced reading/writing capabilities to Stream-based objects.
            </summary>
            <remarks>
            <p> SegmentedStream provides a way to read/write a segment of bytes to/from a backing store.  
            To improve performance, 
            SegmentedStream buffers reads and writes to the underlying stream and
            provides asynchronous read and write capability.</p>
            <p>The SegmentedStream object is used within PowerTCP to read/write network data. The following examples
            further illustrate how SegmentedStream is used:
            <ul>
            <li>When using the Tcp or Telnet components, the TCP stream is exposed through the Object.Stream property (which is a SegmentedStream
            object). To write or read directly to the TCP stream, call Object.Stream.Read or Object.Stream.Write.</li>
            <li>The SegmentedStream object is also used to access the TCP stream when using other Internet components as well. For example,
            when using the Ftp component, Ftp.Get or Ftp.Put can be called, making accessible a SegmentedStream object. SegmentedStream.Read
            and SegmentedStream.Write can then be called to read and write directly to the data connection.</li>
            </ul>
            </p>
            </remarks>
            <example>The following example demonstrates connecting implementing the SMTP protocol using the Tcp component's stream interface to send a simple message.
				<code lang="VB">
' The following code assumes that good responses are always received from
' the server. More robust code should check each response and handle appropriately.

' Connect to SMTP port
Tcp1.Connect("mail", 25)

' Send the EHLO command
Tcp1.Stream.Write("EHLO myserver\r\n")

' Get response from the server
Dim s As String = Tcp1.Stream.Read()

' Send MAIL FROM command
Tcp1.Stream.Write("MAIL FROM: test@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send RCPT TO command
Tcp1.Stream.Write("RCPT TO: cranford@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA command
Tcp1.Stream.Write("DATA" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA
Tcp1.Stream.Write("Test Message" + vbCrLf + "." + vbCrLf)

' Receive response from the server
s = Tcp1.Stream.Read()

' Write output
Debug.WriteLine("Operation complete. The following information")
Debug.WriteLine("was reported by the server:")
Debug.WriteLine(s)
				</code>
				<code lang="C#"> 
// The following code assumes that good responses are always received from
// the server. More robust code should check each response and handle appropriately.

// Connect to SMTP port
tcp1.Connect("mail", 25);

// Send the EHLO command
tcp1.Stream.Write("EHLO myserver\r\n");

// Get response from the server
string s = tcp1.Stream.Read();

// Send MAIL FROM command
tcp1.Stream.Write("MAIL FROM: test@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send RCPT TO command
tcp1.Stream.Write("RCPT TO: cranford@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA command
tcp1.Stream.Write("DATA\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA
tcp1.Stream.Write("Test Message\r\n.\r\n");

// Receive response from the server
s = tcp1.Stream.Read();

// Write output
Debug.WriteLine("Operation complete. The following information");
Debug.WriteLine("was reported by the server:");
Debug.WriteLine(s);
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.#ctor(System.IO.Stream)">
            <summary>
            Initializes a new instance of the SegmentedStream class for the specified stream object.
            </summary>
            <param name="stream">The source stream to Read/Write.</param>
            <remarks>
            <p>Although any type of stream can be used to initialize a SegmentedStream (a FileStream or a MemoryStream, for
            example) the intended use is to initialize a SegmentedStream with some form of network stream (such as a TcpStream). You
            will not usually need to create a SegmentedStream object, as the SegmentedStream object currently accessing the TCP stream
            is made accessible (either as a property of the component, or as an object accessible in an event or returned from a method).
            For example, if you wish to send/receive data to/from a server using a stream interface, simply use Tcp.Connect to connect to the server and 
            call Tcp.Stream.Write or Tcp.Stream.Read to send/receive data.
            </p>
            </remarks>
            <example>The following example demonstrates initializing a new instance of a SegmentedStream object to a TcpStream.
				<code lang="VB">
' Connect to a server
Tcp1.Connect("atropos", 7)

' Initialize a SegmentedStream to the NetworkStream
Dim sstream As New SegmentedStream(new TcpStream(Tcp1))

' Send data
sstream.Write("hello")

' Receive data
Dim s As String = sstream.Read()
				</code>
				<code lang="C#"> 
// Connect to a server
tcp1.Connect("atropos", 7);

// Initialize a SegmentedStream to the NetworkStream
SegmentedStream sstream = new SegmentedStream(new TcpStream(tcp1));

// Send data
sstream.Write("hello");

// Receive data
string s = sstream.Read();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.#ctor(System.IO.Stream,System.Text.Encoding)">
            <summary>
            Initializes a new instance of the SegmentedStream class for the specified stream object.
            </summary>
            <param name="stream">The source stream to Read/Write.</param>
            <param name="encoding">The encoding type to use when working with strings.</param>
            <remarks>
            <p>Although any type of stream can be used to initialize a SegmentedStream (a FileStream or a MemoryStream, for
            example) the intended use is to initialize a SegmentedStream with some form of network stream (such as a TcpStream). You
            will not usually need to create a SegmentedStream object, as the SegmentedStream object currently accessing the TCP stream
            is made accessible (either as a property of the component, or as an object accessible in an event or returned from a method).
            For example, if you wish to send/receive data to/from a server using a stream interface, simply use Tcp.Connect to connect to the server and 
            call Tcp.Stream.Write or Tcp.Stream.Read to send/receive data.
            </p>
            </remarks>
            <example>The following example demonstrates initializing a new instance of a SegmentedStream object to a TcpStream.
				<code lang="VB">
' Connect to a server
Tcp1.Connect("atropos", 7)

' Initialize a SegmentedStream to the NetworkStream
Dim sstream As New SegmentedStream(new TcpStream(Tcp1))

' Send data
sstream.Write("hello")

' Receive data
Dim s As String = sstream.Read()
				</code>
				<code lang="C#"> 
// Connect to a server
tcp1.Connect("atropos", 7);

// Initialize a SegmentedStream to the NetworkStream
SegmentedStream sstream = new SegmentedStream(new TcpStream(tcp1));

// Send data
sstream.Write("hello");

// Receive data
string s = sstream.Read();
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from the stream that complete when at least one byte is read.
            This operation reads at most count bytes.
            </summary>
            <remarks>
            This is the standard method to use when reading a stream asynchronously. If a fixed-length record buffer is
            being read, use the overloaded Read() method that includes the 'bool fill' parameter. 
            If a variable-length record segment 
            is being read, use the overloaded Read() method that includes the 'byte[] delimiter' parameter.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
            <example>The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).
				<code lang="VB">
				</code>
				<code lang="C#"> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.Boolean,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from the stream that completes
            when the provided buffer is completely full, the number of bytes requested is read, or end of
            stream is reached.
            </summary>
            <remarks>
            The purpose of this method is to provide a convenient way to read a fixed-length
            record from the stream. The EndRead method should be called when your AsyncCallback
            delegate is raised.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The exact number of bytes to read.</param>
            <param name="fill">Always true, use this version of BeginRead to completely fill the buffer</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; (buffer.Length).</exception>
            <example>The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).
				<code lang="VB">
				</code>
				<code lang="C#"> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.BeginRead(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean@,System.AsyncCallback,System.Object)">
            <summary>
            Begins an asynchronous read from the stream that completes
            when the provided delimiter is found, count bytes have been read,
            or end of stream is reached.
            </summary>
            <remarks>
            The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream. The EndRead method should be called when your AsyncCallback
            delegate is raised.
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="callback">The AsyncCallback delegate to be called when the operation is complete.</param>
            <param name="state">An object containing state information for this operation.</param>
            <param name="found"></param>
            <returns>An IAsyncResult representing the asynchronous operation. 
            To determine how many bytes were read, you must pass this IAsyncResult to the EndRead method 
            of the stream. This should be done within your AsyncCallback event handler.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the buffer, delimiter or callback is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length, or delimiter.Length == 0, or delimiter.length &gt; count.</exception>
            <example>The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).
				<code lang="VB">
				</code>
				<code lang="C#"> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Close">
            <summary>
            Closes the current stream and releases any resources 
            (such as sockets and file handles) associated with the current stream.
            </summary>
            <remarks>
            <p>This method closes the SegmentedStream and frees resources associated with the SegmentedStream.</p>
            </remarks>
            <exception cref="T:System.ObjectDisposedException">A member was accessed while the stream was closed.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.EndRead(System.IAsyncResult)">
            <summary>
            Ends a pending asynchronous SegmentedStream.BeginRead request.
            </summary>
            <remarks>
            You will normally call this method from within your AsyncCallback event handler to complete your
            asynchronous read request, but it can be called anytime to cancel an outstanding request.
            </remarks>
            <param name="ar">
            Reference to the pending asynchronous request that is returned from BeginRead().
            </param>
            <returns>The number of bytes read from the stream and copied into the user's buffer.
            Will return 0 at the end of the stream to indicate the stream has closed and all data
            has been read.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">asyncResult is a null reference.</exception>
            <exception cref="T:System.ArgumentException">asyncResult is not a valid reference.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The end of the stream was found before the required byte count was received,
            or the end of the stream was found before the delimiter was found.
            </exception>
            <exception cref="T:System.IO.InternalBufferOverflowException">
            The delimiter was not found within the maximum number of bytes (count) specified.
            </exception>
            <example>The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).
				<code lang="VB">
				</code>
				<code lang="C#"> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.EndRead(System.IAsyncResult,System.Boolean@)">
            <summary>
            Ends a pending asynchronous SegmentedStream.BeginRead request (that uses a 'found' parameter).
            </summary>
            <remarks>
            You will normally call this method from within your AsyncCallback event handler to complete your
            asynchronous read request, but it can be called anytime to cancel an outstanding request.
            </remarks>
            <param name="ar">
            Reference to the pending asynchronous request that is returned from BeginRead().
            </param>
            <param name="found">
            Reference to the BeginRead() 'found' parameter.
            </param>
            <returns>The number of bytes read from the stream and copied into the user's buffer.
            Will return 0 at the end of the stream to indicate the stream has closed and all data
            has been read.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">asyncResult is a null reference.</exception>
            <exception cref="T:System.ArgumentException">asyncResult is not a valid reference.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The end of the stream was found before the required byte count was received,
            or the end of the stream was found before the delimiter was found.
            </exception>
            <exception cref="T:System.IO.InternalBufferOverflowException">
            The delimiter was not found within the maximum number of bytes (count) specified.
            </exception>
            <example>The following example demonstrates asynchronously reading from the server using the stream interface. This involves creating a callback method
				in which the response is handled. If you would like to use fully asynchronous methods with events already implemented, try the low-level interface (Tcp.BeginRead &amp; Tcp.BeginWrite).
				<code lang="VB">
				</code>
				<code lang="C#"> 
private void AsynchronousReadTest()
{
   // Connect to the server
   tcp1.Connect("atropos", 13);

   // DAYTIME protocol (port 13) sends data and closes, receive data.
   // This demonstrates receiving data asynchronously using the stream interface.
			
   // data buffer is a global variable
   databuffer = new byte[tcp1.ReceiveBufferSize];

   // Begin the asynchronous Read operation.
   tcp1.Stream.BeginRead(databuffer, 0, tcp1.ReceiveBufferSize, new System.AsyncCallback(MyCallback), null);
}

private void MyCallback(System.IAsyncResult ar)
{
   // End pending asynchronous request.
   if(ar.IsCompleted)
      tcp1.Stream.EndRead(ar);

   // Write result
   Debug.WriteLine(System.Text.Encoding.Default.GetString(databuffer));
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Flush">
            <summary>
            Updates the underlying data source or repository with the 
            current state of the buffer and then clears the buffer unless the internal Stream requires flushing..
            </summary>
            <remarks>
            All the read and write methods of SegmentedStream automatically maintain the buffer, so there is no need to invoke Flush when switching back and forth between reading and writing.
            </remarks>
            <example>The following example demonstrates writing data until a delimiter is reached.
				<code lang="VB">
' Create test data
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("acbdefghijklmnopqrstuvwxyz" + vbCrLf)
Dim delimiter As Byte() = System.Text.Encoding.Default.GetBytes("ghi")

Dim offset As Integer = 0
Dim count As Integer = buffer.Length

' Connect to echo port
Tcp1.Connect("atropos", 7)

' Send data until the delimiter is reached.
Dim found As Boolean = Tcp1.Stream.Write(buffer, delimiter, offset, count)

' Flush the rest of the data
Tcp1.Stream.Flush()

' Recieve data.
Dim s As String = Tcp1.Stream.Read()

Debug.WriteLine(s)

'* Output
'* -----------------------
'* abcdef
				</code>
				<code lang="C#"> 
// Create test data
byte[] buffer = System.Text.Encoding.Default.GetBytes("acbdefghijklmnopqrstuvwxyz\r\n");
byte[] delimiter = System.Text.Encoding.Default.GetBytes("ghi");
int offset = 0;
int count = buffer.Length;

// Connect to echo port
tcp1.Connect("atropos", 7);
			
// Send data until the delimiter is reached.
bool found = tcp1.Stream.Write(buffer, delimiter, ref offset, ref count);

// Flush the rest of the data
tcp1.Stream.Flush();

// Recieve data.
string s = tcp1.Stream.Read();

Debug.WriteLine(s);

/* Output
 * -----------------------
 * abcdef
 */
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read data from the stream into a byte array.
            </summary>
            <remarks>
            <p>
            This method will block (for ReceiveTimeout) until at least 1 byte is
            available for reading, or the connection is closed by the server, in which
            case an empty string is returned. The Charset property is used to convert from bytes to unicode characters, which allows unicode characters to be passed over the network.
            </p>
            <p>The value returned may be less than the 
            number of bytes requested if that many bytes are not currently available, or zero if 
            the end of the stream has been reached. Applications 
            must check this value to know how many bytes were read into the buffer.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Int32)">
            <summary>
            Read data from the stream into a string.
            </summary>
            <param name="maxLength">The maximum length of the string returned.</param>
            <returns>A string value representing the data read from the stream.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <remarks><p>This method reads data from the stream until at least 1 byte has been read or the end of the stream
            has been reached.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read">
            <summary>
            Read data from the stream into a string.
            </summary>
            <returns>A string containing the data read from the stream.</returns>
            <remarks>
            <p>
            This method will block (for ReceiveTimeout) until at least 1 byte is
            available for reading, or the connection is closed by the server, in which
            case an empty string is returned. The Charset property is used to convert from bytes to unicode characters, which allows unicode characters to be passed over the network.
            </p>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.String,System.Int32,System.Boolean@)">
            <summary>
            Read data from the stream until a delimiter is reached.
            </summary>
            <param name="delimiter">The sequence to find.</param>
            <param name="maxLength">The maximum length of the string returned.</param>
            <param name="found">Will be set to true if <i>sequence</i> is found; false otherwise.</param>
            <returns>A string representation of the bytes read.</returns>
            <remarks><p>This method reads data from the stream 
            until <i>delimiter</i> is found or the end of the stream is reached.</p>
            <p>This method is useful for reading until a sequence of characters is found. A good example of
            this is receiving an email message when using the POP protocol. When sending a POP mail message, a POP
            server will delimit the end of the message with &lt;CRLF&gt;.&lt;CRLF&gt;. Using this method you could simply read the data until
            this sequence is found, at which point the method would return.
            </p>
            <p>If the delimiter is found, <i>found</i> is true, otherwise <i>found</i> is false.</p>
            </remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.String)">
            <summary>
            Reads stream, accumulating string data, until delimiter is reached or timeout is reached.
            </summary>
            <remarks>
            <p>This method is useful when implementing high-level protocols.</p>
            </remarks>
            <param name="delimiter">The sequence to find.</param>
            <returns>The accumulated string data read from the stream.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Read data from the stream until a byte array is filled.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The exact number of bytes to read.</param>
            <param name="fill">Always true, use this version of Read to completely fill the buffer</param>
            <returns>The total number of bytes read into the buffer. This will either be the value
            of the count parameter, or zero if the stream has closed.</returns>
            <remarks><p>This method reads data from the stream and returns when the provided buffer is completely full or end 
            of stream is reached. This method is a good way to read fixed-length data. An example of this is with HTTP chunking,
            which occurs when the server breaks up the HTTP response into fixed-size chunks. Each chunk is preceded with a hexidecimal
            value notifying the receiver of the size of the data chunk to follow. Initialize a byte array to this 
            value, then call this method to fill the byte array.
            </p></remarks>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of the stream was found before the required byte count was received.
            When this occurs the Available property will indicate how much data may be read and the CanRead
            Property will return true.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Boolean)">
            <summary>
            Read data from the stream until a byte array is filled.
            </summary>
            <param name="buffer">The storage location for the received data.</param>
            <param name="fill">Always true, use this version of Read to completely fill the buffer</param>
            <returns>The total number of bytes read into the buffer. This will either be the value
            of the count parameter, or zero if the stream has closed.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            Thrown when the end of the stream was found before the required byte count was received.
            When this occurs the Available property will indicate how much data may be read and the CanRead
            Property will return true.
            </exception>
            <remarks><p>This method reads data from the stream and returns when the provided buffer is completely full or end 
            of stream is reached. This method is a good way to read fixed-length data. An example of this is with HTTP chunking,
            which occurs when the server breaks up the HTTP response into fixed-size chunks. Each chunk is preceded with a hexidecimal
            value notifying the receiver of the size of the data chunk to follow. Initialize a byte array to this 
            value, then call this method to fill the byte array.
            </p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Byte[],System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read data from the stream.
            </summary>
            <remarks>
            <p>This method reads from the stream and returns when the provided <i>delimiter</i> is found, 
            <i>count</i> bytes have been read, or end of stream is reached.</p>
            <p>The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream.</p>
            <p>If the delimiter is found, <i>found</i> is true, otherwise <i>found</i> is false.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="found">True if <i>delimiter</i> is found; false otherwise.</param>
            <returns>The total number of bytes read into the buffer, which will normally be less than count.
            Returns 0 if end of stream is reached and there is no data left to return.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            At least one byte was read without finding the delimiter before end of stream was reached.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Collections.ArrayList,System.Int32,System.Int32,System.Boolean@)">
            <summary>
            Read data from the stream until one of the specified delimiters is found.
            </summary>
            <remarks>
            <p>This method reads from the stream and returns when one of the provided <i>delimiters</i> is found, 
            <i>count</i> bytes have been read, or end of stream is reached.</p>
            <p>The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream.  The <i>delimiters</i> list must consist of byte arrays.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiters">The list of tokens to search for.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="count">The maximum number of bytes to read.</param>
            <param name="found">True if <i>delimiter</i>is found; false otherwise.</param>
            <returns>The total number of bytes read into the buffer, which will normally be less than count.
            Returns 0 if end of stream is reached and there is no data left to return.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            At least one byte was read without finding a delimiter before end of stream was reached.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Write(System.Byte[],System.Byte[],System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write data to the stream while carrying out a bytewise find/replace.
            </summary>
            <param name="buffer">The storage location of the data.</param>
            <param name="originalSequence">The sequence to find.</param>
            <param name="replacementSequence">The sequence to replace.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The number of bytes from buffer that should be processed using the byte replacement desired.</param>
            <remarks><p>Carries out a bytewise find/replace of all occurrences found in <i>buffer</i>
            of <i>originalSequence</i> with <i>replacementSequence</i>. This method is useful for performing
            simple encoding of data before sending.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Write(System.Byte[],System.Byte[],System.Int32@,System.Int32@)">
            <summary>
            Write data to the stream until a delimiter is reached.
            </summary>
            <param name="buffer">The storage location of the data.</param>
            <param name="delimiter">The sequence to find.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The exact number of bytes to write.</param>
            <returns>true if <i>delimiter</i> is found; false otherwise.</returns>
            <remarks>
            <p>This method writes data until the delimiter is found (returning true and not writing the delimiter) or writes the entire buffer (returning false).</p>
            <p>Flush must be called after writing if this method is being used.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Read(System.Byte[],System.Byte[],System.Boolean@)">
            <summary>
            Read data from the stream until a delimiter is reached.
            </summary>
            <remarks>
            <p>This method reads from the stream and returns when the provided delimiter is found, 
            <i>buffer</i>.length bytes have been read, or end of stream is reached.</p>
            <p>The purpose of this method is to provide a convenient way to read a variable-length
            record from the stream. This is the only kind of Read that uses internal buffering.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="delimiter">The token that is used to determine a segment was read.</param>
            <param name="found">True if <i>delimiter</i> is found; false otherwise.</param>
            <returns>The total number of bytes read into the buffer, which will normally be less than <i>buffer</i>.length.
            Returns 0 if end of stream is reached and there is no data left to return.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not readable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when the receiving buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when (offset + count) &gt; buffer.Length.</exception>
            <exception cref="T:System.IO.EndOfStreamException">
            At least one byte was read without finding the delimiter before end of stream was reached.
            </exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Seeks a specific position in the stream. 
            </summary>
            <param name="offset">A byte offset relative to origin.</param>
            <param name="origin">A value of type SeekOrigin indicating the reference point used to obtain the new position.</param>
            <returns>The number of bytes that were sought.</returns>
            <remarks><p>Returns value of CoreStream.Seek. TcpStream.Seek throws a NotSupportedException.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the Stream.
            This method always throws a NotSupportedException.
            </summary>
            <param name="value">The desired length of the current stream in bytes. </param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes data to the stream.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="count">The exact number of bytes to write.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <exception cref="T:System.ArgumentNullException">Thrown when buffer is null.</exception>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception>
            <exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
            <remarks>
            <p>This method writes a sequence of bytes to the stream and returns when the operation is complete.</p>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SegmentedStream.Write(System.String)">
            <summary>
            Write a string to the stream.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <remarks>
            <p>This method writes a string to the stream and returns from complete. Since this method
            writes a string (doing a byte array conversion behind-the-scenes using the Object.Charset to convert unicode characters to bytes) to the stream, it is useful
            for such purposes as sending protocol commands to a server.</p>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
            
        </member>
        <member name="E:Dart.PowerTCP.Ftp.SegmentedStream.Trace">
            <summary>
            </summary>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentedStream.Available">
            <summary>
            Gets the amount of bytes of data that has been received from the network and is available to be read.
            </summary>
            <returns>The number of bytes of data that has been received from the network and is available to be read.</returns>
            <remarks>A positive number indicates that data has been received from the network. Call SegmentedStream.Read to access this
            data. 0 indicates that no data is available to be read.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentedStream.CanRead">
            <summary>
            Indicates that data can be read from the stream.
            </summary>
            <returns><b>true</b> if the stream can be read; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentedStream.CanSeek">
            <summary>
            Indicates that the stream can seek a specific location
            in the stream.
            </summary>
            <remarks>This property always returns <b>false</b>.</remarks>
            <returns><b>true</b> is the stream supports seeking; otherwise <b>false</b>.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentedStream.CanWrite">
            <summary>
            Indicates that data can be written to the stream.
            </summary>
            <returns><b>true</b> if the stream can be written to; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SegmentedStream.Position">
            <summary>
            Gets or sets the position in the stream.
            </summary>
            <remarks>
            <p>Returns the value of CoreStream.Position. If a Tcp socket is the source of
            the stream, then a NotSupportedException is thrown.</p>
            </remarks>
            <returns>If a Tcp socket is the source of the stream, throws a NotSupportedException; otherwise returns the value of CoreStream.Position.</returns>
        </member>
        <member name="T:SerialNumber">
            <summary>
            Summary description for SerialNumber.
            </summary>
        </member>
        <member name="M:SerialNumber.GetSystemNumber">
            <summary>
            Return a unique volume number that can be used for license validation at design-time
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CryptoAPIConstants">
            <summary>
            
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SecHandle">
            <summary>
            Security handle
            Used as data type for credentials (CredHandle) and context (CtxtHandle)
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.SslStream">
            <summary>A PipeStream type which performs bidirectional SSL transforms to all data passing through the stream.</summary><remarks>
				<p>If you wish to communicate over a network using SSL, an <b>SslStream</b> must be used. 
				To switch from non-secure to secure communications, simply set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SecureProtocol.html">SecureProtocol</a> property like so:</p>
				<code>
				tcp1.SecureProtocol = SecureProtocol.Auto; // SSL enabled
				</code>
				<p>After doing this, simply call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> (or Tcp.Stream.Write and
				Tcp.Stream.Read) to send data securely. To switch back to non-secure, simply reset the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SecureProtocol.html">SecureProtocol</a> property:</p>
				<code>
				tcp1.SecureProtocol = SecureProtocol.None; // SSL "turned off"
				</code>
			</remarks>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.Finalize">
            <summary>
            
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.#ctor">
            <summary>
            Creates an instance of SslStream
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.#ctor(System.IO.Stream,Dart.PowerTCP.Ftp.Certificate,System.Boolean,System.Boolean,System.String,Dart.PowerTCP.Ftp.SecureProtocol)">
            <summary>Creates a new instance of SslStream.</summary><remarks>
				<p>This constructor creates a "ready-to-use" <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a> initialized with all supplied parameters.
				Optionally, use the SslStream(Stream) constructor and set the properties of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a>.
				</p>
			</remarks><param name="coreStream">The stream where encoded data will be written to and decoded data will be read from. Typically a TcpStream.</param><param name="cert">The Certificate object to use for authentication.</param><param name="client">Determines whether this SslStream instance will be used for a client-side or server-side implementation.</param><param name="clientAuthentication">Determines whether client authentication (requesting a certificate from the remote client) is used by default.</param><param name="remoteName">The name of the host with which SSL communication will be attempted.</param><param name="protocol">A SecureProtocol value specifying the security protocol to use, if any.</param>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.#ctor(System.IO.Stream)">
            <summary>Creates a new instance of SslStream.</summary><remarks>
				<p>This constructor creates a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a> initialized with the <i>coreStream</i>. This is for client-side implementations only.</p>
			</remarks><param name="coreStream">The stream where encoded data will be written to and decoded data will be read from. Typically a TcpStream.</param>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.ReadFilter(System.Byte[],System.Byte[]@)">
            <summary>
            
            </summary>
            <param name="input"></param>
            <param name="output"></param>
            <returns></returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>Read (while decrypting) data from the Stream.</summary><remarks>
				<p>This method actually calls SslStream.CoreStream.Read, first negotiating an SSL HandShake (when necessary)
				then decrypting all read data, placing the result in <i>buffer</i>.
				</p>
			</remarks><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer.
			</returns><exception cref="T:System.IO.IOException">Thrown when the Stream is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.SslStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>Write (while encrypting) data to the stream.</summary><remarks>
				<p>This method first encrypts the data to write, the calls SslStream.CoreStream.Write.</p>
			</remarks><param name="buffer">The storage location for the written data.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The exact number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the Stream is not writeable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.Authenticated">
            <summary>Gets or sets a value which determines if the SSL handshake has completed.</summary><remarks>
				<p>This property is false until the SSL handshake is completed, becomes true when the SSL handshake has completed.
				This value is reset to false when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a> is flushed.</p>
			</remarks><value>
				A Boolean value which determines if the SSL handshake has completed.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.Protocol">
            <summary>Indicates the protocol to use.</summary><remarks>
				<p>This property defaults to SecureProtocol.Auto, signifying the
				security protocol will be automatically detected (normally SSL3).</p>
				<p>If the Auto setting fails, you should try specifying TLS, and then try SSL3</p>
			</remarks><value>A SecureProtocol type indicating the protocol to use for secure communications.</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.Certificate">
            <summary>Returns the Certificate object used by this Stream.</summary><remarks>
				<p>
					A digital certificate is a common credential that provides authentication. This property
					returns the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> representing the digital certificate providing authentication for this
					SSL transaction.
				</p>
				<p><b>When creating a secure server:</b> Set Server.Certificate to the certificate you wish to use before
				starting the server by using Server.Listen. Any child that connected will be sent the certificate. If a child
				connects successfully, the Child.Stream property will return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> initialized with an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a>, so
				communication with the child can occur securely.
				</p>
				<p><b>When creating a secure client:</b> This property typically does not need to be set because clients don't
				often have to identify themselves. If the server does request a certificate from the client however, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~CertificateRequested_EV.html">CertificateRequested</a> event will
				be raised. Set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> control's underlying <b>SslStream.Certificate</b> property to a valid certificate within this event.
				</p>
			</remarks><returns>The Certificate object used by this Stream.</returns>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.Name">
            <summary>Uniquely identifies the name of the current session.</summary><remarks>
				<p>PowerTCP automatically supplies a value for this property, enabling
				the client and server to cache the current secure session for future reuse. When this
				occurs, the client and server are able to reuse their previous secure connection,
				bypassing the SSL handshake, making communication much more efficient for scenarios
				where multiple secure connections are occurring between the client and server.</p>
				<p>To disable this behavior (thereby "forcing" the SSL handshake with each connection)
				simply set this property to a unique value with each connection.</p>
			</remarks><returns>A string value uniquely identifying the name of the current session.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.RemoteCertificate">
            <summary>Returns the Certificate object representing the certificate the remote host used for authentication.</summary><remarks>
				<p>When a certificate is received from a remote host requesting authentication, the CertificateReceivedEvent is 
				raised. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> object is created and passed into this event handler, and also stored in <b>SslStream.RemoteCertificate</b>
				for use outside of the CertificateReceived event. Before the CertificateRecievedEvent is raised this property will
				be null.</p>
			</remarks><returns>The Certificate object representing the certificate received from the remote host; null if no certificate was yet received.</returns>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.SslStream.CertificateReceived">
            <summary>
				This event is raised when a certificate has been received to be authenticated.
			</summary><remarks>
				<p>A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.html">CertificateReceivedEventArgs</a> object is passed into the event handler, containing
				information required to determine the validity of the certificate.
				If the certificate is determined to be invalid (if any of the properties <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidDate.html">ValidDate</a>,
				<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidName.html">ValidName</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~TrustedRoot.html">TrustedRoot</a> are false) the certificate is 
				rejected. <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a> will be false to signify this. Set <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a>
				to true to override this and accept the certificate.
				</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.SslStream.CertificateRequested">
            <summary>
				This event is raised when a certificate has been requested.
			</summary><remarks>
				<p>The <b>SslStream.CertificateRequested</b> event is raised when a secure server requests a certificate 
				from the client for client authentication and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property has NOT already been set. 
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property of the current <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> control must be 
				set to a valid certificate. The easiest way to do this is to cast the <i>sender</i> parameter to an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a>,
				then set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property to a valid certificate.
				</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.SslStream.EndAuthentication">
            <summary>
				This event is raised when SSL authentication is complete.
			</summary><remarks>
				<p>Use this event to determine when SSL authentication has completed and 
				actual communication can begin.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.UseAuthentication">
            <summary>Gets or sets a value that determines if certificate authentication is used.</summary><remarks>
				<p>If set to true, you must control the acceptance/denial of certificates
				in the CertificateReceived event. If set to false, all certificates will be accepted no matter if they
				are valid or invalid.
				</p>
			</remarks><value>
				A Boolean value which determines if certificate authentication is used. Defaults to true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.SslStream.UseSslShutdown">
            <summary>Controls whether or not shut-down bytes are sent to the server when the connection is closed.</summary><remarks>
				<p>When the Object.Close method is used to close down a secure connection, the component will
				send out shut-down bytes to attempt to gracefully shut down the connection. However, some servers
				do not expect these shut-down bytes and, as a result, the connection can be improperly closed.
				If this is the case, set this property to false and no shut-down bytes will be sent when the connection
				is closed.</p>
			</remarks><value>True if shut-down bytes are to be sent to the server; false otherwise. The default value is true.</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateReceivedEventHandler">
            <summary>
				Represents the method (event handler) that is raised when a certificate is received.
			</summary><param name="sender">The source of the event.</param><param name="e">A CertificateReceivedEventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				</p>
				<p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.CertificateRequestedEventHandler">
            <summary>
				Represents the method (event handler) that is raised when a certificate is requested.
			</summary><param name="sender">The source of the event.</param><param name="e">An EventArgs object that contains the event data.</param><remarks>
				<p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
				<ul type="disc">
						<li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
						<li>A delegate that points to a method that provides the response to the event.</li>
					</ul>
				</p>
				<p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.InvalidParameterTypeException">
            <summary>
            Thrown whenever a method is called with an invalid parameter.
            </summary>
            <remarks>
            This exception is thrown if a method is called with a parameter of the wrong type.
            To keep this exception from being thrown read the documentation on the function throwing the exception.
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvalidParameterTypeException.#ctor">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvalidParameterTypeException.#ctor(System.String)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvalidParameterTypeException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvalidParameterTypeException.#ctor(System.String,System.Int32)">
            <summary>
            Initializes a new instance of the InvalidParameterException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.InvalidParameterTypeException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of InvalidParameterTypeException.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ProtocolException">
            <summary>
            Used to throw protocol exceptions for upper-layer protocols like FTP, SMTP and POP3.
            </summary>
            <remarks><p>This exception is thrown when a server response is negative. For example, 
            if the server returned "500" (indicating a syntax error) as response to a command being 
            sent, a ProtocolException would be thrown.</p></remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ProtocolException.#ctor">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ProtocolException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ProtocolException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ProtocolException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the ProtocolException class.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ProxyType">
            <summary>
            Enumerates the supported proxy types.
            </summary>
            <remarks>
            <p>This enumeration is used by the Proxy property.</p>
            <p>Set the Proxy.Type property to the proper ProxyType of your proxy server before calling any method that requires communication with the server.</p>
            </remarks>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ProxyType.None">
            <summary>
            No proxy server is used.
            </summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ProxyType.Socks4">
            <summary>
            SOCKS v4 proxy.
            </summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ProxyType.Socks5">
            <summary>
            SOCKS v5 proxy.
            </summary>
        </member>
        <member name="F:Dart.PowerTCP.Ftp.ProxyType.HttpConnect">
            <summary>
            Added Http-Connect proxy support 9-16-05, issue 3466
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ConnectEventHandler">
            
            <summary>
            Represents the method (event handler) that is raised when the BeginConnect operation completes.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">A ExceptionEventArgs object that contains the event data.</param>
            <remarks>
            <p>As Microsoft describes in their MSDN documentation, the event model in the .NET Framework is based on having an event delegate that connects an event with its handler. To raise an event, two elements are needed: 
            <ul type="disc">
            <li>A class that holds the event data. This class must derive from the base class EventArgs.</li>
            <li>A delegate that points to a method that provides the response to the event.</li>
            </ul>
            When using the BeginConnect method, the class that holds the event data is the ExceptionEventArgs class. A method must be created with the same signature as the delegate. In this example that would mean a method would have to be defined to accept two arguments (an object and a ExceptionEventArgs) and return void.
            Once this has been done, the delegate must be "connected" to the handling event. This is done by adding an instance of the delegate to the event.
            </p>
            <p>For more information about event handler delegates, see the Using Events In PowerTCP topic.</p>
            </remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ExceptionEventArgs">
            <summary>
            Provides data for asynchronous event handlers.
            </summary>
            <remarks><p>A <b>ExceptionEventArgs</b> object is passed into asynchronous event handlers after an asynchronous operation has completed. 
            If an exception occurred during the asynchronous operation, it is returned in ExceptionEventArgs.Exception.</p>
            <p>For more information on implementing and handling events using PowerTCP.NET, see the topic, "Events in PowerTCP".</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ExceptionEventArgs.#ctor(System.Exception,System.Object)">
            <summary>
            Initialize default instance of the ExceptionEventArgs class.
            </summary>
            <param name="exception"></param>
            <param name="state"></param>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ExceptionEventArgs.Exception">
            <summary>
				Gets any exception which occurred during the asynchronous operation.
			</summary><remarks>
				<p>Check this property to tell if an exception occurred during the asynchronous operation. If this property is null, no exception occurred.</p>
				<p>The exception property is useful for checking exceptions and handling them appropriately. For example, if a bad command was sent to the server, a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a> may be thrown. You could check this property to see if it was of type <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.ProtocolException.html">ProtocolException</a>, than handle appropriately.</p>
			</remarks><value>
				If any exception occurred during the asynchronous operation, this property will contain an Exception object describing the exception.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.ExceptionEventArgs.State">
            <summary>
				Gets the object that was included as part of the associated method call. 
			</summary><remarks>
				<p>The EndEventArgs.State property can be used in the calling asynchronous method to make data accessible
				to the handling event.</p>
				<p>This property is useful for making data accessible to the handling event. Since asynchronous methods are "disconnected" (meaning that when one is called, it executes on it's own and returns in the event handler) data that you were using in the code that called the asynchronous method may not be available in the event handler. Simply pass this data in as <i>state</i> when calling the asynchronous method (usually a BeginXXX method) and it is available in the event handler.
				If you do not wish to make an object accessible in the EndXXX event, simple pass in null as <i>state</i>.</p>
			</remarks><value>
				An object containing data passed into the calling asynchronous method.
			</value>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.EventHandlerEx">
            <summary>
            Replaces System.EventHandler when the SynchronizingObject property is used.
            </summary>
            <param name="sender">The source of the event.</param>
            <param name="e">An EventArgs object that contains the event data.</param>
            <remarks>
            When the SynchronizingObject is used, the ConnectedChanged event handler reports the SynchronizingObject as "sender".
            The EventHandlerEx is used to force the SynchronizingObject to correctly report the appropriate Tcp object as "sender".
            </remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Tcp">
            <summary>
            The <b>Tcp</b> component provides comprehensive Transmission Control Protocol support.
            </summary><remarks>
				<p>Use the <b>Tcp</b> Component to establish and manage socket-level streams of data. It simplifies the use of TCP communications by providing methods to establish connections, send and receive data, and terminate connections. Synchronous and asynchronous use is fully supported.</p>
				<H4 class="dtH4">Using the <b>Tcp</b> Component</H4>
				<p>What follows are short usage descriptions. For more information, see the appropriate member topic.</p>
				<p><b>Low-level interface vs stream interface</b>: Choose between sending data directly over the socket using a low-level interface, or use the stream
				interface to send/receive data with additional, stream-specific functionality. If you wish to use the low-level interface, you would use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a>
				and <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> methods. If you wish to use the stream-interface, use the Tcp.Stream.Read and Tcp.Stream.Write methods.
				</p>
				<p><b>Connecting:</b> To connect to a host, use either <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> (to connect synchronously) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginConnect.html">BeginConnect</a> (to connect asynchronously), specifying a remote host and port to connect to. Both of these 
				methods are overloaded to allow the specification of a local interface/port as well.</p>
				<p><b>Sending data using the low-level interface:</b> After connecting, send data by using either <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> (to send data synchronously) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> (to send data asynchronously). 
				These methods are overloaded to allow sending of strings or byte arrays. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object is returned from all Send operations, containing information about the data sent.</p>
				<p><b>Sending data using the stream interface:</b> To send data using the stream interface, use Tcp.Stream.Write. The stream interface offers additional functionality over the low-level interface for sending data such
				as sending data up to a delimiter and sending data while replacing characters.</p>
				<p><b>Receiving data using the low-level interface:</b> To receive data, use either <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> (to receive data synchronously) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> (to receive data asynchronously). This method is most useful when you either want to receive
				all available data in the buffer.</p>
				<p><b>Receiving data using the stream-interface:</b> To receive data using the stream interface, use Tcp.Stream.Read. The stream interface offers additional functionality over the low-level interface for receiving data such
				as receiving up to a delimiter or filling a fixed-size buffer.</p>
				<p><b>Event notification:</b> The <b>Tcp</b> component provides full event support including the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Trace_EV.html">Trace</a> event, raised when data is sent or received,
				the Tcp.ConnectedChanged event, raised when the value of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> changes.</p>
				<p><b>Socket option configuration:</b> The <b>Tcp</b> component enables socket option configuration (such as KeepAlive and NoDelay socket options, for example) by simply setting properties of the <b>Tcp</b> component. In addition, buffer-size/socket timeout
				configuration is possible by setting both the sending or receiving buffer size, and the sending and receiving timeout value.</p>
			</remarks>
            <example>The following example demonstrates blocking operations using the Tcp component.
				<code lang="VB">
Private Sub TcpDemo()
   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to Echo Server
   Tcp1.Connect("myEchoServer", 7)

   ' Send some data
   Tcp1.Send("Hello Server!" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())

   ' Send more data
   Tcp1.Send("You are a swell host" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())
   
   'Close the connection
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#">
private void TcpDemo()
{
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to Echo Server
   tcp1.Connect("myEchoServer", 7);

   // Send some data
   tcp1.Send("Hello Server!\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());

   // Send more data
   tcp1.Send("You are a swell host\r\n");

   // Get response from the server
   seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());
   
   //Close the connection
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.#ctor(System.ComponentModel.IContainer)">
            <summary>
            Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class.
            </summary><param name="container">The IContainer which contains the object.</param><remarks>
				<p>Use this constructor to add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class to the IContainer <b>container.</b></p>
				<p>To create an instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component using Visual Studio.NET, simply add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference), the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a>.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Available.html">Available</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Charset.html">Charset</a> </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~DoEvents.html">DoEvents</a> </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~KeepAlive.html">KeepAlive</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~LocalEndPoint.html">LocalEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~NoDelay.html">NoDelay</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~OutOfBandInline.html">OutOfBandInline</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Proxy.html">Proxy</a> </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveBufferSize.html">ReceiveBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~RemoteEndPoint.html">RemoteEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReuseAddress.html">ReuseAddress</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendBufferSize.html">SendBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendTimeout.html">SendTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Socket.html">Socket</a> </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Stream.html">Stream</a> </td>
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>The following example demonstrates creating a <b>Tcp</b> object.
				<code lang="VB">

' Declare as class member
Friend WithEvents Tcp1 As Tcp

' Create in class initialization
Me.Tcp1 = New Tcp()
				</code>
				<code lang="C#"> 
private Tcp tcp1 = new Tcp();         
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.InitializeComponent">
            <summary>
            	Required method for Designer support - do not modify
            	the contents of this method with the code editor.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.#ctor">
            <summary>
            Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class.
            </summary><remarks>
				<p>The default constructor initializes a new <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class.</p>
				<p>To create an instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component using Visual Studio.NET, simply add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference), the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a>.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Available.html">Available</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Charset.html">Charset</a> </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~DoEvents.html">DoEvents</a> </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~KeepAlive.html">KeepAlive</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~LocalEndPoint.html">LocalEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~NoDelay.html">NoDelay</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~OutOfBandInline.html">OutOfBandInline</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Proxy.html">Proxy</a> </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveBufferSize.html">ReceiveBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~RemoteEndPoint.html">RemoteEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReuseAddress.html">ReuseAddress</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendBufferSize.html">SendBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendTimeout.html">SendTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Socket.html">Socket</a> </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Stream.html">Stream</a> </td>
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>The following example demonstrates creating a <b>Tcp</b> object.
				<code lang="VB">

' Declare as class member
Friend WithEvents Tcp1 As Tcp

' Create in class initialization
Me.Tcp1 = New Tcp()
				</code>
				<code lang="C#"> 
private Tcp tcp1 = new Tcp();         
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.#ctor(System.Net.Sockets.Socket)">
            <summary>
            Initializes a new instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class, specifying the System.Net.Sockets.Socket to use for the underlying connection.
            </summary><param name="acceptedSocket">The System.Net.Sockets.Socket to use for the underlying connection.</param><remarks>
				<p>Use this constructor create an instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> class using an already created Socket. Typically, this is used when a connection is made on a socket that is listening for connections.</p>
				<p>To create an instance of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component using Visual Studio.NET, simply add the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component to the form and the object will automatically be created and initialized. If working out of the Visual Studio.NET environment (or using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference), the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will have to be explicitly created and initialized.</p>
				<p>The following table shows initial property values for an instance of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a>.</p>
				<div class="tablediv">
					<table cellspacing="0" class="dtTABLE">
						<tr valign="top">
							<th width="50%">Property</th>
							<th width="50%">Initial Value</th>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Available.html">Available</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Charset.html">Charset</a> </td>
							<td width="50%"> Default system charset (accessible via System.Text.Encoding.Default.BodyName)</td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~DoEvents.html">DoEvents</a> </td>
							<td width="50%"> true </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~KeepAlive.html">KeepAlive</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~LocalEndPoint.html">LocalEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~NoDelay.html">NoDelay</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~OutOfBandInline.html">OutOfBandInline</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Proxy.html">Proxy</a> </td>
							<td width="50%"> reference to Dart.PowerTCP.Proxy </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveBufferSize.html">ReceiveBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~RemoteEndPoint.html">RemoteEndPoint</a> </td>
							<td width="50%"> reference to System.Net.IPEndPoint </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReuseAddress.html">ReuseAddress</a> </td>
							<td width="50%"> false </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendBufferSize.html">SendBufferSize</a> </td>
							<td width="50%"> 8192 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~SendTimeout.html">SendTimeout</a> </td>
							<td width="50%"> 0 </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Socket.html">Socket</a> </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> Tcp.State </td>
							<td width="50%"> null </td>
						</tr>
						<tr valign="top">
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Stream.html">Stream</a> </td>
							<td width="50%"> <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> object </td>
						</tr>
					</table>
				</div>
			</remarks>
            <example>The following example demonstrates creating a <b>Tcp</b> object.
				<code lang="VB">

' Declare as class member
Friend WithEvents Tcp1 As Tcp

' Create in class initialization
Me.Tcp1 = New Tcp()
				</code>
				<code lang="C#"> 
private Tcp tcp1 = new Tcp();         
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.#ctor(System.ComponentModel.Component)">
            <summary>
             Initializes a new instance of the Tcp component.
            </summary>
            <example>The following example demonstrates sending bytes to the server with a SocketFlag option.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.#ctor(System.Net.Sockets.Socket,System.ComponentModel.Component)">
            <summary>
             Initializes a new instance of the Tcp component.
            </summary>
            <example>The following example demonstrates sending bytes to the server with a SocketFlag option.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Dispose(System.Boolean)">
            <summary>
			Releases all resources associated with the object.
			</summary><remarks>
				<p>The <b>Object.Dispose</b> method abruptly aborts the connection and releases all resources.</p>
				<p><b>Object.Dispose</b> should ONLY be used to release all resources used by the
object, and the object should not be used subsequently. If an abort is
desired, then Object.Close or Object.Connection.Close if available should be used to terminate
activity and reset the object. The Object cannot be used once <b>Object.Dispose</b> or Object.Dispose(true) are called.
</p>
			</remarks>
            <example>The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.
				<code lang="VB">
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
				</code>
				<code lang="C#"> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BlockingConnect(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            BlockingConnect is used for establishing ALL connections (async and blocking)
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.ConnectHttp(System.Net.IPEndPoint)">
            <summary>
            .mjb.3466.Added HttpConnect proxy support for FTP.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginConnect(System.String,System.Int32,System.String,System.Int32,System.Object)">
            <summary>
            Connect to a server asynchronously, specifying the local interface to use. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPort">Optional local port, a number between 1 and 65535, inclusive. Use 0 as default.</param><param name="state">User state information.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronously connecting using the BeginConnect method.
				<code lang="VB">
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginConnect(System.String,System.Int32,System.String,System.Int32,System.Int32,System.Object)">
            <summary>
            Connect to a server asynchronously, specifying the local interface and a range of local ports to use. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPortMin">The minimum client port number to use as a local interface.</param><param name="clientPortMax">The maximim client port number to use as a local interface.</param><param name="state">User state information.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginConnect(System.String,System.Int32)">
            <summary>
            Connect to a server asynchronously. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised when completed.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><remarks>
				<p>Use this method if you wish to connect to a host transparently with minimal 
			application impact, as execution occurs on another thread. This method begins to asynchronously connect to the server. Upon completion (on both success and failure)
            the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndConnect_EV.html">EndConnect</a> event is raised. An EventArgs object is passed into this event, containing
            information about the event. If the connection
            succeeds, the ConnectedChanged event is raised. Once the connection has been made, you can send and receive data from the remote device.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the EventHandler delegate.</p>
				<p>For more information on implementing and handling events using PowerTCP.NET, see the topic, Using Events In PowerTCP.</p>
				<p>To connect synchronously, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method.</p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronously connecting using the BeginConnect method.
				<code lang="VB">
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginReceive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Object)">
            <summary>
            Receive data into your buffer asynchronously specifying a buffer, offset, count and SocketFlags value. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event is raised when completed.
            </summary><param name="buffer">Destination memory location to store received data.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><param name="state">User state information.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> method is used to receive data into a buffer asynchronously. When data has been received, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event is raised.
            A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into this event, containing a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object which encapsulates information about 
            the data itself and the amount of bytes of data received.
            </p>
				<p>The object <i>state</i> is useful for any kind of <b>state</b> information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as <b>state</b> to be retrieved and used in the event handler.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventHandler.html">SegmentEventHandler</a> delegate.</p>
				<p>To synchronously receive data, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> method.</p>
				<p>
            Use this method if you wish to receive data into your buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method allows for greater configuration
			over how the data is received. For example, you could specify SocketFlags.Peek to peek at an incoming message.
			Also, if you would like to perform an asynchronous receive and make user defined objects available in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a>
			event (via the <i>state</i> object), you must use this method.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginReceive(System.Byte[])">
            <summary>
            Receive data into your buffer asynchronously. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event is raised when completed.
            </summary><param name="buffer">Destination memory location to store received data.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> method is used to receive data into a <b>buffer</b> asynchronously. When data has been received, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event is raised.
            A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into this event, containing a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object which encapsulates information about 
            the data itself and the amount of bytes of data received.
            </p>
				<p>The object <i>state</i> is useful for any kind of state information you would like accessible in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndReceive_EV.html">EndReceive</a> event. Since the method is "disconnected" from the calling code and returns to the calling thread elsewhere, you may wish to pass an object/variable as state to be retrieved and used in the event handler.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventHandler.html">SegmentEventHandler</a> delegate.</p>
				<p>To synchronously receive data, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> method.</p>
				<p>
            Use this method if you wish to receive data into a <b>buffer</b> transparently with minimal 
			application impact, as execution occurs on another thread. This method is the standard means for
			asynchronously receiving data. All available data is received.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags,System.Object)">
            <summary>
            Send data from your buffer asynchronously, specifying a buffer, offset, count and SocketFlags value. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndSend_EV.html">EndSend</a> event is raised when completed.
            </summary><param name="buffer">Source memory location for the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">Bitwise combination of special use sending parameters.</param><param name="state">User state information.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> method is used to send data from a buffer asynchronously. When the data has been sent, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndSend_EV.html">EndSend</a> event is raised.
            A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into this event, containing a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, containing information about the data sent, including
            the data itself and the amount of bytes of data sent.
            </p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventHandler.html">SegmentEventHandler</a> delegate.</p>
				<p>To synchronously send data, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method.</p>
				<p>
            Use this method if you wish to receive data into a buffer transparently with minimal 
			application impact, as execution occurs on another thread. This method allows for greater configuration
			over how the data is sent. For example, you could specify SocketFlags.DontRoute to specify to send without using routing tables.
			Also, if you would like to perform an asynchronous send and make user defined data available in the EndSend
			event, you must use this method.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BeginSend(System.Byte[])">
            <summary>
            Send data from your buffer asynchronously. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndSend_EV.html">EndSend</a> event is raised when completed.
            </summary><param name="buffer">Source memory location for the data to send.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> method is used to send data from a <b>buffer</b> asynchronously. When the data has been sent, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~EndSend_EV.html">EndSend</a> event is raised.
            A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into this event, containing a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, containing information about the data sent, including
            the data itself and the amount of bytes of data sent.
            </p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must "wire up" the event yourself. This involves creating a method as the event handler that implements the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventHandler.html">SegmentEventHandler</a> delegate.</p>
				<p>To synchronously send data, use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method.</p>
				<p>
            Use this method if you wish to receive data into a <b>buffer</b> transparently with minimal 
			application impact, as execution occurs on another thread. This method is the standard means for
			asynchronously sending data.
            </p>
			</remarks><exception cref="T:System.InvalidOperationException">BeginXXX method used without providing an EndXXX event handler.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception><returns>An IAsyncResult that represents the asynchronous operation, which could still be pending.</returns>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Close(System.Net.Sockets.LingerOption)">
            <summary>
            Close the connection.
            </summary><param name="linger">If null is used, a graceful disconnect will occur without blocking execution of your application.</param><remarks>
				<p>
            This method is the recommended way to explicitly close a connection.
            The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property is set to false when the connection is closed.
			</p>
				<p>
            The LingerOption parameter controls the amount of time to remain connected after the socket is closed.
            </p>
			</remarks>
            <example>The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.
				<code lang="VB">
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
				</code>
				<code lang="C#"> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Close">
            <summary>
            Close the connection.
            </summary><remarks>
				<p>
            This method is the recommended way to explicitly close a connection.
            The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property is set to false when the connection is closed.
			</p>
			</remarks>
            <example>The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.
				<code lang="VB">
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
				</code>
				<code lang="C#"> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Connect(System.String,System.Int32,System.String,System.Int32)">
            <summary>
            Connect to a host, specifying the local interface to use.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPort">Optional local port, a number between 1 and 65535, inclusive. Use 0 as default.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method establishes a network connection between the specified local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>The following example demonstrates connecting to a server while specifying a local interface to use.
				<code lang="VB">
' Connect to the server, specifying the local interface to use
Tcp1.Connect("atropos", 13, "192.168.0.83", 8888)

' Since connection was to DAYTIME port (13), simply receive the time
Dim seg As Segment = Tcp1.Receive()

Debug.WriteLine("Time reported by server: " + seg.ToString())
				</code>
				<code lang="C#"> 
// Connect to the server, specifying the local interface to use
tcp1.Connect("atropos", 13, "192.168.0.83", 8888);

// Since connection was to DAYTIME port (13), simply receive the time
Segment seg = tcp1.Receive();

Debug.WriteLine("Time reported by server: " + seg.ToString());
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Connect(System.String,System.Int32,System.String,System.Int32,System.Int32)">
            <summary>
            Connect to a host, specifying the local interface and a range of local ports to use.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><param name="client">Optional local hostname or address in dot notation. Use "" as default.</param><param name="clientPortMin">The minimum client port number to use as a local interface.</param><param name="clientPortMax">The maximum client port number to use as a local interface.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method establishes a network connection between the specified local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Connect(System.String,System.Int32)">
            <summary>
            Connect to a host.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">Remote port, a number between 1 and 65535, inclusive.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method establishes a network connection between the default local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>The following example demonstrates blocking operations using the Tcp component.
				<code lang="VB">
Private Sub TcpDemo()
   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to Echo Server
   Tcp1.Connect("myEchoServer", 7)

   ' Send some data
   Tcp1.Send("Hello Server!" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())

   ' Send more data
   Tcp1.Send("You are a swell host" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())
   
   'Close the connection
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#">
private void TcpDemo()
{
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to Echo Server
   tcp1.Connect("myEchoServer", 7);

   // Send some data
   tcp1.Send("Hello Server!\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());

   // Send more data
   tcp1.Send("You are a swell host\r\n");

   // Get response from the server
   seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());
   
   //Close the connection
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Connect(System.String,System.String)">
            <summary>
            Connect to a host.
            </summary><param name="server">Remote hostname or address in dot notation.</param><param name="serverPort">A string value which can be cast to an Integer between 1 and 65535, inclusive.</param><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> method establishes a network connection between the default local network interface/port and the device identified by remote network address/port. If no exception is thrown, the connection has succeeded and the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property will return true after this method returns. Once the connection has been made, you can send/receive data to/from the server.</p>
				<p>This method always blocks until the attempted connection succeeds or fails.</p>
			</remarks>
            <example>The following example demonstrates connecting to an echo port, sending data, receiving data, then closing the connection.
				<code lang="VB">
Private Sub TcpDemo()

   ' Connect to echo port.
   Tcp1.Connect("atropos", "7")

   ' Send some data
   Dim seg As Segment = Tcp1.Send("Hello")

   ' Display info
   Debug.WriteLine("Bytes of data sent: " &amp; seg.Count)
   Debug.WriteLine("Data sent: " &amp; seg.ToString())

   ' Receive response (this should be the same as the sent data)
   seg = Tcp1.Receive()

   ' Display info
   Debug.WriteLine("Bytes of data received: " &amp; seg.Count)
   Debug.WriteLine("Data received: " &amp; seg.ToString())

   ' Since connection is to an echo port, the client has to
   ' close the connection.
   Try
      Tcp1.Close()
   Catch ex As Exception
      ' Error, just dispose the object.
      Tcp1.Dispose()
   End Try

   '* Output
   '* --------------------------
   '* Bytes of data sent: 5
   '* Data sent: Hello
   '* Bytes of data received: 5
   '* Data received: Hello
   '*
End Sub
				</code>
				<code lang="C#"> 
private void TcpDemo()
{
   // Connect to echo port.
   tcp1.Connect("atropos", "7"); 

   // Send some data
   Segment seg = tcp1.Send("Hello");

   // Display info
   Debug.WriteLine("Bytes of data sent: " + seg.Count);
   Debug.WriteLine("Data sent: " + seg.ToString());

   // Receive response (this should be the same as the sent data)
   seg = tcp1.Receive();

   // Display info
   Debug.WriteLine("Bytes of data received: " + seg.Count);
   Debug.WriteLine("Data received: " + seg.ToString());

   // Since connection is to an echo port, the client has to
   // close the connection.
   try
   {
      tcp1.Close();
   }
   catch(Exception ex)
   {
      // Error, just dispose the object.
      tcp1.Dispose();
   }

   /* Output
    * --------------------------
    * Bytes of data sent: 5
    * Data sent: Hello
    * Bytes of data received: 5
    * Data received: Hello
    */
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Receive(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Receive data from the host, specifying a buffer, offset, count and SocketFlags value.
            </summary><param name="buffer">Destination memory location to store received data.</param><param name="offset">Starting offset within buffer for filling.</param><param name="count">Maximum number of bytes to receive.</param><param name="socketFlags">A bitwise combination of special use receiving parameters.</param><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating the data received. In order to access the data, simply
            access the properties of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object returned such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a> (to access the data in a byte array) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~ToString.html">ToString</a> 
            (to access the data as a string).</p>
				<p>This method is the only way to receive data from a host while specifying a SocketFlags parameter.</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates sending bytes to the server with a SocketFlag option.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Receive(System.Byte[])">
            <summary>
            Receive data from the host.
            </summary><param name="buffer">Destination memory location to store received data.</param><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating the data received. In order to access the data, simply
            access the properties of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object returned such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a> (to access the data in a byte array) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~ToString.html">ToString</a> 
            (to access the data as a string).</p>
				<p>If the amount of data received from the server exceeds <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveBufferSize.html">ReceiveBufferSize</a>, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> method will have to be called
			multiple times until the socket closes.
			</p>
				<p>This method is functionally equivalent to Tcp.Stream.Write(byte[]).</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates sending bytes to the server.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes.
   Tcp1.Send(sendbuffer)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes.
   tcp1.Send(sendbuffer);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Receive">
            <summary>
            Receive data from the host.
            </summary><returns>A Segment object encapsulating the data received.</returns><remarks>
				<p>After connecting, data can be received using the Tcp.Recieve method. All <b>Tcp.Receive</b> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating the data received. In order to access the data, simply
            access the properties of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object returned such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~Buffer.html">Buffer</a> (to access the data in a byte array) or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment~ToString.html">ToString</a> 
            (to access the data as a string).</p>
				<p>If the amount of data received from the server exceeds <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveBufferSize.html">ReceiveBufferSize</a>, the <b>Tcp.Receive</b> method will have to be called
			multiple times until the socket closes.
			</p>
				<p>This method is functionally equivalent to Tcp.Stream.Write().</p>
			</remarks><exception cref="T:System.IO.IOException">The stream is not Readable.</exception><exception cref="T:System.ArgumentNullException"><i>buffer</i> is null.</exception><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates blocking operations using the Tcp component.
				<code lang="VB">
Private Sub TcpDemo()
   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to Echo Server
   Tcp1.Connect("myEchoServer", 7)

   ' Send some data
   Tcp1.Send("Hello Server!" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())

   ' Send more data
   Tcp1.Send("You are a swell host" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())
   
   'Close the connection
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#">
private void TcpDemo()
{
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to Echo Server
   tcp1.Connect("myEchoServer", 7);

   // Send some data
   tcp1.Send("Hello Server!\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());

   // Send more data
   tcp1.Send("You are a swell host\r\n");

   // Get response from the server
   seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());
   
   //Close the connection
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.WaitFor(System.String)">
            <summary>
				Reads data from the stream until the specified string is found.
			</summary><remarks>
				<p>This method reads from the data stream until the specified string is 
				found or the method times out.
				Often, it is useful when communicating with a server to be able to
				read data until a token is found. For example, during a login operation the
				server may send a string "login:". You could use WaitFor to
				keep reading until you find "login:", then issue your login command.
				</p>
				<p>This method will block for the amount of time specified in
				<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a>. If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a> is 0, this method will throw
				a System.InvalidOperationException. If <i>prompt</i> is not found within the time
				specified by <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a>, a System.SocketException is thrown
				(with the timeout ErrorCode of 10060).</p>
			</remarks><returns>
				A string containing all data read from the stream.
			</returns><exception cref="T:System.Net.Sockets.SocketException"><i>prompt</i> was not found within the specified period of time.</exception><exception cref="T:System.InvalidOperationException">Tcp.ReceiveTimeout is 0.</exception><param name="prompt">Data is read until this string is found.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.WaitFor(System.String[])">
            <summary>
				Reads data from the stream until the specified string is found.
			</summary><remarks>
				<p>This method reads from the data stream until one of the specified strings are 
				found or the method times out.
				Often, it is useful when communicating with a server to be able to
				read data until one of several tokens is found. For example, during the login operation the
				server may send a string "login:". You could use the WaitFor method to
				keep reading until you find "login:", then issue your login command.
				</p>
				<p>This method will block for the amount of time specified in
				<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a>. If <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a> is 0, this method will throw
				a System.InvalidOperationException. If <i>prompt</i> is not found within the time
				specified by <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~ReceiveTimeout.html">ReceiveTimeout</a>, a System.SocketException is thrown
				(with the timeout ErrorCode of 10060).</p>
			</remarks><returns>
				A string containing all data read from the stream.
			</returns><exception cref="T:System.Net.Sockets.SocketException"><i>prompt</i> was not found within the specified period of time.</exception><exception cref="T:System.InvalidOperationException">Tcp.ReceiveTimeout is 0.</exception><param name="prompts">Data is read until one of the strings in the array is found.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Send(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            Send data to the server, specifying a buffer, offset, count and SocketFlags value.
            </summary><param name="buffer">Source memory location for the data to send.</param><param name="offset">Starting offset within buffer for sending.</param><param name="count">Number of bytes to send.</param><param name="socketFlags">A bitwise combination of special use sending parameters.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method. All <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is the only way to send data to a host while specifying a SocketFlags parameter.</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates sending bytes to the server with a SocketFlag option.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes with "OutOfBand" SocketFlag option
   Tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes with "OutOfBand" SocketFlag option
   tcp1.Send(sendbuffer, 0, sendbuffer.Length, SocketFlags.OutOfBand);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer, 0, recvbuffer.Length, SocketFlags.None);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Send(System.Byte[])">
            <summary>
            Send data to the server.
            </summary><param name="buffer">Source memory location for the data to send.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method. All <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is functionally equivalent to Tcp.Stream.Write(byte[]).</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates sending bytes to the server.
				<code lang="VB">
Private Sub Test()
   ' Connect to an echo port
   Tcp1.Connect("atropos", 7)

   Dim sendbuffer() As Byte = System.Text.Encoding.Default.GetBytes("abcdefg")

   ' Send some bytes.
   Tcp1.Send(sendbuffer)

   Dim recvbuffer(sendbuffer.Length) As Byte

   ' Server will echo the bytes back. Receive the bytes.
   Tcp1.Receive(recvbuffer)

   ' Close the connection.
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Connect to the echo port
   tcp1.Connect("atropos", 7);

   byte[] sendbuffer = System.Text.Encoding.Default.GetBytes("abcdefg");

   // Send some bytes.
   tcp1.Send(sendbuffer);

   byte[] recvbuffer = new byte[sendbuffer.Length];

   // Server will echo the bytes back. Receive the bytes.
   tcp1.Receive(recvbuffer);

   // Close the connection.
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.Send(System.String)">
            <summary>
            Send data to the server.
            </summary><param name="buffer">Data to be decoded into bytes and sent.</param><returns>A Segment object encapsulating information about the data sent.</returns><remarks>
				<p>After connecting, data can be received using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method. All <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> methods
            return a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object, encapsulating information about the data sent such as the data sent, and the amount of bytes of data sent.</p>
				<p>This method is functionally equivalent to Tcp.Stream.Write.</p>
			</remarks><exception cref="T:System.ArgumentOutOfRangeException"><i>offset</i> or <i>count</i> is less than 0.</exception><exception cref="T:System.ArgumentException"><i>offset</i> + <i>count</i> is greater than the length of <i>buffer</i>.</exception><exception cref="T:System.Net.Sockets.SocketException">The socket is not connected.</exception>
            <example>The following example demonstrates blocking operations using the Tcp component.
				<code lang="VB">
Private Sub TcpDemo()
   ' The following code assumes that good responses are always received from
   ' the server. More robust code should check each response and handle appropriately.

   ' Connect to Echo Server
   Tcp1.Connect("myEchoServer", 7)

   ' Send some data
   Tcp1.Send("Hello Server!" + vbCrLf)

   ' Get response from the server
   Dim seg As Segment = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())

   ' Send more data
   Tcp1.Send("You are a swell host" + vbCrLf)

   ' Get response from the server
   seg = Tcp1.Receive()
   Debug.WriteLine(seg.ToString())
   
   'Close the connection
   Tcp1.Close()
End Sub
				</code>
				<code lang="C#">
private void TcpDemo()
{
   // The following code assumes that good responses are always received from
   // the server. More robust code should check each response and handle appropriately.

   // Connect to Echo Server
   tcp1.Connect("myEchoServer", 7);

   // Send some data
   tcp1.Send("Hello Server!\r\n");

   // Get response from the server
   Segment seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());

   // Send more data
   tcp1.Send("You are a swell host\r\n");

   // Get response from the server
   seg = tcp1.Receive();
   Debug.WriteLine(seg.ToString());
   
   //Close the connection
   tcp1.Close();
}
				</code>
			</example>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Tcp.BlockingSend(System.Byte[],System.Int32,System.Int32,System.Net.Sockets.SocketFlags)">
            <summary>
            BlockingSend is ALWAYS used for sending data
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="socketFlags"></param>
            <returns></returns>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.CertificateReceived">
            <summary>
				This event is raised when a certificate has been received to be authenticated.
			</summary><remarks>
				<p>The <b>CertificateReceived</b> event is raised when a certificate has been received from
				a secure server.
				A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs.html">CertificateReceivedEventArgs</a> object is passed into the event handler, containing
				information required to determine the validity of the certificate.
				If the certificate is determined to be invalid (if any of the properties <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidDate.html">ValidDate</a>,
				<a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~ValidName.html">ValidName</a>, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~TrustedRoot.html">TrustedRoot</a> are false) the certificate is 
				rejected. <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a> is false to signify this. Set <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.CertificateReceivedEventArgs~Accept.html">Accept</a>
				to true to override this and accept the certificate.
				</p>
			</remarks>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.RemoteCertificate">
            <summary>
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> object representing the certificate presented by the remote host during the SSL handshake.
			</summary><value>
				A Certificate object representing the certificate presented by the remote host during the SSL handshake.
			</value><remarks>
				<p>If a secure connection was established and the remote host presented a certificate, <b>RemoteCertificate</b> will be a representation of this certificate.</p>
				<p>This property will always be set if a secure connection is established and the remote host is the server.  If the remote host is a client, it will only be set if client certificate authentication takes place.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.CertificateRequested">
            <summary>
				This event is raised when a certificate has been requested.
			</summary><remarks>
				<p>The <b>CertificateRequested</b> event is raised when a secure server requests a certificate 
				from the client for client authentication. The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property of the current <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component (or, if using a different
				component, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component used for the underlying connection) must be 
				set to a valid certificate. The easiest way to do this is to cast the <i>sender</i> parameter to an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a>,
				then set the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream~Certificate.html">Certificate</a> property to a valid certificate.
				</p>
				<p>Many objects provide a high-level Object.Certificate property, which represents the certificate used by the object.
				If the object you are using has such a high-level property it is recommended to use this property instead of the implementation
				described above.</p>
			</remarks>
            <example>The following example demonstrates creating a simple secure client.
				<code lang="VB">
    Private Sub SecureTest()

        'Allow component to negotiate best security option
        Tcp1.SecureProtocol = SecureProtocol.Auto

        ' Connect to a secure echo server.
        Tcp1.Connect("mysecureserver", 7)

        ' Send secure data
        Tcp1.Send("Test")

        ' Receive and display secure data
        System.Diagnostics.Debug.WriteLine(Tcp1.Receive().ToString())

        ' Close the connection
        Tcp1.Close()
    End Sub

    Private Sub Tcp1_CertificateRequested(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.CertificateRequested
        'The server has requested client authentication
        'Allow the user to select a certificate
        Dim certform As New CertificateListForm(True, True)
        If (certform.ShowDialog(Me) = DialogResult.OK) Then
            Tcp1.Certificate = certform.SelectedCertificate
        End If
    End Sub

    Private Sub Tcp1_CertificateReceived(ByVal sender As Object, ByVal e As Dart.PowerTCP.SslSockets.CertificateReceivedEventArgs) Handles Tcp1.CertificateReceived
        'If the server's certificate is invalid for any reason,
        'the user can decide whether to proceed
        Dim msg As String = "The certificate was invalid for the following reason(s)" + vbLf

        ' Check to see if the certificate is from a trusted root.
        If (Not e.TrustedRoot) Then
            msg += "This certificate is not from a trusted root" + vbLf
        End If

        ' Check to see if the certificate has a valid date.
        If (Not e.ValidDate) Then
            msg += "This certificate does not have a valid date" + vbLf
        End If

        ' Check to see if the certificate has a valid name.
        If (Not e.ValidName) Then
            msg += "This certificate does not have a valid name" + vbLf
        End If

        If (Not e.Accept) Then
            msg += "Would you like to accept this certificate anyway?"
            If (MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) = DialogResult.Yes) Then
                e.Accept = True
            End If
        End If
    End Sub
				</code>
				<code lang="C#"> 
private void SecureTest()
{
	//Allow component to negotiate best security option
	tcp1.SecureProtocol = SecureProtocol.Auto;

	// Connect to a secure echo server.
	tcp1.Connect("mysecureserver", 7);

	// Send secure data
	tcp1.Send("Test");

	// Receive and display secure data
	System.Diagnostics.Debug.WriteLine(tcp1.Receive().ToString());

	// Close the connection
	tcp1.Close();
}		

private void tcp1_CertificateRequested(object sender, System.EventArgs e)
{
	//The server has requested client authentication
	//Allow the user to select a certificate
	CertificateListForm certform = new CertificateListForm(true, true);
	if(certform.ShowDialog(this) == DialogResult.OK)
		tcp1.Certificate = certform.SelectedCertificate;
}

private void tcp1_CertificateReceived(object sender, CertificateReceivedEventArgs e)
{
	//If the server's certificate is invalid for any reason,
	//the user can decide whether to proceed
	string msg = "The certificate was invalid for the following reason(s)\n";

	// Check to see if the certificate is from a trusted root.
	if(!e.TrustedRoot)
		msg+= "This certificate is not from a trusted root\n";

	// Check to see if the certificate has a valid date.
	if(!e.ValidDate)
		msg+= "This certificate does not have a valid date\n";

	// Check to see if the certificate has a valid name.
	if(!e.ValidName)
		msg+= "This certificate does not have a valid name\n";

	if(!e.Accept)
	{
		msg += "Would you like to accept this certificate anyway?";
		if(MessageBox.Show(msg, "Invalid Cert Received", MessageBoxButtons.YesNo) == DialogResult.Yes)
			e.Accept = true;
	}
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Certificate">
            <summary>
				The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Certificate.html">Certificate</a> object representing the certificate to use for optional client-side authentication.
			</summary><value>
				A Certificate object representing the certificate to use for optional client-side authentication; null otherwise.
			</value><remarks>
				<p>If a secure server requests a certificate from the client for client-authentication, the value of this 
				property is sent to the server.</p>
				<p>Typically this property can either be set before attempting to connect or from within the CertificateRequested
				event which is raised when the server requests a certificate from the client.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.SecureProtocol">
            <summary>Gets or sets a value which determines the type of encryption to use on the data.</summary><value>A SecureProtocol value.</value><remarks>
				<p>Set this property to set the type of encryption to use on the data sent/received.
				This property defaults
				to SecureProtocol.None, signifying no encryption is used on the data.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.UseAuthentication">
            <summary>Gets or sets a value that determines if certificate authentication is used.</summary><remarks>
				<p>If set to true, you must control the acceptance/denial of certificates
				in the CertificateReceived event. If set to false, all certificates will be accepted no matter if they
				are valid or invalid.
				</p>
			</remarks><value>
				A Boolean value which determines if certificate authentication is used. Defaults to true.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.UseSslShutdown">
            <summary>Controls whether or not shut-down bytes are sent to the server when the connection is closed.</summary><remarks>
				<p>When the Object.Close method is used to close down a secure connection, the component will
				send out shut-down bytes to attempt to gracefully shut down the connection. However, some servers
				do not expect these shut-down bytes and, as a result, the connection can be improperly closed.
				If this is the case, set this property to false and no shut-down bytes will be sent when the connection
				is closed.</p>
			</remarks><value>True if shut-down bytes are to be sent to the server; false otherwise. The default value is true.</value>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.EndConnect">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginConnect.html">BeginConnect</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginConnect.html">BeginConnect</a> completes. An EventArgs object is passed into the event, containing information about the event.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginConnect.html">BeginConnect</a> method.</p>
			</remarks>
            <example>The following example demonstrates asynchronously connecting using the BeginConnect method.
				<code lang="VB">
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.EndReceive">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into the event, containing information about the event, such
           as the data received.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a> method.</p>
			</remarks>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.EndSend">
            <summary>
            Raised when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> request completes.
            </summary><remarks>
				<p>This event is raised when the asynchronous method call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> completes. A <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into the event, containing information about the event, such
           as the data sent.</p>
				<p>If any errors occurred during the asynchronous operation, they would be returned in the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object, check <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs~Exception.html">Exception</a> to check for any exception.</p>
				<p>For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see the topic, Using Events In PowerTCP.</p>
				<p>If you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as a reference, you must create a method to handle the event yourself.</p>
				<p>This event MUST be implemented if you are using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a> method.</p>
			</remarks>
            <example>The following example demonstrates asynchronous receiving and sending of data.
				<code lang="VB">
Private Sub AsynchTcpDemo()

   ' Attempt to connect to an echo port.
   Try
      Tcp1.Connect("myserver", 7)
   Catch ex As Exception
      Return
   End Try

   ' Send data, since we are connected to an echo port, the same data should be returned.
   ' The following code demonstrates asynchronously sending data. When data has been sent
   ' the EndSend event will be raised.

   Dim buffer() As Byte = System.Text.Encoding.Default.GetBytes("a")
   Tcp1.BeginSend(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
End Sub

Private Sub Tcp1_EndSend(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndSend
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Send is complete. Display info about the data sent.
      Debug.WriteLine("Byte count sent: " + e.Segment.Count)
      Debug.WriteLine("Data sent: " + e.Segment.ToString())
      
      Dim buffer(Tcp1.ReceiveBufferSize) As Byte

      ' Receive the data. The EndReceive event will be raised upon completion.
      Tcp1.BeginReceive(buffer, 0, buffer.Length, Net.Sockets.SocketFlags.None, Nothing)
    
    End If
End Sub

Private Sub Tcp1_EndReceive(ByVal sender As Object, ByVal e As Dart.PowerTCP.SegmentEventArgs) Handles Tcp1.EndReceive
   ' Check for exception
   If e.Exception Is Nothing Then

      ' Receive is complete. Display info about the data sent.
      Debug.WriteLine("Byte count received: " + e.Segment.Count)
      Debug.WriteLine("Data received: " + e.Segment.ToString())

      ' Close the connection
      Tcp1.Close()
    End If
End Sub
				</code>
				<code lang="C#"> 
private void AsynchTcpDemo()
{
    // Attempt to connect to an echo port.
    try
    {
        tcp1.Connect("myserver", 7);
    }
    catch(Exception ex)
    {return;}

    // Send data, since we are connected to an echo port, the same data should be returned.
    // The following code demonstrates asynchronously sending data. When data has been sent
    // the EndSend event will be raised.

    byte[] buffer = System.Text.Encoding.Default.GetBytes("a");
    tcp1.BeginSend(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
}

private void tcp1_EndSend(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Send is complete. Display info about the data sent.
        Debug.WriteLine("Byte count sent: " + e.Segment.Count);
        Debug.WriteLine("Data sent: " + e.Segment.ToString());
                

        byte[] buffer = new byte[tcp1.ReceiveBufferSize];
                    
        // Receive the data. The EndReceive event will be raised upon completion.
        tcp1.BeginReceive(buffer, 0, buffer.Length, System.Net.Sockets.SocketFlags.None, null);
    }
}

private void tcp1_EndReceive(object sender, Dart.PowerTCP.SegmentEventArgs e)
{
    // Check for exception
    if(e.Exception == null)
    {
        // Receive is complete. Display info about the data sent.
        Debug.WriteLine("Byte count received: " + e.Segment.Count);
        Debug.WriteLine("Data received: " + e.Segment.ToString());

        // Close the connection
        tcp1.Close();
    }
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.Trace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>This event is raised when commands or data has been sent/received. If you are using a component which uses TCP as the
				transport protocol a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentEventArgs.html">SegmentEventArgs</a> object is passed into the event containing any commands or data sent or received.
				If you are using a component which uses UDP as the transport protocol a DatagramEventArgs object is passed into the event containing any commands
				or data sent or received.</p>
				<p>The Object.RawTrace event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The <b>Object.Trace</b> event reports data sent/received at a higher level. For example, for the
				Telnet component, <b>Object.Trace</b> reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas Object.RawTrace
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>The following example demonstrates using the Tcp component's Trace event to create a log of all data sent and received.
				<code lang="VB">
Private Sub Tcp1_Trace(ByVal sender As Object, ByVal e As SegmentEventArgs) Handles Tcp1.Trace
   ' Get the data into a byte array
   Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes(e.Segment.ToString())

   ' Create a FileStream
   Dim f As New FileStream("C:\test\socketlog.log", FileMode.Append)

   ' Write the data to the file.
   f.Write(buffer, 0, buffer.Length)
   f.Close()
End Sub
				</code>
				<code lang="C#"> 
private void tcp1_Trace(object sender, SegmentEventArgs e)
{
   // Get the data into a byte array
   byte[] buffer = System.Text.Encoding.Default.GetBytes(e.Segment.ToString());
			
   // Create a FileStream
   FileStream f = new FileStream("C:\\test\\socketlog.txt", FileMode.Append);

   // Write the data to the file.
   f.Write(buffer, 0, buffer.Length);
   f.Close();
}
				</code>
			</example>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.RawTrace">
            <summary>
            Raised when data has been sent/received.
            </summary><remarks>
				<p>Use this event for advanced runtime debugging for security implementations. For general data traces use the Object.Trace event.</p>
				<p>The <b>Object.RawTrace</b> event always reports actual data sent/received over the socket. The Count
				of each segment reflects the number of bytes actually written and received.
				The Object.Trace event reports data sent/received at a higher level. For example, for the
				Telnet component, Object.Trace reports data sent/received, but does not report
				IAC option sequences that are processed by TelnetStream, whereas <b>Object.RawTrace</b>
				allows you to trace the actual data sent/received, including Telnet option
				commands.
				</p>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
        </member>
        <member name="E:Dart.PowerTCP.Ftp.Tcp.ConnectedChangedEx">
            <summary>
            Raised when the value of the Object.Connected property changes. Supersedes the ConnectedChanged event.
            </summary><remarks>
				<p>This event is raised when the value of the Object.Connected property changes. The value of the Object.Connected property changes whenever a TCP connection to a resource
				is either made or closed.</p>
				<p>This event is useful in several scenarios, for example:</p>
				<ul>
					<li>Displaying the user when a connection has been terminated.</li>
					<li>Notifying the application if a connection has been terminated.</li>
				</ul>
				<p>If you are using the PowerTCP component as a reference, you must create a method to handle the event yourself. For more information on using events using PowerTCP.NET within the Visual Studio.NET environment, see Using Events In PowerTCP.</p>
			</remarks>
            <example>The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.
				<code lang="VB">
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
				</code>
				<code lang="C#"> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.AutoReceive">
            <summary>
			Gets or sets a value which determines if data is automatically received.
            </summary><value>
            true if data is to be automatically received; false otherwise. The default value is false.
            </value><remarks>
				<p>
				Setting this property to true will cause the component to automatically post a BeginReceive immediately
				after connecting. Once data is received, the Object.EndReceive event is raised. Upon exiting this event, a new
				Object.BeginReceive is posted. As a result, when you use this methodology, you simply need to connect to the server
				and send data. Data is automatically received and Object.EndReceive is raised with no explicit call to Object.BeginReceive required.
			</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary><value>
            The number of bytes of data that has been received from the network and are available to be read.
            </value><remarks>
				<p>When data is received from the network, it is collected in system buffers. The <b>Tcp.Available</b> property
            contains the amount of bytes of data that has been received. In order to receive the data into a useful 
            data structure such as a string, byte array, or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Segment.html">Segment</a> object that you can use within your application
            you must use the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> or Tcp.Stream.Read
            methods. If these methods are not invoked or are seldom invoked, then "back pressure" is exerted at the remote host and packet transmission rates will decrease.
            If these methods are invoked, the data is received and removed from the system buffers, making room for more data to be received from the network.</p>
			</remarks>
            <example>The following example demonstrates receiving a chunked response from the server. HTTP 1.1 allows a server to send a "chunked" response. When this occurs, the server will send the headers then a hex value representing the size of the next "chunk". This is continued until all data has been sent. This is a good stream example because it demonstrates both reading until a delimiter is found and reading fixed-size "chunks" of data.
				<code lang="VB">
' Connect to HTTP Port
Tcp1.Connect("www.yahoo.com", 80)

' Send GET Request for home page. Be sure to specify HTTP/1.1 and Host 
' to get a chunked response.
Dim command As Byte() = System.Text.Encoding.Default.GetBytes("GET / HTTP/1.1" + vbCrLf + "Host:www.yahoo.com" + vbCrLf + vbCrLf)
Tcp1.Stream.Write(command)

' Get the headers by reading until a double CRLF is found.
Dim found As Boolean = False
Dim s As String = Tcp1.Stream.Read(vbCrLf + vbCrLf, 1024, found)

Dim pagedata As String = ""

' Keep receiving data. When all data is sent, the server will close the connection.
Do While Tcp1.Connected

   ' Get the chunk size by reading until a CRLF is found.
   s = Tcp1.Stream.Read(vbCrLf, 1024, found)

   ' Remove the delimiter
   s = s.Trim()

   ' Make sure s has data
   If s &lt;&gt; "" Then

      ' Convert from string hex to decimal integer.
      Dim chunksize As Integer = System.Convert.ToInt32(s, 16)

      ' The final chunk will have size 0 and does not need to be handled.
      If chunksize &lt;&gt; 0 Then

         ' initialize byte array with chunk size
         Dim data(chunksize) As Byte

         ' Fill the byte array.
         Tcp1.Stream.Read(data, True)

         ' Add to the string
         pagedata += System.Text.Encoding.Default.GetString(data)
      End If
   End If
Loop

' Entire page should be retrieved by this point. Display
Debug.WriteLine(pagedata)
				</code>
				<code lang="C#"> 
// Connect to HTTP Port
tcp1.Connect("www.yahoo.com", 80);

// Send GET Request for home page. Be sure to specify HTTP/1.1 and Host 
// to get a chunked response.
byte[] command  = System.Text.Encoding.Default.GetBytes("GET / HTTP/1.1\r\nHost:www.yahoo.com\r\n\r\n");
tcp1.Stream.Write(command);

// Get the headers by reading until a double CRLF is found.
bool found = false;
string s = tcp1.Stream.Read("\r\n\r\n", 1024, ref found);

string pagedata = "";

// Keep receiving data. When all data is sent, the server will close the connection.
while(tcp1.Connected)
{
   // Get the chunk size by reading until a CRLF is found.
   s = tcp1.Stream.Read("\r\n", 1024, ref found);
				
   // Remove the delimiter
   s = s.Trim();

   // Make sure s has data
   if(s != "")
   {
      // Convert from string hex to decimal integer.
      int chunksize = System.Convert.ToInt32(s, 16);
				
      // The final chunk will have size 0 and does not need to be handled.
      if(chunksize != 0)
      {
         // initialize byte array with chunk size
         byte[] data = new byte[chunksize];

         // Fill the byte array.
         tcp1.Stream.Read(data, true);

         // Add to the string
         pagedata+= System.Text.Encoding.Default.GetString(data);
      }
   }

}

// Entire page should be retrieved at this point. Display
Debug.WriteLine(pagedata);
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Charset">
            <summary>
				Gets and sets the character set used for string/byte array conversions.
			</summary><value>
				A string representing the character set used.
			</value><remarks>
				<p>This value defaults to the language used on the runtime machine (accessible through
				System.Text.Encoding.Default.BodyName). Set this property
				to the desired character set string to override this behavior.
				An example charset for Kanji is "ISO-2022-JP", while Latin-1 is "ISO-8859-1". "UTF-8" will always encode unicode strings, but not all mail readers support decoding this character set.
				</p>
				<p>When communicating with clients from other countries set this property based on the standard string defined for the language intended.
				This enables the International client to be able to properly decode the message.
				</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Connected">
            <summary>
				Gets the connected state of the connection.
			</summary><remarks>
				<p>If the PowerTCP component is connected to a remote resource AND authenticated, this property returns true. If this property is false, the connection was either never connected, is no longer connected, or is connected but not yet authenticated.
				When receiving data from the server, this property is a good way to tell if all data has been received. Keep receiving data in a loop until this property equals false.
				</p>
				<p>When using PowerTCP components which make use of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component as the underlying connection, this 
				property returns the same value as the Object.Connection.Connected property (where Object.Connection exposes the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> object used for the connection).</p>
				<p>The Object.ConnectedChanged and Object.ConnectedChangedEx events are raised whenever this property changes.</p>
			</remarks><value>
				true if the TCP connection is connected to a remote resource and authenticated; otherwise, false.
			</value>
            <example>The following example demonstrates the code required to build a simple echo server.
				<code lang="VB">
Private Sub StartServer()
   ' Begin listening for connections on port 7.
   Server1.Listen(7)
End Sub

Private Sub Server1_Connection(ByVal sender As Object, ByVal e As ConnectionEventArgs) Handles Server1.Connection
   ' This event is raised on a new thread when a connection is received.
   Try
      ' Keep receiving data until connection is closed
      Do While (e.Tcp.Connected)
         ' Receive data.
         Dim seg As Segment = e.Tcp.Receive()

         ' Echo data back to client
         e.Tcp.Send(seg.ToString())
      Loop
   Catch ex As Exception
      'eat exception  
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void StartServer()
{
   // Begin listening for connections on port 7.
   server1.Listen(7);
}

private void server1_Connection(object sender, ConnectionEventArgs e)
{
   // This event is raised on a new thread when a connection is received.
   try
   {
      // Keep receiving data until connection is closed
      while(e.Tcp.Connected)
      {
         // Receive data.
         Segment seg = e.Tcp.Receive();

         // Echo data back to client.
         e.Tcp.Send(seg.ToString());
      }
   }
   catch(Exception ex)
   {
      // eat any exceptions
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.ConnectTimeout">
            <summary>
				Gets or sets the number of milliseconds to wait for response from the server when connecting. 
			</summary><value>
				The number of milliseconds to wait for response from the server when connecting. The default value is 0.
			</value><remarks>
				<p>The Object.Connect method will block for the amount of time specified by <b>Object.ConnectTimeout.</b>
				If no response is received from the server in this amount of time, a System.Net.SocketException
				will be thrown. The default value is 0, indicating no timeout is used.
				</p>
				<p>NOTE. There is no pragmatic control over which the system will wait for a response. The generally accepted
				maximum wait time for Windows platforms appears to be 25 seconds. If you set this property for a value less than
				25 seconds, PowerTCP will throw a SocketException. If you set it for a value greater than 25 seconds, the system
				may throw an exception before your specified timeout is reached.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.DoEvents">
            <summary>
				  Gets or sets a value that controls the processing of events during blocking method calls.
			</summary><remarks>
				<p>When performing a synchronous (blocking) method, PowerTCP will process user-interface events (such as window painting)
            if this property is set to true AND the current thread has an event message queue.
            If no message queue is present (such as on an ASP page or under any worker thread), the value of this property has no effect.
            This property is used only for synchronous methods. <b>Object.DoEvents</b> is not needed if using asynchronous methods because the asynchronous method will execute on a different thread, allowing the UI thread to continue working unblocked.</p>
				<p>For example, this property is beneficial when an interactive application is being used and the user may want to abort a currently processing operation by clicking an "Abort" button.
			If <b>Object.DoEvents</b> is set to false, this will not be possible.
			Set the <b>Object.DoEvents</b> property to true and the application will respond to other events (such as button clicks) during synchronous operations.
			</p>
			</remarks><value>
				true if user-interface events should be processed during synchronous method calls; otherwise, false. The default value is true.
			</value>
            <example>The following example demonstrates some of the lesser used Tcp component members.
				<code lang="VB">
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
				</code>
				<code lang="C#"> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.KeepAlive">
            <summary>
            Gets or sets the value of the socket's KeepAlive option.
            </summary><value>
				<b>true</b> if packets are to be sent during inactive periods; otherwise, <b>false</b>. The default value is <b>false</b>.
            </value><remarks>
				<p>When a connection is inactive (data is not being sent or received for a period of time), setting <b>Tcp.KeepAlive</b> to true causes the underlying Socket of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component to probe the other end of a connection when it has been idle for an allotted amount of time (usually 2 hours).</p>
				<p>This property can be used to ensure a connection reset indication occurs during periods of inactivity.</p>
				<p>The timeout before keepalives are sent and the interval between keepalive transmissions can be set by editing the system's registry.</p>
				<p>1. Find the registry key.</p>
				<p>For Windows 95/98/ME:
				<pre class="code">[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\VxD\MSTCP]</pre>
				</p>
				<p>For other Operating Systems:
				<pre class="code">[HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services\Tcpip\Parameters]</pre>
				</p>
				<p>2. Create a DWORD value "KeepAliveTime" and set it to the number of milliseconds to wait before sending keep alive packets (the default is 2 hours - 7,200,000 milliseconds).</p>
				<p>3. Create a DWORD value (or string value for Windows 98) "KeepAliveInterval" and set it to the time in milliseconds between retransmissions of keepalives, once the KeepAliveTime has expired (the default is 1 second - 1000 milliseconds).</p>
				<p>4. Restart Windows for the change to take effect. </p>
			</remarks>
            <example>The following example demonstrates some of the lesser used Tcp component members.
				<code lang="VB">
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
				</code>
				<code lang="C#"> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.LocalEndPoint">
            <summary>
            Returns the local address the socket is bound to.
            </summary><value>
            The local IPEndPoint that the Tcp object is using for communications.
            </value><remarks>
				<p>
					<b>null</b> is returned when the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property is false. When the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property is true
            this property returns the IPEndPoint instance representing the local address and port. If a local interface
            was specified using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connect.html">Connect</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginConnect.html">BeginConnect</a> to connect to the host, this property should reflect
            that interface. Otherwise this property will reflect the default interface.
            </p>
				<p>
            To retrieve the local IP address, access Tcp.LocalEndPoint.Address. To retrieve the local port, access Tcp.LocalEndPoint.Port. 
            As a shortcut, use the Tcp.LocalEndPoint.ToString method to return the IP address and port in address:port notation.
            </p>
			</remarks>
            <example>The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.
				<code lang="VB">
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
				</code>
				<code lang="C#"> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.NoDelay">
            <summary>
            Gets and sets a value the disables the use of Nagle's algorithm so that data is sent immediately.
            </summary><value>
				<b>false</b> if Nagle's algorithm is to be used; otherwise <b>true</b>. The default value is <b>false</b>.
			</value><remarks>
				<p>When small pieces of data (such as a byte) are send many times consecutively, inefficiency can
            result because a packet could be sent with 1 byte of useful data and 40 bytes of header information.
            Nagle's algorithm specifies that data such as this should be automatically concatenated and sent in a single
            packet. 
            When true, Nagle's algorithm is defeated and data is immediately sent in a dedicated packet. 
            When false, Nagle's algorithm is used so consecutive Send methods might send data
            as a single (more efficient) packet.</p>
				<p>Setting this property to true could result in a speed optimization (because 
            packets is sent immediately, without having to wait to see if <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> is
            called again). Setting this property to false results in data being transmitted 
            more efficiently.</p>
			</remarks>
            <example>The following example demonstrates some of the lesser used Tcp component members.
				<code lang="VB">
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
				</code>
				<code lang="C#"> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.OutOfBandInline">
            <summary>
            Gets or sets a value that indicates whether out-of-band (urgent) data is read as normal in-line data.
            </summary><remarks>
				<p>When the "urgent" socket flag is set, this means that the packet contains data that should be acted upon before "non-urgent" data.
				Setting this property to true will cause this urgent data to be read in-line.
				If this property is set to false, the typical technique used to receive
				out-of-band data is
				BeginReceive(SocketFlags.Urgent)
				which posts a blocking receive on the socket waiting for urgent data to
				arrive.
				</p>
				<p>To minimize interoperability problems, applications writers are advised not to use out-of-band data unless this is required in order to interoperate with an existing service.</p>
			</remarks><value>
				<b>true</b> if urgent data is to be read as normal in-line data, otherwise <b>false</b>. The default value is <b>false</b>.
            </value>
            <example>The following example demonstrates some of the lesser used Tcp component members.
				<code lang="VB">
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
				</code>
				<code lang="C#"> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Proxy">
            <summary>
            Returns the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> instance that controls proxy server use.
            </summary><remarks>
				<p>Some networks are configured to require your use of an TCP proxy server. PowerTCP supports most types.
            Configure your proxy use by specifying the properties of this <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Proxy.html">Proxy</a> object.</p>
				<p>Use the <b>Tcp.Proxy</b> property if your application needs to connect with 
			one of the following proxies:</p>
				<ul>
					<li>SOCKS v4</li>
					<li>SOCKS v5</li>
				</ul>
			</remarks><value>
            The Proxy object to use to control proxy server use.
            </value>
            <example>The following example demonstrates asynchronously connecting using the BeginConnect method.
				<code lang="VB">
Private Sub Test()
   ' Begin to asynchronously connect to an echo port.
   Tcp1.BeginConnect("atropos", 7)
End Sub

Private Sub Tcp1_EndConnect(ByVal sender As Object, ByVal e As ExceptionEventArgs) Handles Tcp1.EndConnect
   ' Connect complete, check for any exceptions
   If e.Exception Is Nothing Then
      ' Now send some data.
      Tcp1.Send("hello")

      ' Receive the data back.
      Dim seg As Segment = Tcp1.Receive()
      Debug.WriteLine(seg.ToString())
   End If
End Sub
				</code>
				<code lang="C#"> 
private void Test()
{
   // Begin to asynchronously connect to an echo port.
   tcp1.BeginConnect("atropos", 7);
}

private void tcp1_EndConnect(object sender, ExceptionEventArgs e)
{
   // Connect complete, check for any exceptions
   if(e.Exception == null)
   {
      // Now send some data.
      tcp1.Send("hello");

      // Receive the data back.
      Segment seg = tcp1.Receive();

      Debug.WriteLine(seg.ToString());
   }
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.ReceiveBufferSize">
            <summary>
            Gets and sets the size of the system receive buffer.
            </summary><remarks>
				<p>This property sets the size of the system receive buffer. The default is 8192 which means that
            if the total data's bytes you are receiving exceeds this you will need to call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> multiple times
			until <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> = false.
			</p>
			</remarks><value>Size of the system receive buffer in bytes. The default is 8192.</value>
            <example>The following example demonstrates sending and receiving data using byte arrays.
				<code lang="VB">
' Connect to an echo port
Tcp1.Connect("atropos", 7)

' Send some bytes
Dim buffer As Byte() = System.Text.Encoding.Default.GetBytes("test")
Tcp1.Stream.Write(buffer, 0, buffer.Length)

' Receive the echoed data
Dim response(Tcp1.ReceiveBufferSize) As Byte
Tcp1.Stream.Read(response, 0, Tcp1.ReceiveBufferSize)

' Close the connection
Tcp1.Close()

' Display the response
Debug.WriteLine(System.Text.Encoding.Default.GetString(response))
				</code>
				<code lang="C#"> 
// Connect to an echo port
tcp1.Connect("atropos", 7);

// Send some bytes
byte[] buffer = System.Text.Encoding.Default.GetBytes("test");
tcp1.Stream.Write(buffer, 0, buffer.Length);

// Receive the echoed data
byte[] response = new byte[tcp1.ReceiveBufferSize];
tcp1.Stream.Read(response, 0, tcp1.ReceiveBufferSize);

// Close the connection
tcp1.Close();

// Display the response
Debug.WriteLine(System.Text.Encoding.Default.GetString(response));
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.ReceiveTimeout">
            <summary>
            Gets and sets the number of milliseconds that a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> method will block before throwing a SocketException.
            </summary><value>
            The timeout (in milliseconds) for completing a blocking Tcp.Receive or Tcp.Stream.Read. 
            </value><remarks>
				<p>The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will block (not execute further code on the main thread) until either the data requested is received or until the method blocks for the time specified in <b>Tcp.ReceiveTimeout,</b> at which point a SocketException is thrown.  The default is 0, which indicates no timeout.  When using <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginReceive.html">BeginReceive</a>, the EndReceive event will fire with a SocketException, if the <b>ReceiveTimeout</b> period expires.</p>
				<p>This property is useful for determining network failure while receiving data.  It is also useful for cases where the response from the server has to occur quickly or not at all, such as in an ASP script or when connecting and receiving data from a series of sockets in a batch process.</p>
				<p>If building a server application, this value determines how long a child connection can be idle before disconnecting them.</p>
				<p><b>   Note:  </b>If the <b>ReceiveTimeout</b> period expires, the resulting SocketException will NOT cause the connection to sever.  This is different behavior that earlier versions of the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> object.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.RemoteEndPoint">
            <summary>
            Returns the remote address/port the socket is connected to.
            </summary><value>
            The remote IPEndPoint that the Tcp object is using for communications.
            </value><remarks>
				<p><b>null</b> is returned when the Connected property is false. When the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Connected.html">Connected</a> property is <b>true</b>
            this property returns the IPEndPoint instance representing the remote address and port.
            </p>
				<p>
            To retrieve the remote IP address, access Tcp.RemoteEndPoint.Address. To retrieve the remote port, access Tcp.RemoteEndPoint.Port. 
            As a shortcut, use the Tcp.RemoteEndPoint.ToString method to return the IP address and port in address:port notation.
            </p>
			</remarks>
            <example>The following example demonstrates using the ConnectedChanged event to notify the user of the status of the connection.
				<code lang="VB">
Private Sub Tcp1_ConnectedChanged(ByVal sender As Object, ByVal e As System.EventArgs) Handles Tcp1.ConnectedChanged
   ' Get current state of connection
   If Tcp1.Connected Then
      Debug.WriteLine("Connection made")

      ' Display info about the local/remote endpoints
      Debug.WriteLine("Local endpoint: " + Tcp1.LocalEndPoint.ToString())
      Debug.WriteLine("Remote endpoint: " + Tcp1.RemoteEndPoint.ToString())
   Else
      Debug.WriteLine("Connection closed")
   End If
End Sub
				</code>
				<code lang="C#"> 
private void tcp1_ConnectedChanged(object sender, System.EventArgs e)
{
    // Get current state of connection
    if(tcp1.Connected)
    {
        Debug.WriteLine("Connection made");

        // Display info about the local/remote endpoints
        Debug.WriteLine("Local endpoint: " + tcp1.LocalEndPoint.ToString());
        Debug.WriteLine("Remote endpoint: " + tcp1.RemoteEndPoint.ToString());
    }
    else
        Debug.WriteLine("Connection closed");
}
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.ReuseAddress">
            <summary>
            Gets or sets a value that typically allows any local port to be specified, even if it is already in use.
            </summary><remarks>
				<p>The option is used (set to <b>true</b>) when a specific local port number is desired for multiple active connections.</p>
			</remarks><value>
				<b>true</b> if a specific local port number is desired for multiple active connections; otherwise <b>false</b>. The default is <b>false</b>, to indicate it should not be allowed.
            </value>
            <example>The following example demonstrates some of the lesser used Tcp component members.
				<code lang="VB">
' Disable UI events.
Tcp1.DoEvents = False

' Enable KeepAlive socket option
Tcp1.KeepAlive = True

' Disable use of Nagle's Algoritm
Tcp1.NoDelay = True

' Read urgent data as normal in-line data.
Tcp1.OutOfBandInline = True

' Allow addresses to be reused
Tcp1.ReuseAddress = True

' Connect
Tcp1.Connect("atropos", 7)

' Send data
Tcp1.Send("test")

' Receive response
Dim seg As Segment = Tcp1.Receive()
				</code>
				<code lang="C#"> 
// Disable UI events.
tcp1.DoEvents = false;

// Enable KeepAlive socket option
tcp1.KeepAlive = true;

// Disable use of Nagle's Algoritm
tcp1.NoDelay = true;

// Read urgent data as normal in-line data.
tcp1.OutOfBandInline = true;

// Allow addresses to be reused
tcp1.ReuseAddress = true

// Connect
tcp1.Connect("atropos", 7);

// Send data
tcp1.Send("test");

// Receive response
Segment seg = tcp1.Receive();
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.SendBufferSize">
            <summary>
            Gets and sets the size of the system send buffer.
            </summary><remarks>
				<p>This property sets the size of the system send buffer. The default is 8192 which means that
            if the total data's bytes you are sending exceeds this you will need to call <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> multiple times.</p>
			</remarks><value>
            The size of the system send buffer in bytes. The default is 8192.
            </value>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.SendTimeout">
            <summary>
            Gets and sets the number of milliseconds that a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a> method will block before throwing a SocketException.
            </summary><value>
            The timeout (in milli-seconds) for completing a blocking Tcp.Send or SegmentedStream.Write. The default is 0, which indicates no timeout.
            </value><remarks>
				<p>
            The <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will block (not execute further code on the main thread) until either the data is sent
			or until the method blocks for the time specified in <b>Tcp.SendTimeout,</b> at which point a SocketException is thrown.  The default is 0, which indicates no timeout.
			Setting this property has no effect on asynchronous methods such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~BeginSend.html">BeginSend</a>.
            </p>
				<p>
				This property is useful for determining network failure while sending data.
				It is also useful for cases where sending data has to occur quickly
				or not at all, such as in an ASP script or when connecting and sending data
				to a series of sockets in a batch process.
            </p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Socket">
            <summary>
            Returns a reference to the System.Net.Sockets.Socket instance being used.
            </summary><value>The System.Net.Sockets.Socket being used for the TCP connection.</value><remarks>
				<p>The Socket used for the TCP connection is exposed through this property. It is not recommended to read or write to the TCP stream using the Socket object directly.
            To read or write, use the higher-level methods such as <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Receive.html">Receive</a> or <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Send.html">Send</a>, or members of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp~Stream.html">Stream</a> such as Tcp.Stream.Read and Tcp.Stream.Write.</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Stream">
            <summary>
            Returns a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> that can be used for advanced streaming operations on the socket.
            </summary><value>
            A SegmentedStream object.
            </value><remarks>
				<p>
            Typically, when data needs to be send or received, the Object.Send or Object.Receive methods can be used. However, often
            advanced streaming operations are required. Two of the most common are reading token-delimited segments and
            fixed-length segments. To read fixed-length segments, simply create a fixed-size byte array the size of the
            segment you would like to read. Then use the Object.Stream.Read method, passing in the byte array and true as
            the <i>fill</i> parameter. Data is read until either all available data has been received, or the array
            has been completely filled with data. To read token-delimited segments, create an array of characters that you
            would like to use as a delimiter. Then use the Object.Stream.Read, passing in the delimiter array. Data is
            read until the delimiter has been reached. If the delimiter is not found, data is read until all data has been
            received.</p>
				<p><b>Note: The following applies to using the <b>Tcp.Stream</b> property with secure PowerTCP implementations only!</b> In addition, you can change the initialization of this property to change the behavior of the way data is read
			or written. Since <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SegmentedStream.html">SegmentedStream</a> is a <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a> type, Object.Stream.CoreStream can be changed to any type of <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a>.
			The PowerTCP secure implementation works this way. For example, if you wish to change to secure communications
			using SSL, you would initlialize the Object.Stream property using an <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.SslStream.html">SslStream</a> like so,
			</p>
				<code>
// Initialize the Stream property to a new <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a> "combination", enabling SSL communication. 
// (This only applies to using the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component to communicate securely.)
tcp1.Stream = new SegmentedStream(new SslStream(new TcpStream(tcp1)));
</code>
				<p>And, to switch back to "normal" communications,</p>
				<code>
// Switch back to a non-secure <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.PipeStream.html">PipeStream</a> "combination.
tcp1.Stream = new SegmentedStream(new TcpStream(tcp1));
</code>
				<p><b>Note for <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component usage only:</b>Internally, the <a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Tcp.html">Tcp</a> component will "scan" this property to link in the Tcp.CertificateReceivedEvent and Tcp.CertificateRequestedEvent, so these events do not
need to be explicitly linked in unless you require advanced functionality.
</p>
			</remarks>
            <example>The following example demonstrates connecting implementing the SMTP protocol using the Tcp component's stream interface to send a simple message.
				<code lang="VB">
' The following code assumes that good responses are always received from
' the server. More robust code should check each response and handle appropriately.

' Connect to SMTP port
Tcp1.Connect("mail", 25)

' Send the EHLO command
Tcp1.Stream.Write("EHLO myserver\r\n")

' Get response from the server
Dim s As String = Tcp1.Stream.Read()

' Send MAIL FROM command
Tcp1.Stream.Write("MAIL FROM: test@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send RCPT TO command
Tcp1.Stream.Write("RCPT TO: cranford@dart.com" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA command
Tcp1.Stream.Write("DATA" + vbCrLf)

' Get response from the server
s = Tcp1.Stream.Read()

' Send DATA
Tcp1.Stream.Write("Test Message" + vbCrLf + "." + vbCrLf)

' Receive response from the server
s = Tcp1.Stream.Read()

' Write output
Debug.WriteLine("Operation complete. The following information")
Debug.WriteLine("was reported by the server:")
Debug.WriteLine(s)
				</code>
				<code lang="C#"> 
// The following code assumes that good responses are always received from
// the server. More robust code should check each response and handle appropriately.

// Connect to SMTP port
tcp1.Connect("mail", 25);

// Send the EHLO command
tcp1.Stream.Write("EHLO myserver\r\n");

// Get response from the server
string s = tcp1.Stream.Read();

// Send MAIL FROM command
tcp1.Stream.Write("MAIL FROM: test@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send RCPT TO command
tcp1.Stream.Write("RCPT TO: cranford@dart.com\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA command
tcp1.Stream.Write("DATA\r\n");

// Get response from the server
s = tcp1.Stream.Read();

// Send DATA
tcp1.Stream.Write("Test Message\r\n.\r\n");

// Receive response from the server
s = tcp1.Stream.Read();

// Write output
Debug.WriteLine("Operation complete. The following information");
Debug.WriteLine("was reported by the server:");
Debug.WriteLine(s);
				</code>
			</example>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.SynchronizingObject">
            <summary>Set this object to automatically control thread marshalling between worker threads and the main UI thread.</summary><value>
				If used, the main UI thread object; null if unused.
			</value><remarks>
				<p>Any application that (1) uses multithreading (for example, an application which uses an asynchronous BeginXXX method)
				and (2) must update a shared UI element on the main UI thread (such as a ListView object) from one of these worker threads must set this
				property to the value of the main UI thread object. If the application meets both of these requirements and
				this property is NOT set, you may see strange behavior in your application (such as strange exceptions or improper UI element values).</p>
				<p>If you do not know whether or not you need to use this property, simply take the failsafe
				approach when programming Windows applications and always set this property to the Main Form object.
				If any thread marshalling has to occur between a worker thread and the UI thread, it will occur automatically.</p>
				<p>Provides data for the CollectionChanged event.


					<b>NOTE for server implementations:</b> If you are using a PowerTCP server component to build a server application, you
				do not want to set this property (as it will cause the server application to become single-threaded). Instead, you want to use
				the Control.BeginInvoke method to thread-marshall to the main UI thread (see any of the installed sample server applications for an example of this).</p>
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Tcp.Tag">
            <summary>
			Gets or sets an object reference that can be used to associate this instance with any other.
		</summary><remarks>
			Use this property to associate any type derived from Object class with the component. 
			A common use for the <B>Tag</B> property is to store data that is closely associated with the component.
		</remarks><value>
		Any object that is associated with the component; null if no objects are 
		associated with the component.
		</value><summary>
            Gets or sets an object reference that can be used to associate this instance with any other.
            </summary><value>
            Any object that is associated with the object, <b>null</b> if no objects are associated with the object
            </value><remarks>
				<p>
			 Use this property to associate any object with the object.				
            </p>
			</remarks>
            <example>The following example demonstrates a simple multi-client chat server.
				<code lang="VB">
Private Sub StartServer()
   ' Begin listening for connections on port 8888.
   Server1.Listen(8888)
End Sub

Private Sub Server1_Connection(ByVal sender As Object, ByVal e As ConnectionEventArgs) Handles Server1.Connection
   ' This event is raised on a new thread when a connection is received.
   Try
      ' Send username command.
      e.Tcp.Stream.Write("Please enter your username: ")

      ' Read until a CRLF is reached
      Dim found As Boolean = False
      Dim s As String = e.Tcp.Stream.Read(vbCrLf, 1024, found)

      If (found) Then
         ' Trim(whitespace)
         s = s.Trim()

         ' Associate username with TCP instance
         e.Tcp.Tag = s
         e.Tcp.Stream.Write("Go ahead and chat" + vbCrLf)
      Else
         ' Disconnect
         e.Tcp.Stream.Write("Bad Input" + vbCrLf)
         e.Tcp.Stream.Close()
      End If

      Do While (e.Tcp.Connected)
         
         ' Receive data.
         found = False
         Dim text As String = e.Tcp.Stream.Read(vbCrLf, 1024, found)
         
         ' Echo data back to all clients
         Dim tcp As Tcp
         For Each tcp In Server1.Connections
            ' Preface text with user name and send
            tcp.Stream.Write(e.Tcp.Tag.ToString() + ": " + text + vbCrLf)
         Next
      Loop
   Catch ex As Exception
      ' eat exception
   End Try
End Sub
				</code>
				<code lang="C#"> 
private void StartServer()
{
   // Begin listening for connections on port 8888.
   server1.Listen(8888);
}

private void server1_Connection(object sender, ConnectionEventArgs e)
{
   // This event is raised on a new thread when a connection is received.
   try
   {
      // Send username command.
      e.Tcp.Stream.Write("Please enter your username: ");

      // Read until a CRLF is reached
      bool found = false;
      string s = e.Tcp.Stream.Read("\r\n", 1024, ref found);

      if(found)
      {
         // Trim whitespace
         s = s.Trim();

         // Associate username with TCP instance
         e.Tcp.Tag = s;
         e.Tcp.Stream.Write("Go ahead and chat\r\n");
      }
      else
      {
         // Disconnect
         e.Tcp.Stream.Write("Bad Input\r\n");
         e.Tcp.Stream.Close();
      }
      while(e.Tcp.Connected)
      {
         // Receive data.
         found = false;
         string text = e.Tcp.Stream.Read("\r\n", 1024, ref found);

         // Echo data back to all clients
         foreach(Tcp tcp in server1.Connections)
         {
            // Preface text with user name (from Tcp.Tag) and send
            tcp.Stream.Write(e.Tcp.Tag.ToString() + ": " + text + "\r\n");
         }
      }
   }
   catch(Exception ex)
   {
      // eat exception
   }
}
				</code>
			</example>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.Proxy">
            <summary>
            Provides an easy way to manage communication with proxy servers
            </summary>
            <remarks>
            	<p>The <b>Proxy</b> class provides extensive native support for proxy servers. Simply set the appropriate properties of the <b>Proxy</b> class and proxy communication occurs transparently.</p>
            	<p>When using PowerTCP components that use the Tcp component for the underlying connection, you can set the Proxy properties by using the object.Connection property, which exposes the Tcp component.
            	When using the Tcp component, simple set the Tcp.Proxy property.
            	</p>	
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.Proxy.#ctor">
            <summary>
            Initializes a new instance of the <b>Proxy</b> class.
            </summary>
            <remarks>
            The default constructor initializes a new instance of the <b>Proxy class.</b>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Proxy.Server">
            <summary>
				Get or set a value which specifies the proxy server to use.
			</summary><value>
				A string representing the proxy server to use.
			</value><remarks>
				<p>Specifies the hostname of the proxy server. Specify the server either in dot notation ("111.111.111.111") or by host name ("myserver").</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Proxy.Password">
            <summary>
				Password to use when authenticating to a proxy.
			</summary><value>
				A string value representing the password used to access the a proxy.
			</value><remarks>
				<p>Specifies the password to use for authentication on some proxies.</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Proxy.ServerPort">
            <summary>
				Port to use when connecting to a proxy server.
			</summary><value>An integer value representing a proxy port to connect to.</value><remarks>
				<p>Specifies the port to use when connecting to the proxy server.</p>
			</remarks>	
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Proxy.Type">
            <summary>
            Type of proxy.
            </summary>
            <value>
            One of the ProxyType values.
            </value>
            <remarks>
            <p>Specifies the type of proxy used.</p>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.Proxy.Username">
            <summary>
				User name to use when authenticating to a proxy.
			</summary><value>
				A string value representing the user name used to access a proxy.
			</value><remarks>
				<p>Specifies the username to use for authentication on some proxies.</p>
			</remarks>	
        </member>
        <member name="T:Dart.PowerTCP.Ftp.TcpStream">
            <summary>
            TcpStream implements sending and receiving of data through network sockets.
            </summary>
            <remarks>
            <p>All PowerTCP components which use TCP as the transport-layer protocol use this class as the interface to the Socket.</p>
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.TcpStream.#ctor(Dart.PowerTCP.Ftp.Tcp)">
            <summary>
            Initializes a new instance of the TcpStream class for the specified Tcp object.
            </summary>
            <param name="tcp">The Tcp object that provides the network data for the new TcpStream.</param>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.TcpStream.Close">
            <summary>
            Closes the current stream and releases any resources 
            (such as sockets and file handles) associated with the current stream.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.TcpStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads at least one byte of data from the stream and copies it into the provided buffer.
            </summary>
            <remarks>
            <p>This is the standard method to use when reading a stream synchronously.</p>
            <p>The return value may be less than the 
            number of bytes requested if that many bytes are not currently available, or zero if 
            the end of the stream has been reached. Applications 
            must check this value to know how many bytes were read into the buffer.</p>
            </remarks>
            <param name="buffer">The storage location for the received data.</param>
            <param name="offset">The zero-based position in the buffer at which to store the received data.</param>
            <param name="size">The maximum number of bytes to read.</param>
            <returns>The total number of bytes read into the buffer.</returns>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Readable.</exception>
            <exception cref="M:System.ArgumentNullException.#ctor">Thrown when the receiving buffer is null.</exception>
            <exception cref="M:System.ArgumentOutOfRangeException.#ctor">Thrown when the offset is less than zero or when size is less than or equal to zero.</exception>
            <exception cref="M:System.ArgumentException.#ctor">Thrown when the (offset + size) &gt; buffer.Length.</exception>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.TcpStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to the stream and returns when the operation is complete.
            </summary>
            <param name="buffer">The storage location of the data to be sent.</param>
            <param name="offset">The zero-based position in the buffer from which to begin writing from.</param>
            <param name="size">The exact number of bytes to write.</param>
            <exception cref="T:System.IO.IOException">Thrown when the stream is not Writeable.</exception>
            <exception cref="M:System.ArgumentNullException.#ctor">Thrown when buffer is null.</exception>
            <exception cref="M:System.ArgumentOutOfRangeException.#ctor">Thrown when the offset is less than zero or when size is less than or equal to zero.</exception>
            <exception cref="M:System.ArgumentException.#ctor">Thrown when the (offset + size) &gt; buffer.Length.</exception>
            <remarks>
            <p>Use the CanWrite property to determine whether the current instance supports writing.</p>
            </remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.TcpStream.Available">
            <summary>
            Gets the amount of data that has been received from the network and is available to be read.
            </summary>
            <returns>The number of bytes of data that has been received from the network and is available to be read.</returns>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.TcpStream.CanRead">
            <summary>
            Indicates that data can be read from the stream.
            </summary>
            <returns><b>true</b> if the stream can be read; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Ftp.TcpStream.CanWrite">
            <summary>
            Indicates that data can be written to the stream.
            </summary>
            <returns><b>true</b> if the stream can be written to; otherwise, <b>false</b>.</returns>
            <remarks>If the stream is closed, this property returns <b>false</b>.</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.BusyException">
            <summary>
            Thrown whenever a method is called to perform an operation when an operation is already in progress.
            </summary>
            <remarks>
            This exception is thrown if a method is called to perform an upper-layer protocol operation when an operation is already in progress.
            To keep this exception from being thrown, check the object.Busy property to see if an operation is already in progress.
            </remarks>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.BusyException.#ctor">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.BusyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.BusyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.BusyException.#ctor(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            Initializes a new instance of the BusyException class.
            </summary>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ThreadSafe">
            <summary>
            Summary description for ThreadSafe.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ThreadSafe.CoreInvoke(System.Delegate,System.Object[])">
            <summary>
            This method is raised on a worker thread, and executes CurrentDelegate using the provided arguments.
            </summary>
            <param name="CurrentDelegate"></param>
            <param name="args"></param>
            <returns></returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Int64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.UInt64)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Single)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.Identity(System.Double)">
            <summary>
            This method returns the literal value received
            </summary>
            <param name="literal">The literal to return</param>
            <returns>The received value</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int32,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int32)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.URShift(System.Int64,System.Int64)">
            <summary>
            Performs an unsigned bitwise right shift with the specified number
            </summary>
            <param name="number">Number to operate on</param>
            <param name="bits">Ammount of bits to shift</param>
            <returns>The resulting number from the shift operation</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.Stream,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source Stream and writes the data to the target array at the specified index.</summary>
            <param name="sourceStream">The source Stream to read from.</param>
            <param name="target">Contains the array of characteres read from the source Stream.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source Stream.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source Stream. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ReadInput(System.IO.TextReader,System.Byte[],System.Int32,System.Int32)">
            <summary>Reads a number of characters from the current source TextReader and writes the data to the target array at the specified index.</summary>
            <param name="sourceTextReader">The source TextReader to read from</param>
            <param name="target">Contains the array of characteres read from the source TextReader.</param>
            <param name="start">The starting index of the target array.</param>
            <param name="count">The maximum number of characters to read from the source TextReader.</param>
            <returns>The number of characters read. The number will be less than or equal to count depending on the data available in the source TextReader. Returns -1 if the end of the stream is reached.</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToByteArray(System.String)">
            <summary>
            Converts a string to an array of bytes
            </summary>
            <param name="sourceString">The string to be converted</param>
            <returns>The new array of bytes</returns>
        </member>
        <member name="M:ComponentAce.Compression.Libs.zlib.SupportClass.ToCharArray(System.Byte[])">
            <summary>
            Converts an array of bytes to an array of chars
            </summary>
            <param name="byteArray">The array of bytes to convert</param>
            <returns>The new array of chars</returns>
        </member>
        <member name="T:Dart.PowerTCP.Zip.CompressionLevel">
            <summary>Enumerates the compression levels.</summary><remarks>For no compression, use CompressionMethod.Store.</remarks>
            <example>The following example demonstrates using QuickZip and specifying specific options.  Only QuickZip is required in this operation.
				<code lang="VB"> 
' Be sure to import the namespace by putting "Imports Dart.PowerTCP.Zip"
' at the top of your class.

' Preserve the path structure of the files
Archive1.PreservePath = True
	
' Include any subdirectories
Archive1.IncludeSubs = True
	
' Specify compression level
Archive1.CompressionLevel = CompressionLevel.Medium

' Use the Deflate compression method
Archive1.DefaultCompressionMethod = CompressionMethod.Deflate

' Exclude any text files
Archive1.ExcludePattern = "*.txt"

' Set to use encryption
Archive1.DefaultEncryption = Encryption.Standard

' Specify the password
Archive1.Password = "testme"

' Perform the compression operation - this is the only required method for the operation
Archive1.QuickZip("c:\\Test\\*.*", "c:\\test.zip")

				</code>
				<code lang="C#"> 
// Be sure to import the namespace by putting "using Dart.PowerTCP.Zip;"
// at the top of your class.

// Preserve the path structure of the files
archive1.PreservePath = true;

// Include any subdirectories
archive1.IncludeSubs = true;
			
// Specify compression level
archive1.CompressionLevel = CompressionLevel.Medium;
			
// Use the Deflate compression method
archive1.DefaultCompressionMethod = CompressionMethod.Deflate;
			
// Exclude any text files
archive1.ExcludePattern = "*.txt";
			
// Set to use encryption
archive1.DefaultEncryption = Encryption.Standard;

// Specify the password
archive1.Password = "testme";
			
// Perform the compression operation - this is the only required method for the operation
archive1.QuickZip("c:\\Test\\*.*", "c:\\test.zip");

				</code>
			</example>
        </member>
        <member name="F:Dart.PowerTCP.Zip.CompressionLevel.Low">
            <summary>Lowest compression with the fastest speed.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Zip.CompressionLevel.Medium">
            <summary>Moderate compression with moderate speed.</summary>
        </member>
        <member name="F:Dart.PowerTCP.Zip.CompressionLevel.High">
            <summary>Highest compression with the slowest speed.</summary>
        </member>
        <member name="T:Dart.PowerTCP.Zip.BaseStream">
            <summary>Abstract base class for ZipEncryptingStream, ZipDecryptingStream, AesEncryptingStream, AesDecryptingStream, UtilityStream and ZStream.</summary>
        </member>
        <member name="M:Dart.PowerTCP.Zip.BaseStream.Close">
            <summary>
				Calls InnerStream.Close.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Zip.BaseStream.Flush">
            <summary>
				Updates the underlying repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The Stream is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.BaseStream.SetLength(System.Int64)">
            <summary>
				Sets the length of the current Stream to the specified value. Always throws a NotSupportedException.
			</summary><param name="value">The value at which to set the length.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.BaseStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
				Sets the position within the current Stream to the specified value. Always throws a NotSupportedException.
			</summary><param name="offset">The new position within the stream</param><param name="origin">A value of type SeekOrigin, which acts as the seek reference point.</param><exception cref="T:System.NotSupportedException">Always thrown by this method.</exception><remarks>
				This method is not supported, and always throws a NotSupportedException.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Zip.BaseStream.CanRead">
            <summary>	
				Gets a value indicating whether the current Stream supports reading.
			</summary><value>
				true if reading is currently allowed, and false if not.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Zip.BaseStream.CanSeek">
            <summary>
				Gets a value indicating whether the current Stream supports seeking.
			</summary><value>
				This property always returns false;
			</value><remarks>
				Streams used by PowerTCP do not support seeking. This property always returns false.
			</remarks>
        </member>
        <member name="P:Dart.PowerTCP.Zip.BaseStream.CanWrite">
            <summary>
				Gets a value indicating whether the current Stream supports writing.
			</summary><value>
				true if the Stream supports writing; false otherwise.
			</value>
        </member>
        <member name="P:Dart.PowerTCP.Zip.BaseStream.Length">
            <summary>
				Gets the length in bytes of the stream.
			</summary><value>
				A long value representing the length of the Stream in bytes.
			</value><remarks>
				<p>If the Stream is a CodingStream or a Stream derived from CodingStream, this property is an estimate and should not be considered accurate. 
				When using a MessageStream, MessageStream.Length cannot be depended on to be completely accurate once an object is set by the user.  It is only precise during write operations.
				With other PowerTCP Streams this number should be accurate.</p>
			</remarks><exception cref="T:System.NotSupportedException">The Stream does not support seeking.</exception>
        </member>
        <member name="P:Dart.PowerTCP.Zip.BaseStream.Position">
            <summary>
				Gets or sets the current position of this stream.
			</summary><value>
				The current position of this stream.
			</value><remarks>
				<p>If the Stream is a CodingStream or a MessageStream or a Stream derived
				from CodingStream or MessageStream, this property can only be set to 0. Setting
				the property to any other value results in a NotSupportedException.</p>
			</remarks><exception cref="T:System.NotSupportedException">The Stream does not support setting the Position to any value except 0.</exception>
        </member>
        <member name="T:Dart.PowerTCP.Zip.ZStream">
            <summary>Used as the abstract base class for CompressingStream and InflatingStream.</summary><remarks>
				<p><a href="Dart.PowerTCP.Ftp~Dart.PowerTCP.Ftp.Compression.html">Compression</a> software is provided by the generosity of ComponentAce:</p>
				<p>Copyright (c) 2006-2007, ComponentAce
					<br>http://www.componentace.com</br>
					<br>All rights reserved.</br>
				</p>
				<p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p>
				<p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. Neither the name of ComponentAce nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. </p>
				<p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.ZStream.Close">
            <summary>
				Closes the current stream and releases any resources (such as sockets and file handles) associated with the current stream.
			</summary>
        </member>
        <member name="M:Dart.PowerTCP.Zip.ZStream.Flush">
            <summary>
				Updates the underlying repository with the current state of the 
				buffer and then clears the buffer. 
			</summary><exception cref="T:System.IO.IOException">An I/O error occurs.</exception><exception cref="T:System.ObjectDisposedException">The Stream is closed.</exception><remarks>
				<p>If the Stream contains any internal Streams as members, this method will also cause the Flush method of all
					internal Streams.
				</p>
				<p>
				This method MUST be called when writing is complete for operations to operate properly. One example is when creating a message 
				comprised of only headers. If Flush is not called, the headers will be lost.
				</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.CompressingStream.#ctor(System.IO.Stream,Dart.PowerTCP.Zip.CompressionLevel,System.Boolean)">
            <summary>Creates a stream that will apply Zip compression to all data written to or read from it.</summary><remarks>
				<p>Standard Zip compression will be applied to all bytes passing through this stream.</p>
			</remarks><param name="innerStream">When reading, the data stream to be compressed. When writing, the stream to be filled with compressed data.</param><param name="level">CompressionLevel.Low, CompressionLevel.Medium, or CompressionLevel.High</param><param name="header">If true, a ZLIB header is generated. If false, no header is created.</param>
        </member>
        <member name="M:Dart.PowerTCP.Zip.CompressingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads data from the Stream and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer. A return value of 0 indicates no data is left to read.
			</returns><exception cref="T:System.IO.IOException">Thrown when the Stream is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method copies bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading up to the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.CompressingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the Stream and returns when the operation is complete.
			</summary><param name="buffer">Contains the data to be written.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the Stream is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method copies bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.InflatingStream.#ctor(System.IO.Stream,System.Boolean)">
            <summary>Creates a stream that will uncompress (inflate) data written to or read from it.</summary><remarks>
				<p>Standard Zip decompression will be applied to all bytes passing through this stream.</p>
			</remarks><param name="innerStream">When reading, the data stream to be uncompressed (inflated). When writing, the stream to be filled with uncompressed (restored) data.</param><param name="header">If true, a ZLIB header is expected. If false, no header is expected.</param>
        </member>
        <member name="M:Dart.PowerTCP.Zip.InflatingStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Reads data from the Stream and copies it into the provided buffer. 
			</summary><param name="buffer">The storage location for the received data.</param><param name="offset">The zero-based position in the buffer at which to store the received data.</param><param name="count">The maximum number of bytes to read.</param><returns>
				The total number of bytes read into the buffer. A return value of 0 indicates no data is left to read.
			</returns><exception cref="T:System.IO.IOException">Thrown when the Stream is not readable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer or callback is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method copies bytes from the Stream to <i>buffer</i>, starting from the 
				position specified by <i>offset</i> and reading up to the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="M:Dart.PowerTCP.Zip.InflatingStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
				Writes a sequence of bytes to the Stream and returns when the operation is complete.
			</summary><param name="buffer">Contains the data to be written.</param><param name="offset">The zero-based position in the buffer from which to begin writing from.</param><param name="count">The number of bytes to write.</param><exception cref="T:System.IO.IOException">Thrown when the Stream is not writable.</exception><exception cref="T:System.ArgumentNullException">Thrown when the buffer is null.</exception><exception cref="T:System.ArgumentOutOfRangeException">Thrown when the offset is less than zero or when count is less than or equal to zero.</exception><exception cref="T:System.ArgumentException">Thrown when the (offset + count) &gt; buffer.Length.</exception><remarks>
				<p>This method copies bytes contained in <i>buffer</i> to the Stream, starting from the 
				position specified by <i>offset</i> and writing the number of bytes specified by <i>count</i>.</p>
			</remarks>
        </member>
        <member name="T:Dart.PowerTCP.Ftp.ZStreamException">
            <summary>
            Indicates a failure in ZLIB compression processing.
            </summary>
        </member>
        <member name="M:Dart.PowerTCP.Ftp.ZStreamException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZStreamException class.
            </summary>
        </member>
    </members>
</doc>
